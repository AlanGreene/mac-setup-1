* macOS Setup
:properties:
:header-args: :tangle setup.command
:header-args:sh: :shebang #!/bin/sh :results silent
:end:
#+startup: content nohideblocks hidestars indent

From clean install to fully configured.

#+begin_example sh :tangle no
  sudo "/Applications/Install macOS Sierra.app/Contents/Resources/createinstallmedia" \
    --applicationpath "/Applications/Install macOS Sierra.app" --nointeraction \
    --volume "/Volumes/Install"
#+end_example

** Initialize

*** New Terminal

#+begin_src sh
  if [ -z "$1" ]; then
    if [[ ! $SHELL == *"zsh" ]]; then
      chsh -s /bin/zsh
    fi

    osascript << EOF
  tell app "Terminal" to do script "source ${0} 0"
  EOF
    clear
  else
#+end_src

*** Constants

#+begin_src sh
  CACHE="/Volumes/Install"
  DOMAIN="ptb2.me"
  MAIL="mail.${DOMAIN}"

  MAS="$(getconf DARWIN_USER_CACHE_DIR)com.apple.appstore"
#+end_src

*** Utility Functions

#+begin_src sh
  function p () {
    printf "\n\033[1m\033[34m%s\033[0m\n\n" "${1}"
  }
#+end_src

*** Disable Repeated Requests for Password

#+begin_src sh
  function init_sudoers () {
    p "Disable repeated requests for password"

    printf "%s\t%s\n" \
      "timeout" "Defaults:%admin timestamp_timeout=-1" \
      "installer" "%admin ALL=(ALL) NOPASSWD:SETENV: /usr/sbin/installer" \
      "tty_tickets" 'Defaults:%admin !tty_tickets' \
    | while IFS=$'\t' read a b; do
      sudo tee "/etc/sudoers.d/${a}" <<< "${b}" > /dev/null
    done
  }
#+end_src

*** Disable System and Disk Sleep

#+begin_src sh
function init_no_sleep () {
  p "Disable system and disk sleep"

  sudo pmset -a sleep 0
  sudo pmset -a disksleep 0
}
#+end_src

*** Set Computer Name and Local Hostname

#+begin_src sh
  function init_hostname () {
    p "Set computer name and local hostname"
#+end_src

*Computer Name*
#+begin_src sh
  sudo systemsetup -setcomputername $(ruby -e "print '$(hostname -s)'.capitalize") &> /dev/null
#+end_src

*Local Hostname*
#+begin_src sh
  sudo systemsetup -setlocalsubnetname $(hostname -s) &> /dev/null
#+end_src

#+begin_src sh
  }
#+end_src

*** Set Permissions on Install Destinations

#+begin_src sh
  function init_perms () {
    p "Set permissions on install destinations"

    for c in \
      "/Library/ColorPickers" \
      "/Library/Fonts" \
      "/Library/Input Methods" \
      "/Library/PreferencePanes" \
      "/Library/QuickLook" \
      "/Library/Screen Savers" \
      "/usr/local" \
    ; do
      sudo chgrp -R admin "${c}"
      sudo chmod -R g+w "${c}"
    done

    if [ ! -d "/usr/local/bin" ]; then
      mkdir -m o-w -p "/usr/local/bin"
    fi
  }
#+end_src

*** Install Developer Tools

#+begin_src sh
  function init_devtools () {
    p "Install developer tools"

    if [ -d "${CACHE}/Updates" ]; then
      sudo chown -R "${USER}" "/Library/Updates"
      rsync -a --delay-updates \
        "${CACHE}/Updates/" "/Library/Updates/"
    fi

    xcode-select --install
  }
#+end_src

*** Install macOS Updates

#+begin_src sh
  function init_updater () {
    p "Install macOS updates"

    if [ -d "${CACHE}/Updates" ]; then
      sudo chown -R "${USER}" "/Library/Updates"
      rsync -a --delay-updates \
        "${CACHE}/Updates/" "/Library/Updates/"
    fi

    sudo softwareupdate --install --all
  }
#+end_src

*** Create Primary Account

#+begin_src sh
  function init_account () {
    p "Create primary user account"

    /bin/echo -n "Real name: " && read NAME
    /bin/echo -n "Account name: " && read U
    /bin/echo -n "Email address: " && read EMAIL

    sudo chgrp admin "/Library/User Pictures"
    sudo chmod g+w "/Library/User Pictures"
    curl "https://www.gravatar.com/avatar/$(md5 -qs $EMAIL).jpg?s=512" --silent \
      --compressed --location --output "/Library/User Pictures/${EMAIL}.jpg" \

    sudo defaults write \
      "/System/Library/User Template/Non_localized/Library/Preferences/.GlobalPreferences.plist" \
      "com.apple.swipescrolldirection" -bool false

    sudo sysadminctl -addUser "${U}" -fullName "${NAME}" -password - \
      -shell "/bin/zsh" -admin -picture "/Library/User Pictures/${EMAIL}.jpg"

    p "Press any key to log out."
    /usr/bin/read -n 1 -s

    osascript -e 'tell application "loginwindow" to «event aevtrlgo»'
  }
#+end_src

*** init

#+begin_src sh
  function init () {
    init_sudoers
    init_no_sleep
    init_hostname
    init_perms
    init_devtools
    init_updater
    init_account
  }
#+end_src

** Install

*** Homebrew and App Store Caches

#+begin_src sh
  function install_caches () {
    if [ -d "${CACHE}/Homebrew" ]; then
      p "Restore Homebrew caches from backup"

      rsync -a --delay-updates \
        "${CACHE}/Homebrew/" "${HOME}/Library/Caches/Homebrew/"
    fi

    if [ -d "${CACHE}/Updates" ]; then
      p "Restore App Store caches from backup"

      sudo chown -R "${USER}" "${MAS}"
      rsync -a --delay-updates \
        "${CACHE}/App Store/" "${MAS}/"
    fi
  }
#+end_src

*** Default Paths

#+begin_src sh
  function install_paths () {
    if ! grep -Fq "/usr/local/sbin" /etc/paths; then
      p "Add '/usr/local/sbin' to default \$PATH"

      sudo sed -i -e "/\/usr\/sbin/{x;s/$/\/usr\/local\/sbin/;G;}" /etc/paths
    fi
  }
#+end_src

*** [[https://brew.sh/][Homebrew]]

#+begin_src sh
  function install_brew () {
    p "Install Homebrew"

    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

    brew analytics off

    brew update
    brew doctor

    brew tap "homebrew/bundle"
#+end_src

*** [[https://github.com/Homebrew/homebrew-bundle][Brewfile]]

#+begin_src sh
  cat > /usr/local/Brewfile << EOF
  cask_args colorpickerdir: "/Library/ColorPickers",
    fontdir: "/Library/Fonts",
    input_methoddir: "/Library/Input Methods",
    prefpanedir: "/Library/PreferencePanes",
    qlplugindir: "/Library/QuickLook",
    screen_saverdir: "/Library/Screen Savers"

  tap "homebrew/bundle"
  tap "caskroom/cask"

  brew "mas"
  mas "autoping", id: 632347870

  cask "docker-toolbox"
  cask "java"
  cask "vmware-fusion"

  cask "xquartz"
  cask "inkscape"
  cask "wireshark"

  brew "aspell",
    args: ["lang=en"]
  brew "chromedriver"
  brew "coreutils"
  tap "homebrew/services"
  brew "dovecot",
    args: [
    "with-pam",
    "with-pigeonhole",
    "with-pigeonhole-unfinished-features"]
  brew "duti"
  brew "fdupes"
  brew "gawk"
  brew "getmail"
  brew "git"
  brew "gnu-sed",
    args: ["with-default-names"]
  brew "gnupg"
  brew "gpac"
  brew "hub"
  brew "ievms"
  brew "imagemagick"
  brew "mercurial"
  brew "mp4v2"
  brew "mtr"
  brew "nmap"
  brew "nvm"
  brew "openssl"
  brew "pinentry-mac"
  brew "pyenv"
  brew "rbenv"
  brew "rsync"
  brew "selenium-server-standalone"
  brew "sqlite"
  brew "stow"
  brew "terminal-notifier"
  brew "trash"
  brew "vim"
  brew "wget"
  brew "youtube-dl"
  brew "zsh"

  cask "adium"
  cask "airfoil"
  cask "alfred"
  cask "arduino"
  cask "atom"
  cask "autodmg"
  cask "bbedit"
  cask "caffeine"
  cask "carbon-copy-cloner"
  cask "charles"
  cask "dash"
  cask "dropbox"
  cask "duet"
  cask "exifrenamer"
  cask "firefox"
  cask "flux"
  cask "github-desktop"
  cask "gitup"
  cask "google-chrome"
  cask "handbrake"
  cask "hermes"
  cask "imageoptim"
  cask "integrity"
  cask "istat-menus"
  cask "jubler"
  cask "little-snitch"
  cask "machg"
  cask "makemkv"
  cask "menubar-countdown"
  cask "meteorologist"
  cask "moom"
  cask "mp4tools"
  cask "munki"
  cask "musicbrainz-picard"
  cask "namechanger"
  cask "nvalt"
  cask "nzbget"
  cask "nzbvortex"
  cask "openemu"
  cask "opera"
  cask "pacifist"
  cask "platypus"
  cask "plex-media-server"
  cask "quitter"
  cask "rescuetime"
  cask "scrivener"
  cask "sitesucker"
  cask "sizeup"
  cask "sketch"
  cask "sketchup"
  cask "skitch"
  cask "skype"
  cask "slack"
  cask "sonarr"
  cask "sonarr-menu"
  cask "sourcetree"
  cask "steermouse"
  cask "subler"
  cask "sublime-text"
  cask "the-unarchiver"
  cask "time-sink"
  cask "torbrowser"
  cask "tower"
  cask "transmit"
  cask "unrarx"
  cask "vimr"
  cask "vlc"
  cask "xld"

  tap "railwaycat/emacsmacport"
  cask "railwaycat/emacsmacport/emacs-mac-spacemacs-icon"

  tap "caskroom/fonts"
  cask "caskroom/fonts/font-inconsolata-lgc"

  tap "caskroom/versions"
  cask "caskroom/versions/safari-technology-preview"

  tap "ptb/custom"
  cask "ptb/custom/adobe-creative-cloud-2014"
  cask "ptb/custom/blankscreen"
  cask "ptb/custom/composer"
  cask "ptb/custom/enhanced-dictation"
  cask "ptb/custom/ipmenulet"
  cask "ptb/custom/pcalc-3"
  cask "ptb/custom/sketchup-pro"
  cask "ptb/custom/synergy"

  mas "1Password", id: 443987910
  mas "Coffitivity", id: 659901392
  mas "Growl", id: 467939042
  mas "HardwareGrowler", id: 475260933
  mas "I Love Stars", id: 402642760
  mas "Icon Slate", id: 439697913
  mas "Justnotes", id: 511230166
  mas "Keynote", id: 409183694
  mas "Numbers", id: 409203825
  mas "Pages", id: 409201541
  mas "WiFi Explorer", id: 494803304

  tap "homebrew/nginx"
  brew "homebrew/nginx/nginx-full",
    args: [
    "with-dav-ext-module",
    "with-fancyindex-module",
    "with-gzip-static",
    "with-http2",
    "with-mp4-h264-module",
    "with-passenger",
    "with-push-stream-module",
    "with-secure-link",
    "with-webdav" ]

  brew "ptb/custom/ffmpeg",
    args: [
    "with-chromaprint",
    "with-fdk-aac",
    "with-fontconfig",
    "with-freetype",
    "with-frei0r",
    "with-game-music-emu",
    "with-lame",
    "with-libass",
    "with-libbluray",
    "with-libbs2b",
    "with-libcaca",
    "with-libgsm",
    "with-libmodplug",
    "with-libsoxr",
    "with-libssh",
    "with-libvidstab",
    "with-libvorbis",
    "with-libvpx",
    "with-opencore-amr",
    "with-openh264",
    "with-openjpeg",
    "with-openssl",
    "with-opus",
    "with-pkg-config",
    "with-rtmpdump",
    "with-rubberband",
    "with-schroedinger",
    "with-sdl2",
    "with-snappy",
    "with-speex",
    "with-tesseract",
    "with-texi2html",
    "with-theora",
    "with-tools",
    "with-two-lame",
    "with-wavpack",
    "with-webp",
    "with-x264",
    "with-x265",
    "with-xvid",
    "with-xz",
    "with-yasm",
    "with-zeromq",
    "with-zimg" ]

  mas "Xcode", id: 497799835
  EOF
  }
#+end_src

*** macOS Software

#+begin_src sh
  function install_macos_sw () {
    p "Install macOS software with Homebrew"

    cd /usr/local/ && brew bundle && cd "${HOME}"

    if [ -d "/Applications/Xcode.app" ]; then
      sudo xcodebuild -license accept
    fi

    brew upgrade
  }
#+end_src

*** Link Utilities

#+begin_src sh
  function install_links () {
    p "Link System and Xcode utilities to Applications"

    brew linkapps 2> /dev/null
    cd /Applications \
      && for a in /System/Library/CoreServices/Applications/*; do
        ln -s "../..$a" . 2> /dev/null
      done && \
    cd "${HOME}"

    if [ -d "/Applications/Xcode.app" ]; then
      cd /Applications \
        && for b in /Applications/Xcode.app/Contents/Applications/*; do
          ln -s "../..$b" . 2> /dev/null
        done \
        && for c in /Applications/Xcode.app/Contents/Developer/Applications/*; do
          ln -s "../..$c" . 2> /dev/null
        done && \
      cd "${HOME}"
    fi
  }
#+end_src

*** Node Software

#+begin_src sh
  function install_node_sw () {
    p "Install Node software"

    printf "%s\n" \
      'export NVM_DIR="$(brew --prefix)/node"' \
      '[ -s "$(brew --prefix)/opt/nvm/nvm.sh" ] && . "$(brew --prefix)/opt/nvm/nvm.sh"' \
    >> "${HOME}/.zshrc"

    source "${HOME}/.zshrc"

    nvm install node
  }
#+end_src

*** Python Software

[[http://akbaribrahim.com/managing-multiple-python-versions-with-pyenv/][Managing Multiple Python Versions with pyenv]]

#+begin_src sh
  function install_python_sw () {
    p "Install Python software"

    printf "%s\n" \
      'export PYENV_ROOT="$(brew --prefix)/python"' \
      'if which pyenv > /dev/null; then eval "$(pyenv init -)"; fi' \
    >> "${HOME}/.zshrc"

    source "${HOME}/.zshrc"

    pyenv install --skip-existing 2.7.13
    pyenv install --skip-existing 3.6.2
    pyenv global 2.7.13

    pip install --upgrade "pip" "setuptools"
#+end_src

[[https://github.com/mdhiggins/sickbeard_mp4_automator][Automatic MP4 Conversion/Tagging]]

#+begin_src sh
  pip install --upgrade "babelfish" "guessit<2" "qtfaststart" "requests" "subliminal<2"
  pip install --upgrade "requests-cache" "requests[security]"

  mkdir -m go= -p "${HOME}/.config/NzbDrone"
  git clone "https://github.com/mdhiggins/sickbeard_mp4_automator.git" \
    "${HOME}/.config/NzbDrone/scripts" --depth 1
  cd "${HOME}/.config/NzbDrone/scripts" && pyenv local 2.7.13 && cd "${HOME}"
#+end_src

#+begin_src sh
  pip install --upgrade "crudini"
#+end_src

#+begin_src sh
  }
#+end_src

*** Ruby Software

#+begin_src sh
  function install_ruby_sw () {
    p "Install Ruby software"

    printf "%s\n" \
      'export RBENV_ROOT="$(brew --prefix)/ruby"' \
      'if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi' \
    >> "${HOME}/.zshrc"

    source "${HOME}/.zshrc"

    rbenv install --skip-existing 2.4.1
  }
#+end_src

*** install

#+begin_src sh
  function install () {
    install_caches
    install_paths
    install_brew
    install_macos_sw
    install_links
    install_node_sw
    install_python_sw
    install_ruby_sw

    which prefs
  }
#+end_src

** Preferences

*** Autoping

#+begin_src sh
  function prefs_autoping () {
    defaults write -app autoping Hostname -string "google.com"
    defaults write -app autoping LaunchAtLogin -bool true
    defaults write -app autoping ShowNotifications -bool true
    defaults write -app autoping ShowPacketLossText -bool true
  }
#+end_src

*** Finder

**** General

#+begin_src sh
  function prefs_finder () {
    p "Set Finder preferences"
#+end_src

*Show these items on the desktop: Hard disks:* =on=
#+begin_src sh
  defaults write com.apple.finder ShowHardDrivesOnDesktop -bool false
#+end_src

*Show these items on the desktop: External disks:* =on=
#+begin_src sh
  defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool false
#+end_src

*Show these items on the desktop: CDs, DVDs, and iPods:* =on=
#+begin_src sh
  defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool false
#+end_src

*Show these items on the desktop: Connected servers:* =on=
#+begin_src sh
  defaults write com.apple.finder ShowMountedServersOnDesktop -bool true
#+end_src

*New Finder windows show:* =${HOME}=
#+begin_src sh
  defaults write com.apple.finder NewWindowTarget -string "PfHm"
  defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}/"
#+end_src

**** Advanced

*Show all filename extensions:* =on=
#+begin_src sh
  defaults write -globalDomain AppleShowAllExtensions -bool true
#+end_src

*Show warning before changing an extension:* =off=
#+begin_src sh
  defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false
#+end_src

*Show warning before removing from iCloud Drive:* =on=
#+begin_src sh
  defaults write com.apple.finder FXEnableRemoveFromICloudDriveWarning -bool true
#+end_src

*Show warning before emptying the Trash:* =on=
#+begin_src sh
  defaults write com.apple.finder WarnOnEmptyTrash -bool false
#+end_src

**** View

*Show Path Bar*
#+begin_src sh
  defaults write com.apple.finder ShowPathbar -bool true
#+end_src

*Show Status Bar*
#+begin_src sh
  defaults write com.apple.finder ShowStatusBar -bool true
#+end_src

*Customize Toolbar…*
#+begin_src sh
  defaults write com.apple.finder "NSToolbar Configuration Browser" '{ "TB Item Identifiers" = ( "com.apple.finder.BACK", "com.apple.finder.PATH", "com.apple.finder.SWCH", "com.apple.finder.ARNG", "NSToolbarFlexibleSpaceItem", "com.apple.finder.SRCH", "com.apple.finder.ACTN" ); "TB Display Mode" = 2; }'
#+end_src

**** View Options

*Show Library Folder:* =on=
#+begin_src sh
  chflags nohidden "${HOME}/Library"
#+end_src

**** Window

*Copy*
#+begin_src sh
  defaults write com.apple.finder CopyProgressWindowLocation -string "{2160, 23}"
#+end_src

#+begin_src sh
  }
#+end_src

*** Moom

**** General

#+begin_src sh
  function prefs_moom () {
    p "Set Moom preferences"
#+end_src

*Treat drawers as part of their parent windows:* =on=
#+begin_src sh
  defaults write -app Moom "Allow For Drawers" -bool true
#+end_src

*Separate windows by* =2= *pt*
#+begin_src sh
  defaults write -app Moom "Grid Spacing" -bool true
  defaults write -app Moom "Grid Spacing: Gap" -int 2
  defaults write -app Moom "Grid Spacing: Apply To Edges" -bool false
#+end_src

*Show preferences on launch:* =off=
#+begin_src sh
  defaults write -app Moom "Stealth Mode" -bool true
#+end_src

*Run as* =faceless= *application*
#+begin_src sh
  defaults write -app Moom "Application Mode" -int 2
#+end_src

**** Mouse

=on= *Enable Move & Zoom grid with* =10= *×* =6= *cells*
#+begin_src sh
  defaults write -app Moom "Mouse Controls Grid" -bool true
  defaults write -app Moom "Mouse Controls Grid: Columns" -int 10
  defaults write -app Moom "Mouse Controls Grid: Rows" -int 6
#+end_src

=on= *Enable access to custom controls*
#+begin_src sh
  defaults write -app Moom "Mouse Controls Include Custom Controls" -bool true
#+end_src

=on= *Bring moomed windows to the front automatically*
#+begin_src sh
  defaults write -app Moom "Mouse Controls Auto-Activate Window" -bool true
#+end_src

=off= *Move & Zoom when dragging a window to a display edge or corner*
#+begin_src sh
  defaults write -app Moom "Snap" -bool false
#+end_src

**** Custom

#+begin_src sh
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0, 0.33333}, {0.5, 0.66666}}"; }'
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0, 0}, {0.3, 0.33333}}"; }'
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0.4, 0.33333}, {0.3, 0.66666}}"; }'
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0.3, 0}, {0.4, 0.33333}}"; }'
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0.7, 0.66666}, {0.3, 0.33333}}"; }'
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0.7, 0.33333}, {0.3, 0.33333}}"; }'
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0.7, 0}, {0.3, 0.33333}}"; }'
#+end_src

*Define window sizes using* =10= *×* =6= *cells*
#+begin_src sh
  defaults write -app Moom "Configuration Grid: Columns" -int 10
  defaults write -app Moom "Configuration Grid: Rows" -int 6
#+end_src

#+begin_src sh
  }
#+end_src

*** nvALT

**** General

#+begin_src sh
  function prefs_nvalt () {
    p "Set nvALT preferences"
#+end_src

*List Text Size:* =Small=
#+begin_src sh
  defaults write -app nvALT TableFontPointSize -int 11
#+end_src

*Bring-to-Front Hotkey:* =(None)=
#+begin_src sh
  defaults write -app nvALT AppActivationKeyCode -int -1
  defaults write -app nvALT AppActivationModifiers -int -1
#+end_src

*Auto-select notes by title when searching:* =on=
#+begin_src sh
  defaults write -app nvALT AutoCompleteSearches -bool true
#+end_src

*Confirm note deletion:* =on=
#+begin_src sh
  defaults write -app nvALT ConfirmNoteDeletion -bool true
#+end_src

*Quit when closing window:* =off=
#+begin_src sh
  defaults write -app nvALT QuitWhenClosingMainWindow -bool false
#+end_src

*Show menu bar icon:* =on=
#+begin_src sh
  defaults write -app nvALT StatusBarItem -bool true
#+end_src

*Hide Dock Icon*
#+begin_src sh
  defaults write -app nvALT ShowDockIcon -bool false
#+end_src

**** Editing

*Styled Text: Copy basic styles from other apps:* =off=
#+begin_src sh
  defaults write -app nvALT PastePreservesStyle -bool false
#+end_src

*Spelling: Check as you type:* =off=
#+begin_src sh
  defaults write -app nvALT CheckSpellingInNoteBody -bool false
#+end_src

*Tab Key:* =Indent lines=
#+begin_src sh
  defaults write -app nvALT TabKeyIndents -bool true
#+end_src

*Soft tabs (spaces):* =on=
#+begin_src sh
  defaults write -app nvALT UseSoftTabs -bool true
#+end_src

*Links: Make URLs clickable links:* =on=
#+begin_src sh
  defaults write -app nvALT MakeURLsClickable -bool true
#+end_src

*Links: Suggest titles for note-links:* =off=
#+begin_src sh
  defaults write -app nvALT AutoSuggestLinks -bool false
#+end_src

*URL Import: Convert imported URLs to Markdown:* =off=
#+begin_src sh
  defaults write -app nvALT UseMarkdownImport -bool false
#+end_src

*URL Import: Process with Readability:* =off=
#+begin_src sh
  defaults write -app nvALT UseReadability -bool false
#+end_src

*Direction: Right-To-Left (RTL):* =off=
#+begin_src sh
  defaults write -app nvALT rtl -bool false
#+end_src

*Auto-pair:* =on=
#+begin_src sh
  defaults write -app nvALT UseAutoPairing -bool true
#+end_src

*External editor:* =Emacs.app=
#+begin_src sh
  defaults write -app nvALT DefaultEEIdentifier -string "org.gnu.Emacs"
  defaults write -app nvALT UserEEIdentifiers -array "com.apple.TextEdit" "org.gnu.Emacs"
#+end_src

**** Fonts & Colors

*Body Font:* =InconsolataLGC 13=
#+begin_src sh
  defaults write -app nvALT NoteBodyFont -data 040b73747265616d747970656481e803840140848484064e53466f6e741e8484084e534f626a65637400858401692884055b3430635d060000001e000000fffe49006e0063006f006e0073006f006c006100740061004c004700430000008401660d8401630098019800980086
#+end_src

*Search Highlight:* =on=
#+begin_src sh
  defaults write -app nvALT HighlightSearchTerms -bool true
#+end_src

*Search Highlight:* =#CCFFCC=
#+begin_src sh
  defaults write -app nvALT SearchTermHighlightColor -data 040b73747265616d747970656481e803840140848484074e53436f6c6f72008484084e534f626a65637400858401630184046666666683cdcc4c3f0183cdcc4c3f0186
#+end_src

*Foreground Text:* =#CCCCCC=
#+begin_src sh
  defaults write -app nvALT ForegroundTextColor -data 040b73747265616d747970656481e803840140848484074e53436f6c6f72008484084e534f626a65637400858401630184046666666683cdcc4c3f83cdcc4c3f83cdcc4c3f0186
#+end_src

*Background:* =#1A1A1A=
#+begin_src sh
  defaults write -app nvALT BackgroundTextColor -data 040b73747265616d747970656481e803840140848484074e53436f6c6f72008484084e534f626a65637400858401630184046666666683d1d0d03d83d1d0d03d83d1d0d03d0186
#+end_src

*Always Show Grid Lines in Notes List:* =on=
#+begin_src sh
  defaults write -app nvALT ShowGrid -bool true
#+end_src

*Alternating Row Colors:* =on=
#+begin_src sh
  defaults write -app nvALT AlternatingRows -bool true
#+end_src

*Use nvALT Scrollbars:* =off=
#+begin_src sh
  defaults write -app nvALT UseETScrollbarsOnLion -bool false
#+end_src

*Keep Note Body Width Readable:* =on=
#+begin_src sh
  defaults write -app nvALT KeepsMaxTextWidth -bool true
#+end_src

*Max. Note Body Width:* =650= *pixels*
#+begin_src sh
  defaults write -app nvALT NoteBodyMaxWidth -int 650
#+end_src

**** View

*Switch to Vertical Layout*
#+begin_src sh
  defaults write -app nvALT HorizontalLayout -bool false
#+end_src

*Columns* > =Title= =Tags=
#+begin_src sh
  defaults write -app nvALT NoteAttributesVisible -array "Title" "Tags"
#+end_src

*Sort By* > =Date Modified=
#+begin_src sh
  defaults write -app nvALT TableIsReverseSorted -bool true
  defaults write -app nvALT TableSortColumn -string "Date Modified"
#+end_src

*Show Note Previews in Title*
#+begin_src sh
  defaults write -app nvALT TableColumnsHaveBodyPreview -bool true
#+end_src

#+begin_src sh
  }
#+end_src

*** Safari

**** General

#+begin_src sh
  function prefs_safari () {
    p "Set Safari preferences"
#+end_src

*Safari opens with:* =A new window=
#+begin_src sh
  defaults write -app Safari AlwaysRestoreSessionAtLaunch -bool false
  defaults write -app Safari OpenPrivateWindowWhenNotRestoringSessionAtLaunch -bool false
#+end_src

*New windows open with:* =Empty Page=
#+begin_src sh
  defaults write -app Safari NewWindowBehavior -int 1
#+end_src

*New tabs open with:* =Empty Page=
#+begin_src sh
  defaults write -app Safari NewTabBehavior -int 1
#+end_src

=off= *Open “safe” files after downloading*
#+begin_src sh
  defaults write -app Safari AutoOpenSafeDownloads -bool false
#+end_src

**** Tabs

*Open pages in tabs instead of windows:* =Always=
#+begin_src sh
  defaults write -app Safari TabCreationPolicy -int 2
#+end_src

**** AutoFill

=off= *Using info from my contacts*
#+begin_src sh
  defaults write -app Safari AutoFillFromAddressBook -bool false
#+end_src

=on= *User names and passwords*
#+begin_src sh
  defaults write -app Safari AutoFillPasswords -bool true
#+end_src

=off= *Credit cards*
#+begin_src sh
  defaults write -app Safari AutoFillCreditCardData -bool false
#+end_src

=off= *Other forms*
#+begin_src sh
  defaults write -app Safari AutoFillMiscellaneousForms -bool false
#+end_src

**** Search

=on= *Include search engine suggestions*
#+begin_src sh
  defaults write -app Safari SuppressSearchSuggestions -bool false
#+end_src

*Smart Search Field:* =off= *Include Safari Suggestions*
#+begin_src sh
  defaults write -app Safari UniversalSearchEnabled -bool false
#+end_src

*Smart Search Field:* =on= *Enable Quick Website Search*
#+begin_src sh
  defaults write -app Safari WebsiteSpecificSearchEnabled -bool true
#+end_src

*Smart Search Field:* =on= *Preload Top Hit in the background*
#+begin_src sh
  defaults write -app Safari PreloadTopHit -bool true
#+end_src

=off= *Show Favorites*
#+begin_src sh
  defaults write -app Safari ShowFavoritesUnderSmartSearchField -bool false
#+end_src

**** Privacy

*Website use of location services:* =Deny without prompting=
#+begin_src sh
  defaults write -app Safari SafariGeolocationPermissionPolicy -int 0
#+end_src

*Website tracking:* =on= *Ask websites not to track me*
#+begin_src sh
  defaults write -app Safari SendDoNotTrackHTTPHeader -bool true
#+end_src

*Apple Pay:* =on= *Allow websites to check if Apple Pay is set up*
#+begin_src sh
  defaults write -app Safari "com.apple.Safari.ContentPageGroupIdentifier.WebKit2ApplePayCapabilityDisclosureAllowed" -bool true
#+end_src

**** Notifications

=off= *Allow websites to ask for permission to send push notifications*
#+begin_src sh
  defaults write -app Safari CanPromptForPushNotifications -bool false
#+end_src

**** Advanced

*Smart Search Field:* =on= *Show full website address*
#+begin_src sh
  defaults write -app Safari ShowFullURLInSmartSearchField -bool true
#+end_src

*Default encoding:* =Unicode (UTF-8)=
#+begin_src sh
  defaults write -app Safari WebKitDefaultTextEncodingName -string "utf-8"
  defaults write -app Safari "com.apple.Safari.ContentPageGroupIdentifier.WebKit2DefaultTextEncodingName" -string "utf-8"
#+end_src

=on= *Show Develop menu in menu bar*
#+begin_src sh
  defaults write -app Safari IncludeDevelopMenu -bool true
  defaults write -app Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true
  defaults write -app Safari "com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled" -bool true
#+end_src

**** View

*Show Favorites Bar*
#+begin_src sh
  defaults write -app Safari "ShowFavoritesBar-v2" -bool true
#+end_src

*Show Tab Bar*
#+begin_src sh
  defaults write -app Safari AlwaysShowTabBar -bool true
#+end_src

*Show Status Bar*
#+begin_src sh
  defaults write -app Safari ShowStatusBar -bool true
  defaults write -app Safari ShowStatusBarInFullScreen -bool true
#+end_src

#+begin_src sh
  }
#+end_src

*** System

**** General

#+begin_src sh
  function prefs_general () {
    p "Set System preferences"
#+end_src

*Appearance:* =Graphite= *For Buttons, Menus, and Windows*
#+begin_src sh
  defaults write -globalDomain "AppleAquaColorVariant" -int 6
#+end_src

=on= *Use dark menu bar and Dock*
#+begin_src sh
  defaults write -globalDomain "AppleInterfaceStyle" -string "Dark"
#+end_src

=off= *Automatically hide and show the menu bar*
#+begin_src sh
  defaults write -globalDomain "_HIHideMenuBar" -bool false
#+end_src

*Highlight color:* =#99CC99= =Other…=
#+begin_src sh
  defaults write -globalDomain "AppleHighlightColor" -string "0.600000 0.800000 0.600000"
#+end_src

*Sidebar icon size:* =Small=
#+begin_src sh
  defaults write -globalDomain "NSTableViewDefaultSizeMode" -int 1
#+end_src

*Show scroll bars:* =Always=
#+begin_src sh
  defaults write -globalDomain "AppleShowScrollBars" -string "Always"
#+end_src

*Click in the scroll bar to:* =Jump to the next page=
#+begin_src sh
  defaults write -globalDomain "AppleScrollerPagingBehavior" -bool false
#+end_src

=on= *Ask to keep changes when closing documents*
#+begin_src sh
  defaults write -globalDomain "NSCloseAlwaysConfirmsChanges" -bool true
#+end_src

=on= *Close windows when quitting an app*
#+begin_src sh
  defaults write -globalDomain "NSQuitAlwaysKeepsWindows" -bool false
#+end_src

*Recent items:* =None= *Documents, Apps, and Servers*
#+begin_src sh
  osascript << EOF
    tell application "System Events"
      tell appearance preferences
        set recent documents limit to 0
        set recent applications limit to 0
        set recent servers limit to 0
      end tell
    end tell
  EOF
#+end_src

=on= *Allow Handoff between this Mac and your iCloud devices*
#+begin_src sh
  defaults -currentHost write com.apple.coreservices.useractivityd "ActivityAdvertisingAllowed" -bool true
  defaults -currentHost write com.apple.coreservices.useractivityd "ActivityReceivingAllowed" -bool true
#+end_src

=on= *Use LCD font smoothing when available*
#+begin_src sh
  defaults -currentHost delete -globalDomain "AppleFontSmoothing" 2> /dev/null
#+end_src

#+begin_src sh
  }
#+end_src

**** Desktop & Screen Saver: Screen Saver

#+begin_src sh
  function prefs_screensaver () {
#+end_src

*Start after:* =Never=
#+begin_src sh
  defaults -currentHost write com.apple.screensaver "idleTime" -int 0
#+end_src

*Hot Corners…: Top Left:* =⌘ Mission Control=
#+begin_src sh
  defaults write com.apple.dock "wvous-tl-corner" -int 2
  defaults write com.apple.dock "wvous-tl-modifier" -int 1048576
#+end_src

*Hot Corners…: Bottom Left:* =Put Display to Sleep=
#+begin_src sh
  defaults write com.apple.dock "wvous-bl-corner" -int 10
  defaults write com.apple.dock "wvous-bl-modifier" -int 0
#+end_src

#+begin_src sh
  }
#+end_src

**** Dock

#+begin_src sh
  function prefs_dock () {
#+end_src

*Size:* =32=
#+begin_src sh
  defaults write com.apple.dock "tilesize" -int 32
#+end_src

=off= *Magnification*
#+begin_src sh
  defaults write com.apple.dock "magnification" -bool false
  defaults write com.apple.dock "largesize" -int 64
#+end_src

*Position on screen:* =Right=
#+begin_src sh
  defaults write com.apple.dock "orientation" -string "right"
#+end_src

*Minimize windows using:* =Scale effect=
#+begin_src sh
  defaults write com.apple.dock "mineffect" -string "scale"
#+end_src

*Prefer tabs when opening documents:* =Always=
#+begin_src sh
  defaults write -globalDomain "AppleWindowTabbingMode" -string "always"
#+end_src

=off= *Double-click a window’s title bar to* =None=
#+begin_src sh
  defaults write -globalDomain "AppleActionOnDoubleClick" -string "None"
#+end_src

=on= *Minimize windows into application icon*
#+begin_src sh
  defaults write com.apple.dock "minimize-to-application" -bool true
#+end_src

=off= *Animate opening applications*
#+begin_src sh
  defaults write com.apple.dock "launchanim" -bool false
#+end_src

=on= *Automatically hide and show the Dock*
#+begin_src sh
  defaults write com.apple.dock "autohide" -bool true
#+end_src

=on= *Show indicators for open applications*
#+begin_src sh
  defaults write com.apple.dock "show-process-indicators" -bool true
#+end_src

#+begin_src sh
  }
#+end_src

**** Security & Privacy: General

#+begin_src sh
  function prefs_security () {
#+end_src

=on= *Require password* =5 seconds= *after sleep or screen saver begins*
#+begin_src sh
  defaults write com.apple.screensaver "askForPassword" -int 1
  defaults write com.apple.screensaver "askForPasswordDelay" -int 5
#+end_src

#+begin_src sh
  }
#+end_src

**** Energy Saver: Power

#+begin_src sh
  function prefs_power () {
#+end_src

*Turn display off after:* =20 min=
#+begin_src sh
  sudo pmset -c displaysleep 20
#+end_src

=on= *Prevent computer from sleeping automatically when the display is off*
#+begin_src sh
  sudo pmset -c sleep 0
#+end_src

=60 min= *Put hard disks to sleep when possible*
#+begin_src sh
  sudo pmset -c disksleep 60
#+end_src

=on= *Wake for network access*
#+begin_src sh
  sudo pmset -c womp 1
#+end_src

=on= *Start up automatically after a power failure*
#+begin_src sh
  sudo pmset -c autorestart 1
#+end_src

=on= *Enable Power Nap*
#+begin_src sh
  sudo pmset -c powernap 1
#+end_src

#+begin_src sh
  }
#+end_src

**** Energy Saver: UPS

#+begin_src sh
  function prefs_ups () {
#+end_src

*Turn display off after:* =2 min=
#+begin_src sh
  sudo pmset -u displaysleep 2
#+end_src

=on= *Slightly dim the display when using this power source*
#+begin_src sh
  sudo pmset -u lessbright 1
#+end_src

=on= *Shut down the computer after using the UPS battery for:* =5 min=
#+begin_src sh
  sudo pmset -u haltafter 5
#+end_src

=off= *Shut down the computer when the time remaining on the UPS battery is:*
#+begin_src sh
  sudo pmset -u haltremain -1
#+end_src

=off= *Shut down the computer when the UPS battery level is below:*
#+begin_src sh
  sudo pmset -u haltlevel -1
#+end_src

#+begin_src sh
  }
#+end_src

**** Keyboard: Text

#+begin_src sh
  function prefs_text () {
#+end_src

=off= *Capitalize words automatically*
#+begin_src sh
  defaults write -globalDomain NSAutomaticCapitalizationEnabled -bool false
#+end_src

=off= *Add period with double-space*
#+begin_src sh
  defaults write -globalDomain NSAutomaticPeriodSubstitutionEnabled -bool false
#+end_src

=off= *Use smart quotes and dashes*
#+begin_src sh
  defaults write -globalDomain NSAutomaticQuoteSubstitutionEnabled -bool false
#+end_src

#+begin_src sh
  }
#+end_src

**** Mouse

#+begin_src sh
  function prefs_mouse () {
#+end_src

=off= *Scroll direction: Natural*
#+begin_src sh
  defaults write -globalDomain com.apple.swipescrolldirection -bool false
#+end_src

#+begin_src sh
  }
#+end_src

**** Trackpad: Point & Click

#+begin_src sh
  function prefs_trackpad () {
#+end_src

=on= *Tap to click*
#+begin_src sh
  defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
  defaults -currentHost write -globalDomain com.apple.mouse.tapBehavior -int 1
#+end_src

#+begin_src sh
  }
#+end_src

**** Sound: Sound Effects

#+begin_src sh
  function prefs_sound () {
#+end_src

*Select an alert sound:* =Sosumi=
#+begin_src sh
  defaults write -globalDomain "com.apple.sound.beep.sound" -string "/System/Library/Sounds/Sosumi.aiff"
#+end_src

=off= *Play user interface sound effects*
#+begin_src sh
  defaults write -globalDomain "com.apple.sound.uiaudio.enabled" -int 0
#+end_src

=off= *Play feedback when volume is changed*
#+begin_src sh
  defaults write -globalDomain "com.apple.sound.beep.feedback" -int 0
#+end_src

#+begin_src sh
  }
#+end_src

**** Date & Time: Clock

=on= *Show date and time in menu bar*

=on= *Time options: Display the time with seconds*

=on= *Time options: Show AM/PM*

=on= *Date options: Show the day of the week*

=on= *Date options: Show date*
#+begin_src sh
  function prefs_clock () {
    defaults write com.apple.menuextra.clock "DateFormat" -string "EEE MMM d  h:mm:ss a"
  }
#+end_src

**** Accessibility: Display

=on= *Reduce transparency*
#+begin_src sh
  function prefs_accessibility () {
    defaults write com.apple.universalaccess "reduceTransparency" -bool true
  }
#+end_src

#+begin_src sh
  function prefs_restart () {
    killall -u "$(whoami)" cfprefsd
    osascript -e 'tell app "Finder" to quit'
    killall Finder
  }
#+end_src

*** VLC

#+begin_src sh
  function prefs_vlc () {
    p "Set VLC preferences"

    if [ ! -d "${HOME}/Library/Preferences/org.videolan.vlc" ]; then
      mkdir -m o-w -p "${HOME}/Library/Preferences/org.videolan.vlc"
    fi

    cat > "${HOME}/Library/Preferences/org.videolan.vlc/vlcrc" << EOF
  avcodec-hw=vda
  macosx-appleremote=0
  macosx-continue-playback=1
  macosx-nativefullscreenmode=1
  macosx-pause-minimized=1
  macosx-video-autoresize=0
  spdif=1
  sub-language=English
  subsdec-encoding=UTF-8
  volume-save=0
  EOF
  }
#+end_src

*** prefs

#+begin_src sh
  function prefs () {
    prefs_autoping
    prefs_finder
    prefs_moom
    prefs_nvalt
    prefs_safari

    prefs_general
    prefs_screensaver
    prefs_dock
    prefs_security
    prefs_power
    prefs_ups
    prefs_text
    prefs_mouse
    prefs_trackpad
    prefs_sound
    prefs_clock
    prefs_accessibility

    prefs_restart

    prefs_vlc

    which config
  }
#+end_src

** Configuration

*** App Store

#+begin_src sh
  function config_mas () {
    p "Save App Store packages"

    cat > "/usr/local/bin/mas_save.sh" << EOF
  #!/bin/sh
  DIR="\${HOME}/Downloads/App Store"
  MAS="\$(getconf DARWIN_USER_CACHE_DIR)com.apple.appstore"

  mkdir -m go= -p "\${DIR}"
  for a in \$(find "\${MAS}" -iname "[0-9]*" -type d); do
    b="\${DIR}/\$(basename \$a)"
    mkdir -m go= -p "\${b}"
    end=\$(( \$(date +%s) + 5 ))
    while [ \$(date +%s) -lt \$end ]; do
      for c in \${a}/*; do
        d="\$(basename \$c)"
        if [ ! -e "\${b}/\${d}" ]; then
          ln "\${a}/\${d}" "\${b}/\${d}"
        fi
      done
    done
  done
  EOF

    chmod a+x "/usr/local/bin/mas_save.sh"
    rehash
#+end_src

#+begin_src sh
  mkdir -m go= -p "${HOME}/Library/LaunchAgents"
  launchctl unload "${HOME}/Library/LaunchAgents/com.github.ptb.mas_save.plist" 2> /dev/null
  printf "%s\n" \
    "add ':KeepAlive' bool false" \
    "add ':Label' string 'com.github.ptb.mas_save'" \
    "add ':Program' string '/usr/local/bin/mas_save.sh'" \
    "add ':RunAtLoad' bool true" \
    "add ':WatchPaths' array" \
    "add ':WatchPaths:0' string '$(getconf DARWIN_USER_CACHE_DIR)com.apple.appstore'" \
  | while IFS=$'\t' read a; do
    /usr/libexec/PlistBuddy "${HOME}/Library/LaunchAgents/com.github.ptb.mas_save.plist" -c "${a}" &> /dev/null
  done
  launchctl load "${HOME}/Library/LaunchAgents/com.github.ptb.mas_save.plist"
#+end_src

#+begin_src sh
  }
#+end_src

*** Atom

Inspiration: [[https://evanhahn.com/atom-apm-install-list/][@EvanHahn]]

#+begin_src sh
  function config_atom () {
    p "Install Atom packages"

    for a in \
      "MagicPython" \
      "atom-beautify" \
      "atom-css-comb" \
      "atom-jade" \
      "atom-wallaby" \
      "autoclose-html" \
      "autocomplete-python" \
      "busy-signal" \
      "double-tag" \
      "editorconfig" \
      "ex-mode" \
      "file-icons" \
      "git-plus" \
      "git-time-machine" \
      "highlight-selected" \
      "intentions" \
      "language-docker" \
      "language-jade" \
      "language-javascript-jsx" \
      "language-lisp" \
      "language-slim" \
      "linter" \
      "linter-eslint" \
      "linter-rubocop" \
      "linter-ui-default" \
      "python-yapf" \
      "react" \
      "riot" \
      "sort-lines" \
      "term3" \
      "tomorrow-night-eighties-syntax" \
      "tree-view-open-files" \
      "vim-mode" \
      "vim-mode-zz" \
      "vim-surround" \
    ; do
      apm install "${a}"
    done

  cat > "${HOME}/.atom/packages/tomorrow-night-eighties-syntax/styles/colors.less" \
    << EOF
  @background: #191919;
  @current-line: #333333;
  @selection: #4c4c4c;
  @foreground: #cccccc;
  @comment: #999999;
  @red: #f27f7f;
  @orange: #ff994c;
  @yellow: #ffcc66;
  @green: #99cc99;
  @aqua: #66cccc;
  @blue: #6699cc;
  @purple: #cc99cc;
  EOF
  }
#+end_src

*** BBEdit

#+begin_src sh
  function config_bbedit () {
    if [ -d "/Applications/BBEdit.app" ]; then
      p "Install BBEdit tools"

      cd /usr/local/bin && \
      ln ../../../Applications/BBEdit.app/Contents/Helpers/bbdiff bbdiff && \
      ln ../../../Applications/BBEdit.app/Contents/Helpers/bbedit_tool bbedit && \
      ln ../../../Applications/BBEdit.app/Contents/Helpers/bbfind bbfind && \
      ln ../../../Applications/BBEdit.app/Contents/Helpers/bbresults bbresults && \
      cd "${HOME}"
    fi
  }
#+end_src

*** Desktop

#+begin_src sh
  function config_desktop () {
    p "Set Desktop preferences"
#+end_src

*Desktop: Solid Colors: Custom Color…* =Solid Black=
#+begin_src sh
  sudo rm "/Library/Caches/com.apple.desktop.admin.png"
  base64 -D > "/Library/Caches/com.apple.desktop.admin.png" <<< "iVBORw0KGgoAAAANSUhEUgAAAIAAAACAAQAAAADrRVxmAAAAGElEQVR4AWOgMxgFo2AUjIJRMApGwSgAAAiAAAH3bJXBAAAAAElFTkSuQmCC"

  osascript << EOF
    tell application "System Events"
      set a to POSIX file "/Library/Caches/com.apple.desktop.admin.png"
      set b to a reference to every desktop
      repeat with c in b
        set picture of c to a
      end repeat
    end tell
  EOF
#+end_src

*Screen Saver:* =BlankScreen=
#+begin_src sh
  if [ -e "/Library/Screen Savers/BlankScreen.saver" ]; then
    p "Set Screen Saver preferences"

    defaults -currentHost write com.apple.screensaver moduleDict \
      '{ moduleName = "BlankScreen"; path = "/Library/Screen Savers/BlankScreen.saver"; type = 0; }'
  fi
#+end_src

#+begin_src sh
  }
#+end_src

*** Dock

#+begin_src sh
  function config_dock () {
    p "Set Dock preferences"

    defaults write com.apple.dock "autohide-delay" -float 0
    defaults write com.apple.dock "autohide-time-modifier" -float 0.5

    defaults delete com.apple.dock "persistent-apps"

    for app in \
      "nvALT" \
      "Mail" \
      "Safari" \
      "Messages" \
      "Emacs" \
      "Atom" \
      "Utilities/Terminal" \
      "System Preferences" \
      "PCalc" \
      "iTunes" \
      "VLC" \
    ; do
      defaults write com.apple.dock "persistent-apps" -array-add \
        "<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/${app}.app/</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>"
    done

    defaults delete com.apple.dock "persistent-others"

    osascript -e 'tell app "Dock" to quit'
  }
#+end_src

*** Emacs

**** Download [[http://spacemacs.org/][Spacemacs]]

#+begin_src sh
function config_emacs () {
  p "Configure Emacs"

  mkdir -m go= -p "${HOME}/.emacs.d" \
    && curl --compressed --location --silent \
      "https://github.com/syl20bnr/spacemacs/archive/master.tar.gz" \
    | tar -C "${HOME}/.emacs.d" --strip-components 1 -xf -
  mkdir -m go= -p "${HOME}/.emacs.d/private/ptb"
#+end_src

**** Create =~/.spacemacs=

#+begin_src sh
  cat > "${HOME}/.spacemacs" << EOF
  (defun dotspacemacs/layers ()
    (setq-default
      dotspacemacs-configuration-layers '(
        auto-completion
        (colors :variables
          colors-colorize-identifiers 'variables)
        dash
        deft
        docker
        emacs-lisp
        evil-cleverparens
        git
        github
        helm
        html
        ibuffer
        imenu-list
        javascript
        markdown
        nginx
        (org :variables
          org-enable-github-support t)
        (osx :variables
          osx-use-option-as-meta nil)
        ptb
        react
        ruby
        ruby-on-rails
        search-engine
        semantic
        shell-scripts
        (spell-checking :variables
          spell-checking-enable-by-default nil)
        syntax-checking
        (version-control :variables
          version-control-diff-side 'left)
        vim-empty-lines
      )
      dotspacemacs-excluded-packages '(org-bullets)
    )
  )

  (defun dotspacemacs/init ()
    (setq-default
      dotspacemacs-startup-banner nil
      dotspacemacs-startup-lists nil
      dotspacemacs-scratch-mode 'org-mode
      dotspacemacs-themes '(sanityinc-tomorrow-eighties)
      dotspacemacs-default-font '(
        "Inconsolata LGC"
        :size 13
        :weight normal
        :width normal
        :powerline-scale 1.1)
      dotspacemacs-loading-progress-bar nil
      dotspacemacs-active-transparency 100
      dotspacemacs-inactive-transparency 100
      dotspacemacs-line-numbers t
      dotspacemacs-whitespace-cleanup 'all
    )
  )

  (defun dotspacemacs/user-init ())
  (defun dotspacemacs/user-config ())
  EOF
#+end_src

**** Create =~/.emacs.d/private/ptb/config.el=

#+begin_src sh
  cat > "${HOME}/.emacs.d/private/ptb/config.el" << EOF
  (setq
    default-frame-alist '(
      (top . 22)
      (left . 1790)
      (height . 40)
      (width . 91)
      (vertical-scroll-bars . right))
    initial-frame-alist (copy-alist default-frame-alist)

    deft-directory "~/Dropbox/Notes"
    focus-follows-mouse t
    mouse-wheel-follow-mouse t
    mouse-wheel-scroll-amount '(1 ((shift) . 1))
    purpose-display-at-right 20
    recentf-max-saved-items 5
    scroll-step 1
    system-uses-terminfo nil

    ibuffer-formats '(
      (mark modified read-only " "
      (name 18 18 :left :elide)))

    ibuffer-shrink-to-minimum-size t
    ibuffer-always-show-last-buffer nil
    ibuffer-sorting-mode 'recency
    ibuffer-use-header-line nil
    x-select-enable-clipboard nil)

  (global-linum-mode t)
  (recentf-mode t)
  (x-focus-frame nil)
  (with-eval-after-load 'org
    (org-babel-do-load-languages
      'org-babel-load-languages '(
        (ruby . t)
        (shell . t)
      )
    )
  )
  EOF
#+end_src

**** Create =~/.emacs.d/private/ptb/funcs.el=

#+begin_src sh
  cat > "${HOME}/.emacs.d/private/ptb/funcs.el" << EOF
  (defun is-useless-buffer (buffer)
    (let ((name (buffer-name buffer)))
      (and (= ?* (aref name 0))
          (string-match "^\\**" name))))

  (defun kill-useless-buffers ()
    (interactive)
    (loop for buffer being the buffers
          do (and (is-useless-buffer buffer) (kill-buffer buffer))))

  (defun org-babel-tangle-hook ()
    (add-hook 'after-save-hook 'org-babel-tangle))

  (add-hook 'org-mode-hook #'org-babel-tangle-hook)

  (defun ptb/new-untitled-buffer ()
    "Create a new untitled buffer in the current frame."
    (interactive)
    (let
      ((buffer "Untitled-") (count 1))
      (while
        (get-buffer (concat buffer (number-to-string count)))
        (setq count (1+ count)))
      (switch-to-buffer
      (concat buffer (number-to-string count))))
    (org-mode))

  (defun ptb/previous-buffer ()
    (interactive)
    (kill-useless-buffers)
    (previous-buffer))

  (defun ptb/next-buffer ()
    (interactive)
    (kill-useless-buffers)
    (next-buffer))

  (defun ptb/kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer))
    (kill-useless-buffers))
  EOF
#+end_src

**** Create =~/.emacs.d/private/ptb/keybindings.el=

#+begin_src sh
  cat > "${HOME}/.emacs.d/private/ptb/keybindings.el" << EOF
  (define-key evil-normal-state-map (kbd "s-c") 'clipboard-kill-ring-save)
  (define-key evil-insert-state-map (kbd "s-c") 'clipboard-kill-ring-save)
  (define-key evil-visual-state-map (kbd "s-c") 'clipboard-kill-ring-save)

  (define-key evil-ex-completion-map (kbd "s-v") 'clipboard-yank)
  (define-key evil-ex-search-keymap (kbd "s-v") 'clipboard-yank)
  (define-key evil-insert-state-map (kbd "s-v") 'clipboard-yank)

  (define-key evil-normal-state-map (kbd "s-x") 'clipboard-kill-region)
  (define-key evil-insert-state-map (kbd "s-x") 'clipboard-kill-region)
  (define-key evil-visual-state-map (kbd "s-x") 'clipboard-kill-region)

  (define-key evil-normal-state-map (kbd "<S-up>") 'evil-previous-visual-line)
  (define-key evil-insert-state-map (kbd "<S-up>") 'evil-previous-visual-line)
  (define-key evil-visual-state-map (kbd "<S-up>") 'evil-previous-visual-line)

  (define-key evil-normal-state-map (kbd "<S-down>") 'evil-next-visual-line)
  (define-key evil-insert-state-map (kbd "<S-down>") 'evil-next-visual-line)
  (define-key evil-visual-state-map (kbd "<S-down>") 'evil-next-visual-line)

  (global-set-key (kbd "C-l") 'evil-search-highlight-persist-remove-all)

  (global-set-key (kbd "s-t") 'make-frame)
  (global-set-key (kbd "s-n") 'ptb/new-untitled-buffer)
  (global-set-key (kbd "s-w") 'ptb/kill-this-buffer)
  (global-set-key (kbd "s-{") 'ptb/previous-buffer)
  (global-set-key (kbd "s-}") 'ptb/next-buffer)
  EOF
#+end_src

**** Create =~/.emacs.d/private/ptb/packages.el=

#+begin_src sh
  cat > "${HOME}/.emacs.d/private/ptb/packages.el" << EOF
  (setq ptb-packages '(auto-indent-mode inline-crypt))

  (defun ptb/init-auto-indent-mode ()
    (use-package auto-indent-mode
      :init
      (setq
        auto-indent-delete-backward-char t
        auto-indent-fix-org-auto-fill t
        auto-indent-fix-org-move-beginning-of-line t
        auto-indent-fix-org-return t
        auto-indent-fix-org-yank t
        auto-indent-start-org-indent t
      )
    )
  )

  (defun ptb/init-inline-crypt ()
    (use-package inline-crypt :init))
  EOF
#+end_src

#+begin_src sh
  }
#+end_src

**** Create =/usr/local/bin/vi=

#+begin_src sh
  function config_vi_script () {
    p "Create vi script"

    cat > /usr/local/bin/vi <<-EOF
  #!/bin/sh

  if [ -e "/Applications/Emacs.app" ]; then
    t=()

    if [ \${#@} -ne 0 ]; then
      while IFS= read -r file; do
        [ ! -f "\$file" ] && t+=("\$file") && /usr/bin/touch "\$file"
        file=\$(echo \$(cd \$(dirname "\$file") && pwd -P)/\$(basename "\$file"))
        \$(/usr/bin/osascript <<-END
          if application "Emacs.app" is running then
            tell application id (id of application "Emacs.app") to open POSIX file "\$file"
          else
            tell application ((path to applications folder as text) & "Emacs.app")
              activate
              open POSIX file "\$file"
            end tell
          end if
  END
          ) &  # Note: END on the previous line may be indented with tabs but not spaces
        done <<<"\$(printf '%s\n' "\$@")"
      fi

      if [ ! -z "\$t" ]; then
        \$(/bin/sleep 10; for file in "\${t[@]}"; do
          [ ! -s "\$file" ] && /bin/rm "\$file";
        done) &
      fi
    else
      vim -No "\$@"
    fi
  EOF

    chmod a+x /usr/local/bin/vi
    rehash
  }
#+end_src

*** Terminal
:properties:
:header-args+: :padline no
:end:

Inspiration: [[https://github.com/ChrisKempson/Tomorrow-Theme#tomorrow-night-eighties][@chriskempson]], [[https://apple.stackexchange.com/a/98843][@user495470]], & [[https://github.com/reitermarkus/dotfiles/blob/master/include/settings/terminal.sh][@reitermarkus]]

**** General

#+begin_src sh
  function config_terminal () {
    p "Set Terminal preferences"
#+end_src

*On startup, open: New window with profile:* =ptb=
#+begin_src sh
  defaults write -app Terminal "Startup Window Settings" -string "$(whoami)"
#+end_src

**** Profiles

#+begin_src sh
  defaults write -app Terminal "Default Window Settings" -string "$(whoami)"

  /usr/libexec/PlistBuddy -c "delete ':Window Settings:$(whoami)'" \
    "${HOME}/Library/Preferences/com.apple.Terminal.plist" &> /dev/null

  for terminal_prop in \
#+end_src

#+begin_src sh
  " dict" \
  ":name string '$(whoami)'" \
  ":type string 'Window Settings'" \
  ":ProfileCurrentVersion real 2.05" \
#+end_src

**** Text

#+begin_src sh
  ':BackgroundColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC4xIDAuMSAwLjE=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ":BackgroundBlur real 0" \
  ":BackgroundSettingsForInactiveWindows bool false" \
  ":BackgroundAlphaInactive real 1" \
  ":BackgroundBlurInactive real 0" \
  ':Font data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>3</integer></dict><key>NSName</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSSize</key><real>13</real><key>NSfFlags</key><integer>16</integer></dict><string>InconsolataLGC</string><dict><key>$classes</key><array><string>NSFont</string><string>NSObject</string></array><key>$classname</key><string>NSFont</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ":FontWidthSpacing real 1" \
  ":FontHeightSpacing real 1" \
  ":FontAntialias bool true" \
  ":UseBoldFonts bool true" \
  ":BlinkText bool false" \
  ":DisableANSIColor bool false" \
  ":UseBrightBold bool false" \
  ':TextColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDAuOCAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':TextBoldColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDAuOCAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':SelectionColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC4zIDAuMyAwLjM=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBlackColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC4zIDAuMyAwLjM=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIRedColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC45NSAwLjUgMC41</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIGreenColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC42IDAuOCAwLjY=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIYellowColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MSAwLjggMC40</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBlueColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC40IDAuNiAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIMagentaColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDAuNiAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSICyanColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC40IDAuOCAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIWhiteColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDAuOCAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightBlackColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC41IDAuNSAwLjU=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightRedColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MSAwLjcgMC43</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightGreenColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDEgMC44</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightYellowColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MSAxIDAuNg==</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightBlueColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC42IDAuOCAx</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightMagentaColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MSAwLjggMQ==</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightCyanColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC42IDEgMQ==</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightWhiteColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC45IDAuOSAwLjk=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ":CursorType integer 0" \
  ":CursorBlink bool false" \
  ':CursorColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC43IDAuNyAwLjc=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
#+end_src

**** Window

#+begin_src sh
  ":ShowRepresentedURLInTitle bool true" \
  ":ShowRepresentedURLPathInTitle bool true" \
  ":ShowActiveProcessInTitle bool true" \
  ":ShowActiveProcessArgumentsInTitle bool false" \
  ":ShowShellCommandInTitle bool false" \
  ":ShowWindowSettingsNameInTitle bool false" \
  ":ShowTTYNameInTitle bool false" \
  ":ShowDimensionsInTitle bool false" \
  ":ShowCommandKeyInTitle bool false" \
  ":columnCount integer 124" \
  ":rowCount integer 20" \
  ":ShouldLimitScrollback integer 0" \
  ":ScrollbackLines integer 0" \
  ":ShouldRestoreContent bool false" \
#+end_src

**** Tab

#+begin_src sh
  ":ShowRepresentedURLInTabTitle bool false" \
  ":ShowRepresentedURLPathInTabTitle bool false" \
  ":ShowActiveProcessInTabTitle bool true" \
  ":ShowActiveProcessArgumentsInTabTitle bool false" \
  ":ShowTTYNameInTabTitle bool false" \
  ":ShowComponentsWhenTabHasCustomTitle bool true" \
  ":ShowActivityIndicatorInTab bool true" \
#+end_src

**** Shell

#+begin_src sh
  ":shellExitAction integer 1" \
  ":warnOnShellCloseAction integer 1" \
#+end_src

**** Keyboard

#+begin_src sh
  ":useOptionAsMetaKey bool false" \
  ":ScrollAlternateScreen bool true" \
#+end_src

**** Advanced

#+begin_src sh
  ":TerminalType string 'xterm-256color'" \
  ":deleteSendsBackspace bool false" \
  ":EscapeNonASCIICharacters bool true" \
  ":ConvertNewlinesOnPaste bool true" \
  ":StrictVTKeypad bool true" \
  ":scrollOnInput bool true" \
  ":Bell bool false" \
  ":VisualBell bool false" \
  ":VisualBellOnlyWhenMuted bool false" \
  ":BellBadge bool false" \
  ":BellBounce bool false" \
  ":BellBounceCritical bool false" \
  ":CharacterEncoding integer 4" \
  ":SetLanguageEnvironmentVariables bool true" \
  ":EastAsianAmbiguousWide bool false" \
#+end_src

#+begin_src sh
  ; do
    /usr/libexec/PlistBuddy "$HOME/Library/Preferences/com.apple.Terminal.plist" \
      -c "add ':Window Settings:$(whoami)'${terminal_prop}"
  done
#+end_src

#+begin_src sh
  }
#+end_src

*** dovecot

#+begin_example sh :tangle no
  doveadm sync -u $(whoami) maildir:~/.email:INBOX=~/.email/Inbox:LAYOUT=fs
#+end_example

#+begin_src sh
  function config_dovecot () {
    p "Enable email authentication with macOS accounts"

    sudo tee "/etc/pam.d/dovecot" > /dev/null << EOF
  auth		required	pam_opendirectory.so try_first_pass
  account		required	pam_nologin.so
  account		required	pam_opendirectory.so
  password	required	pam_opendirectory.so
  EOF

    p "Configure Dovecot email server"

    cat > "/usr/local/etc/dovecot/dovecot.conf" << EOF
  auth_mechanisms = cram-md5
  default_internal_user = _dovecot
  default_login_user = _dovenull
  log_path = /dev/stderr
  mail_location = maildir:~/.mail:INBOX=~/.mail/Inbox:LAYOUT=fs
  mail_plugins = zlib
  maildir_copy_with_hardlinks = no
  namespace {
    inbox = yes
    mailbox Drafts {
      auto = subscribe
      special_use = \Drafts
    }
    mailbox Junk {
      auto = subscribe
      special_use = \Junk
    }
    mailbox Sent {
      auto = subscribe
      special_use = \Sent
    }
    mailbox "Sent Messages" {
      special_use = \Sent
    }
    mailbox Trash {
      auto = subscribe
      special_use = \Trash
    }
    separator = .
    type = private
  }
  passdb {
    args = scheme=cram-md5 /usr/local/etc/dovecot/cram-md5.pwd
    driver = passwd-file

    # driver = pam

    # args = nopassword=y
    # driver = static
  }
  plugin {
    sieve = file:/Users/%u/.sieve
    zlib_save = bz2
    zlib_save_level = 9
  }
  postmaster_address = ${USER}@${DOMAIN}
  protocols = imap
  service imap-login {
    inet_listener imap {
      port = 0
    }
  }
  ssl = required
  ssl_cert = <${SSL}/certs/${MAIL}/${MAIL}.crt
  ssl_cipher_list = AES128+EECDH:AES128+EDH
  ssl_dh_parameters_length = 4096
  ssl_key = <${SSL}/certs/${MAIL}/${MAIL}.key
  ssl_prefer_server_ciphers = yes
  ssl_protocols = !SSLv2 !SSLv3
  userdb {
    driver = passwd
  }
  protocol lda {
    mail_plugins = sieve
  }

  # auth_debug = yes
  # auth_debug_passwords = yes
  # auth_verbose = yes
  # auth_verbose_passwords = plain
  # mail_debug = yes
  # verbose_ssl = yes
  EOF

    if [ ! -f "/usr/local/etc/dovecot/cram-md5.pwd" ]; then
      p "Create email account for '${USER}' with 'CRAM-MD5' authentication: "
      doveadm pw | sed -e "s/^/${USER}:/" > "/usr/local/etc/dovecot/cram-md5.pwd"
      sudo chown _dovecot "/usr/local/etc/dovecot/cram-md5.pwd"
      sudo chmod go= "/usr/local/etc/dovecot/cram-md5.pwd"
    fi

    if ! /usr/bin/grep -Fq ${MAIL} "/etc/hosts"; then
      printf "127.0.0.1\t${MAIL}\n" | sudo tee -a /etc/hosts > /dev/null
    fi

    sudo brew services start dovecot
  }
#+end_src

*** getmail

#+begin_src sh
  function config_getmail () {
    p "Configure getmail"

    mkdir -m go= -p "${HOME}/.getmail" "${HOME}/Library/LaunchAgents"

    printf "%s\n" \
      "add ':KeepAlive' bool false" \
      "add ':Label' string 'ca.pyropus.getmail'" \
      "add ':ProgramArguments' array" \
      "add ':ProgramArguments:0' string '/usr/local/bin/getmail'" \
      "add ':RunAtLoad' bool true" \
      "add ':StandardOutPath' string '${HOME}/.getmail/getmail.log'" \
      "add ':StandardErrorPath' string '${HOME}/.getmail/getmail.err'" \
      "add ':StartInterval' integer 300" \
    | while read a; do
      /usr/libexec/PlistBuddy "${HOME}/Library/LaunchAgents/ca.pyropus.getmail.plist" -c "${a}" &> /dev/null
    done

    for email in \
      "pbosse@gmail.com" \
      "ptb@ioutime.com" \
    ; do
      p "Add password for '${email}' to Keychain"

      security add-internet-password -a "${email}" -s "imap.gmail.com" -r "imap" \
        -l "${email}" -D "getmail password" -P 993 -w

      cat > "${HOME}/.getmail/${email}" << EOF
  [retriever]
  type = SimpleIMAPSSLRetriever
  server = imap.gmail.com
  port = 993
  username = ${email}
  mailboxes = ("[Gmail]/All Mail",)

  [destination]
  type = MDA_external
  path = /usr/local/Cellar/dovecot/2.2.31/libexec/dovecot/dovecot-lda
  arguments = ("-c","/usr/local/etc/dovecot/dovecot.conf","-d","$(whoami)",)
  ignore_stderr = true

  [options]
  # delete = true
  delete_after = 30
  delivered_to = false
  read_all = false
  received = false
  verbose = 1
  EOF

    defaults write "${HOME}/Library/LaunchAgents/ca.pyropus.getmail" \
      ProgramArguments -array-add "--rcfile"
    defaults write "${HOME}/Library/LaunchAgents/ca.pyropus.getmail" \
      ProgramArguments -array-add "${email}"
    done

    plutil -convert xml1 "${HOME}/Library/LaunchAgents/ca.pyropus.getmail.plist"
    launchctl load "${HOME}/Library/LaunchAgents/ca.pyropus.getmail.plist"

    # http://shadow-file.blogspot.com/2012/06/parsing-email-and-fixing-timestamps-in.html
    curl -L https://pastebin.com/raw/ZBq7euid | tr -d '\015' > /usr/local/bin/timestamp.py
    chmod +x /usr/local/bin/timestamp.py
  }
#+end_src

for file in $(ls -1); do ~/bin/timestamp.py $file; done

find "${HOME}/.mail" -type f -name "[0123456789]*" -exec /usr/local/bin/timestamp.py '{}' ';'

*** git

#+begin_src sh
  function config_git () {
    p "Configure git"

    KEY="$(gpg -K --with-colons | awk -F: '/^sec/ { a=$5 } END { print a }')"

    git config --global user.name "Peter T Bosse II"
    git config --global user.email "ptb@ioutime.com"

    git config --global alias.cm "commit --allow-empty-message --message="
    git config --global alias.co "checkout"
    git config --global alias.st "status"

    git config --global push.default "simple"

    if [ ! -z ${KEY} ]; then
      git config --global user.signingkey "${KEY}"
      git config --global gpg.program "$(which gpg)"
      git config --global commit.gpgsign "true"
      git config --global tag.gpgsign "true"
      git config --global log.showSignature "true"
    fi
  }
#+end_src

*** gnupg

#+begin_src sh
  function config_gpg () {
    p "Create GPG keys"

    mkdir -m go= -p "${HOME}/.gnupg"

    echo "keyid-format long" \
      > "${HOME}/.gnupg/gpg.conf"
    echo "pinentry-program $(which pinentry-mac)" \
      > "${HOME}/.gnupg/gpg-agent.conf"

    gpg --faked-system-time '20170701T120000!' \
      --quick-generate-key "Peter T Bosse II <ptb@ioutime.com>" \
      future-default default never
  }
#+end_src

#+begin_src sh
  function config_gpg_help () {
    KEY="$(gpg -K --with-colons | awk -F: '/^sec/ { a=$5 } END { print a }')"
    gpg --armor --export "${KEY}" | pbcopy
    open "https://github.com/settings/keys"
  }
#+end_src

*** openssl

#+begin_src sh
  function config_openssl () {
    p "Create OpenSSL certificates"

    SSL="/usr/local/etc/openssl"
    DOMAIN="ptb2.me"
    MAIL="mail.${DOMAIN}"
    FAKE="0701080017"
    DAYS=3652
#+end_src

#+begin_src sh
  mkdir -p "${SSL}/certs/${DOMAIN}"
  cat > "${SSL}/certs/${DOMAIN}/${DOMAIN}.cnf" << EOF
  [ req ]
  default_bits = 4096
  default_keyfile = ${SSL}/certs/${DOMAIN}/${DOMAIN}.key
  default_md = sha256
  distinguished_name = dn
  encrypt_key = no
  prompt = no
  utf8 = yes
  x509_extensions = v3_ca

  [ dn ]
  CN = ${DOMAIN}

  [ v3_ca ]
  subjectKeyIdentifier = hash
  authorityKeyIdentifier = keyid:always,issuer
  basicConstraints = CA:true
  EOF
#+end_src

#+begin_src sh
  openssl genrsa -out "${SSL}/certs/${DOMAIN}/${DOMAIN}.key" 4096

  p "Set fake '${DOMAIN}' certificate creation date"
  sudo date "${FAKE}" && \
  openssl req -days ${DAYS} -new -x509 \
    -config "${SSL}/certs/${DOMAIN}/${DOMAIN}.cnf" \
    -key "${SSL}/certs/${DOMAIN}/${DOMAIN}.key" \
    -out "${SSL}/certs/${DOMAIN}/${DOMAIN}.crt" && \
  sudo ntpdate -u time.apple.com

  p "Password for adding certificate to Keychain Access"
  openssl pkcs12 -aes256 -clcerts -export \
    -in "${SSL}/certs/${DOMAIN}/${DOMAIN}.crt" \
    -inkey "${SSL}/certs/${DOMAIN}/${DOMAIN}.key" \
    -out "${SSL}/certs/${DOMAIN}/${DOMAIN}.p12"

  open -g "${SSL}/certs/${DOMAIN}/${DOMAIN}.p12"
#+end_src

#+begin_src sh
  mkdir -p "${SSL}/certs/${MAIL}"
  cat > "${SSL}/certs/${MAIL}/${MAIL}.cnf" << EOF
  [ req ]
  default_bits = 4096
  default_keyfile = ${SSL}/certs/${DOMAIN}/${DOMAIN}.key
  default_md = sha256
  distinguished_name = dn
  encrypt_key = no
  prompt = no
  utf8 = yes
  x509_extensions = v3_ca

  [ dn ]
  CN = ${MAIL}

  [ v3_ca ]
  subjectKeyIdentifier = hash
  authorityKeyIdentifier = keyid:always,issuer
  basicConstraints = CA:true
  EOF
#+end_src

#+begin_src sh
  openssl genrsa -out "${SSL}/certs/${MAIL}/${MAIL}.key" 4096

  openssl req -new \
    -config "${SSL}/certs/${MAIL}/${MAIL}.cnf" \
    -key "${SSL}/certs/${MAIL}/${MAIL}.key" \
    -out "${SSL}/certs/${MAIL}/${MAIL}.csr"

  p "Set fake '${MAIL}' certificate creation date"
  sudo date "${FAKE}" && \
  openssl x509 -days ${DAYS} -req -set_serial 01 -sha256 \
    -CA "${SSL}/certs/${DOMAIN}/${DOMAIN}.crt" \
    -CAkey "${SSL}/certs/${DOMAIN}/${DOMAIN}.key" \
    -in "${SSL}/certs/${MAIL}/${MAIL}.csr" \
    -out "${SSL}/certs/${MAIL}/${MAIL}.crt" && \
  sudo ntpdate -u time.apple.com
}
#+end_src

*** shell

#+begin_src sh
function config_shell () {
  if [ -x "/usr/local/bin/zsh" ]; then
    # Current User > Advanced Options… > Login shell: /usr/local/bin/zsh
    p "Set '/usr/local/bin/zsh' as the default shell"

    sudo sh -c "printf '%s\n' '/usr/local/bin/zsh' >> /etc/shells" && \
    sudo chsh -s /usr/local/bin/zsh && \
    sudo mkdir -m go= -p /private/var/root/Library/Caches/ && \
    sudo touch "/private/var/root/.zshrc"
    chsh -s /usr/local/bin/zsh
    touch "${HOME}/.zshrc"
  fi
}
#+end_src

*** sieve

#+begin_src sh
  function config_sieve () {
    p "Configure sieve"

    cat > "${HOME}/.sieve" << EOF
  require ["date", "fileinto", "imap4flags", "mailbox", "relational", "variables"];

  setflag "\\Seen";

  if date :is "date" "year" "1995" { fileinto :create "Archives.1995"; }
  if date :is "date" "year" "1996" { fileinto :create "Archives.1996"; }
  if date :is "date" "year" "1997" { fileinto :create "Archives.1997"; }
  if date :is "date" "year" "1998" { fileinto :create "Archives.1998"; }
  if date :is "date" "year" "1999" { fileinto :create "Archives.1999"; }
  if date :is "date" "year" "2000" { fileinto :create "Archives.2000"; }
  if date :is "date" "year" "2001" { fileinto :create "Archives.2001"; }
  if date :is "date" "year" "2002" { fileinto :create "Archives.2002"; }
  if date :is "date" "year" "2003" { fileinto :create "Archives.2003"; }
  if date :is "date" "year" "2004" { fileinto :create "Archives.2004"; }
  if date :is "date" "year" "2005" { fileinto :create "Archives.2005"; }
  if date :is "date" "year" "2006" { fileinto :create "Archives.2006"; }
  if date :is "date" "year" "2007" { fileinto :create "Archives.2007"; }
  if date :is "date" "year" "2008" { fileinto :create "Archives.2008"; }
  if date :is "date" "year" "2009" { fileinto :create "Archives.2009"; }
  if date :is "date" "year" "2010" { fileinto :create "Archives.2010"; }
  if date :is "date" "year" "2011" { fileinto :create "Archives.2011"; }
  if date :is "date" "year" "2012" { fileinto :create "Archives.2012"; }
  if date :is "date" "year" "2013" { fileinto :create "Archives.2013"; }
  if date :is "date" "year" "2014" { fileinto :create "Archives.2014"; }
  if date :is "date" "year" "2015" { fileinto :create "Archives.2015"; }
  if date :is "date" "year" "2016" { fileinto :create "Archives.2016"; }
  if date :is "date" "year" "2017" { fileinto :create "Archives.2017"; }
  if date :is "date" "year" "2018" { fileinto :create "Archives.2018"; }
  if date :is "date" "year" "2019" { fileinto :create "Archives.2019"; }
  if date :is "date" "year" "2020" { fileinto :create "Archives.2020"; }
  EOF
  }
#+end_src

*** ssh

#+begin_src sh
  function config_ssh () {
    p "Create ssh keys"

    mkdir -m go= -p "${HOME}/.ssh"

    ssh-keygen -t ed25519 -a 100 -C "ptb@ioutime.com"

    cat > "${HOME}/.ssh/config" <<-EOF
  Host *
    AddKeysToAgent yes
    IdentityFile ~/.ssh/id_ed25519
  EOF

    p "Adding ssh key to macOS keychain"

    ssh-add -K
    echo "ssh-add -A &> /dev/null" > "${HOME}/.zshrc"
  }
#+end_src

#+begin_src sh
  function config_ssh_help () {
    pbcopy < "${HOME}/.ssh/id_ed25519.pub"
    open "https://github.com/settings/keys"
  }
#+end_src

#+begin_example sh :tangle no
  ssh-copy-id username@example.com
#+end_example

*** TODO: vim

#+begin_src sh :tangle no
  function config_vim () {
    p "Configure vim"
  }
#+end_src

*** zsh

#+begin_src sh
function config_zsh () {
  p "Create system default '/etc/zshrc'"

  sudo tee /etc/zshrc > /dev/null <<-EOF
alias -g ...="../.."
alias -g ....="../../.."
alias -g .....="../../../.."
alias l="/bin/ls -lG"
alias ll="/bin/ls -alG"
alias lr="/bin/ls -alRG"
alias screen="/usr/bin/screen -U"
autoload -U compaudit
compaudit | xargs -L 1 sudo chown -HR root:wheel {} 2> /dev/null
compaudit | xargs -L 1 sudo chmod -HR go-w {} 2> /dev/null
autoload -U compinit
compinit -d "\${HOME}/Library/Caches/zcompdump"
bindkey "\e[3~" delete-char
bindkey "\e[A" up-line-or-search
bindkey "\e[B" down-line-or-search
export HISTFILE="\${HOME}/Library/Caches/zsh_history"
export HISTSIZE=50000
export SAVEHIST=50000
setopt APPEND_HISTORY
setopt AUTO_CD
setopt EXTENDED_HISTORY
setopt HIST_FIND_NO_DUPS
setopt INC_APPEND_HISTORY
setopt PROMPT_SUBST
setopt SHARE_HISTORY
stty erase 
# Correctly display UTF-8 with combining characters.
if [ "\$TERM_PROGRAM" = "Apple_Terminal" ]; then
  setopt combiningchars
fi
function precmd () {
  print -Pn "\\e]7;file://%M\${PWD// /%%20}\a";
  print -Pn "\\e]2;%n@%m\a";
  print -Pn "\\e]1;%~\a";
}
function gb () {
  git branch --no-color 2> /dev/null | \
    sed -e "/^[^*]/d" -e "s/* \(.*\)/ (\1)/"
}
function xd () {
  xattr -d com.apple.diskimages.fsck \$* 2> /dev/null;
  xattr -d com.apple.diskimages.recentcksum \$* 2> /dev/null;
  xattr -d com.apple.metadata:kMDItemFinderComment \$* 2> /dev/null;
  xattr -d com.apple.metadata:kMDItemDownloadedDate \$* 2> /dev/null;
  xattr -d com.apple.metadata:kMDItemWhereFroms \$* 2> /dev/null;
  xattr -d com.apple.quarantine \$* 2> /dev/null;
  find . -name .DS_Store -delete;
  find . -name 'Icon' -delete
}
function sf () {
  SetFile -P -d "\$1 12:00:00" -m "\$1 12:00:00" \$argv[2,\$]
}
function sd () {
  xd **/*;
  sf \$1 .;
  for i in **/*; do sf \$1 \$i; done;
  chown -R root:wheel .;
  chmod -R a+r,u+w,go-w .;
  find . -type d -exec chmod a+x '{}' ';';
  chgrp -R admin ./Applications;
  chmod -R g+w ./Applications;
  chgrp -R admin ./Library;
  chmod -R g+w ./Library;
  chgrp -R staff "./Library/Application Support/Adobe";
  chmod -R g-w ./Library/Keychains;
  chmod -R g-w ./Library/ScriptingAdditions;
  chgrp -R wheel ./Library/Filesystems;
  chmod -R g-w ./Library/Filesystems;
  chgrp -R wheel ./Library/LaunchAgents;
  chmod -R g-w ./Library/LaunchAgents;
  chgrp -R wheel ./Library/LaunchDaemons;
  chmod -R g-w ./Library/LaunchDaemons;
  chgrp -R wheel ./Library/PreferencePanes;
  chmod -R g-w ./Library/PreferencePanes;
  chgrp -R wheel ./Library/StartupItems;
  chmod -R g-w ./Library/StartupItems;
  chgrp -R wheel ./Library/Widgets;
  chmod -R g-w ./Library/Widgets;
  find . -name "kexts" -type d -exec chmod -R g-w '{}' ';';
  find . -name "*.kext" -exec chown -R root:wheel '{}' ';';
  find . -name "*.kext" -exec chmod -R g-w '{}' ';'
}
MAS="\$(getconf DARWIN_USER_CACHE_DIR)com.apple.appstore"
PROMPT="%B%n@%m%b:%2~%B\$(gb) %#%b "
EOF
}
#+end_src

*** Login Items

#+begin_src sh
  function config_loginitems () {
    p "Create login items"

    osascript > /dev/null << EOF
      tell app "System Events"
        make new login item with properties ¬
          { path: "/Applications/Alfred 3.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/autoping.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Caffeine.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Coffitivity.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Dropbox.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/HardwareGrowler.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/I Love Stars.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/IPMenulet.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/iTunes.app/Contents/MacOS/iTunesHelper.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Menubar Countdown.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Meteorologist.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Moom.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Plex Media Server.app", hidden: true }
        make new login item with properties ¬
          { path: "/Library/PreferencePanes/SteerMouse.prefPane/Contents/MacOS/SteerMouse Manager.app", hidden: true }
      end tell
  EOF

    mkdir -m go= -p "${HOME}/Library/LaunchAgents"
    printf "%s\t%s\n" \
      "net.elasticthreads.nv" "add ':KeepAlive' bool true" \
      "net.elasticthreads.nv" "add ':Label' string 'net.elasticthreads.nv'" \
      "net.elasticthreads.nv" "add ':Program' string '/Applications/nvALT.app/Contents/MacOS/nvALT'" \
    | while IFS=$'\t' read a b; do
      /usr/libexec/PlistBuddy "${HOME}/Library/LaunchAgents/${a}.plist" -c "${b}" &> /dev/null
    done
  }
#+end_src

*** handlers

#+begin_src sh
  function config_handlers () {
    if [ -f "${HOME}/Library/Preferences/org.duti.plist" ]; then
      rm "${HOME}/Library/Preferences/org.duti.plist"
    fi

    printf "%s\t%s\t%s\n" \
      "com.apple.DiskImageMounter" "com.apple.disk-image" "all" \
      "com.apple.DiskImageMounter" "public.disk-image" "all" \
      "com.apple.DiskImageMounter" "public.iso-image" "all" \
      "com.apple.QuickTimePlayerX" "com.apple.coreaudio-format" "all" \
      "com.apple.QuickTimePlayerX" "com.apple.quicktime-movie" "all" \
      "com.apple.QuickTimePlayerX" "com.microsoft.waveform-audio" "all" \
      "com.apple.QuickTimePlayerX" "public.aifc-audio" "all" \
      "com.apple.QuickTimePlayerX" "public.aiff-audio" "all" \
      "com.apple.QuickTimePlayerX" "public.audio" "all" \
      "com.apple.QuickTimePlayerX" "public.mp3" "all" \
      "com.apple.Safari" "com.compuserve.gif" "all" \
      "com.apple.Terminal" "com.apple.terminal.shell-script" "all" \
      "com.apple.iTunes" "com.apple.iTunes.audible" "all" \
      "com.apple.iTunes" "com.apple.iTunes.ipg" "all" \
      "com.apple.iTunes" "com.apple.iTunes.ipsw" "all" \
      "com.apple.iTunes" "com.apple.iTunes.ite" "all" \
      "com.apple.iTunes" "com.apple.iTunes.itlp" "all" \
      "com.apple.iTunes" "com.apple.iTunes.itms" "all" \
      "com.apple.iTunes" "com.apple.iTunes.podcast" "all" \
      "com.apple.iTunes" "com.apple.m4a-audio" "all" \
      "com.apple.iTunes" "com.apple.mpeg-4-ringtone" "all" \
      "com.apple.iTunes" "com.apple.protected-mpeg-4-audio" "all" \
      "com.apple.iTunes" "com.apple.protected-mpeg-4-video" "all" \
      "com.apple.iTunes" "com.audible.aa-audio" "all" \
      "com.apple.iTunes" "public.mpeg-4-audio" "all" \
      "com.apple.installer" "com.apple.installer-package-archive" "all" \
      "com.github.atom" "com.apple.binary-property-list" "editor" \
      "com.github.atom" "com.apple.crashreport" "editor" \
      "com.github.atom" "com.apple.dt.document.ascii-property-list" "editor" \
      "com.github.atom" "com.apple.dt.document.script-suite-property-list" "editor" \
      "com.github.atom" "com.apple.dt.document.script-terminology-property-list" "editor" \
      "com.github.atom" "com.apple.log" "editor" \
      "com.github.atom" "com.apple.property-list" "editor" \
      "com.github.atom" "com.apple.rez-source" "editor" \
      "com.github.atom" "com.apple.symbol-export" "editor" \
      "com.github.atom" "com.apple.xcode.ada-source" "editor" \
      "com.github.atom" "com.apple.xcode.bash-script" "editor" \
      "com.github.atom" "com.apple.xcode.configsettings" "editor" \
      "com.github.atom" "com.apple.xcode.csh-script" "editor" \
      "com.github.atom" "com.apple.xcode.fortran-source" "editor" \
      "com.github.atom" "com.apple.xcode.ksh-script" "editor" \
      "com.github.atom" "com.apple.xcode.lex-source" "editor" \
      "com.github.atom" "com.apple.xcode.make-script" "editor" \
      "com.github.atom" "com.apple.xcode.mig-source" "editor" \
      "com.github.atom" "com.apple.xcode.pascal-source" "editor" \
      "com.github.atom" "com.apple.xcode.strings-text" "editor" \
      "com.github.atom" "com.apple.xcode.tcsh-script" "editor" \
      "com.github.atom" "com.apple.xcode.yacc-source" "editor" \
      "com.github.atom" "com.apple.xcode.zsh-script" "editor" \
      "com.github.atom" "com.apple.xml-property-list" "editor" \
      "com.github.atom" "com.barebones.bbedit.actionscript-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.erb-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.ini-configuration" "editor" \
      "com.github.atom" "com.barebones.bbedit.javascript-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.json-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.jsp-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.lasso-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.lua-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.setext-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.sql-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.tcl-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.tex-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.textile-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.vbscript-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.vectorscript-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.verilog-hdl-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.vhdl-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.yaml-source" "editor" \
      "com.github.atom" "com.netscape.javascript-source" "editor" \
      "com.github.atom" "com.sun.java-source" "editor" \
      "com.github.atom" "dyn.ah62d4rv4ge80255drq" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge80g55gq3w0n" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge80g55sq2" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge80y2xzrf0gk3pw" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge81e3dtqq" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge81e7k" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge81g25xsq" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge81g2pxsq" "all" \
      "com.github.atom" "net.daringfireball.markdown" "editor" \
      "com.github.atom" "public.assembly-source" "editor" \
      "com.github.atom" "public.c-header" "editor" \
      "com.github.atom" "public.c-plus-plus-source" "editor" \
      "com.github.atom" "public.c-source" "editor" \
      "com.github.atom" "public.csh-script" "editor" \
      "com.github.atom" "public.json" "editor" \
      "com.github.atom" "public.lex-source" "editor" \
      "com.github.atom" "public.log" "editor" \
      "com.github.atom" "public.mig-source" "editor" \
      "com.github.atom" "public.nasm-assembly-source" "editor" \
      "com.github.atom" "public.objective-c-plus-plus-source" "editor" \
      "com.github.atom" "public.objective-c-source" "editor" \
      "com.github.atom" "public.patch-file" "editor" \
      "com.github.atom" "public.perl-script" "editor" \
      "com.github.atom" "public.php-script" "editor" \
      "com.github.atom" "public.plain-text" "editor" \
      "com.github.atom" "public.precompiled-c-header" "editor" \
      "com.github.atom" "public.precompiled-c-plus-plus-header" "editor" \
      "com.github.atom" "public.python-script" "editor" \
      "com.github.atom" "public.ruby-script" "editor" \
      "com.github.atom" "public.script" "editor" \
      "com.github.atom" "public.shell-script" "editor" \
      "com.github.atom" "public.source-code" "editor" \
      "com.github.atom" "public.text" "editor" \
      "com.github.atom" "public.utf16-external-plain-text" "editor" \
      "com.github.atom" "public.utf16-plain-text" "editor" \
      "com.github.atom" "public.utf8-plain-text" "editor" \
      "com.github.atom" "public.xml" "editor" \
      "com.kodlian.Icon-Slate" "com.apple.icns" "all" \
      "com.kodlian.Icon-Slate" "com.microsoft.ico" "all" \
      "com.microsoft.Word" "public.rtf" "all" \
      "com.panayotis.jubler" "dyn.ah62d4rv4ge81g6xy" "all" \
      "com.sketchup.SketchUp.2017" "com.sketchup.skp" "all" \
      "com.VortexApps.NZBVortex3" "dyn.ah62d4rv4ge8068xc" "all" \
      "com.vmware.fusion" "com.microsoft.windows-executable" "all" \
      "cx.c3.theunarchiver" "com.alcohol-soft.mdf-image" "all" \
      "cx.c3.theunarchiver" "com.allume.stuffit-archive" "all" \
      "cx.c3.theunarchiver" "com.altools.alz-archive" "all" \
      "cx.c3.theunarchiver" "com.amiga.adf-archive" "all" \
      "cx.c3.theunarchiver" "com.amiga.adz-archive" "all" \
      "cx.c3.theunarchiver" "com.apple.applesingle-archive" "all" \
      "cx.c3.theunarchiver" "com.apple.binhex-archive" "all" \
      "cx.c3.theunarchiver" "com.apple.bom-compressed-cpio" "all" \
      "cx.c3.theunarchiver" "com.apple.itunes.ipa" "all" \
      "cx.c3.theunarchiver" "com.apple.macbinary-archive" "all" \
      "cx.c3.theunarchiver" "com.apple.self-extracting-archive" "all" \
      "cx.c3.theunarchiver" "com.apple.xar-archive" "all" \
      "cx.c3.theunarchiver" "com.apple.xip-archive" "all" \
      "cx.c3.theunarchiver" "com.cyclos.cpt-archive" "all" \
      "cx.c3.theunarchiver" "com.microsoft.cab-archive" "all" \
      "cx.c3.theunarchiver" "com.microsoft.msi-installer" "all" \
      "cx.c3.theunarchiver" "com.nero.nrg-image" "all" \
      "cx.c3.theunarchiver" "com.network172.pit-archive" "all" \
      "cx.c3.theunarchiver" "com.nowsoftware.now-archive" "all" \
      "cx.c3.theunarchiver" "com.nscripter.nsa-archive" "all" \
      "cx.c3.theunarchiver" "com.padus.cdi-image" "all" \
      "cx.c3.theunarchiver" "com.pkware.zip-archive" "all" \
      "cx.c3.theunarchiver" "com.rarlab.rar-archive" "all" \
      "cx.c3.theunarchiver" "com.redhat.rpm-archive" "all" \
      "cx.c3.theunarchiver" "com.stuffit.archive.sit" "all" \
      "cx.c3.theunarchiver" "com.stuffit.archive.sitx" "all" \
      "cx.c3.theunarchiver" "com.sun.java-archive" "all" \
      "cx.c3.theunarchiver" "com.symantec.dd-archive" "all" \
      "cx.c3.theunarchiver" "com.winace.ace-archive" "all" \
      "cx.c3.theunarchiver" "com.winzip.zipx-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.arc-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.arj-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.dcs-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.dms-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.ha-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.lbr-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.lha-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.lhf-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.lzx-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.packdev-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.pax-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.pma-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.pp-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.xmash-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.zoo-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.zoom-archive" "all" \
      "cx.c3.theunarchiver" "org.7-zip.7-zip-archive" "all" \
      "cx.c3.theunarchiver" "org.archive.warc-archive" "all" \
      "cx.c3.theunarchiver" "org.debian.deb-archive" "all" \
      "cx.c3.theunarchiver" "org.gnu.gnu-tar-archive" "all" \
      "cx.c3.theunarchiver" "org.gnu.gnu-zip-archive" "all" \
      "cx.c3.theunarchiver" "org.gnu.gnu-zip-tar-archive" "all" \
      "cx.c3.theunarchiver" "org.tukaani.lzma-archive" "all" \
      "cx.c3.theunarchiver" "org.tukaani.xz-archive" "all" \
      "cx.c3.theunarchiver" "public.bzip2-archive" "all" \
      "cx.c3.theunarchiver" "public.cpio-archive" "all" \
      "cx.c3.theunarchiver" "public.tar-archive" "all" \
      "cx.c3.theunarchiver" "public.tar-bzip2-archive" "all" \
      "cx.c3.theunarchiver" "public.z-archive" "all" \
      "cx.c3.theunarchiver" "public.zip-archive" "all" \
      "cx.c3.theunarchiver" "public.zip-archive.first-part" "all" \
      "org.gnu.Emacs" "dyn.ah62d4rv4ge8086xh" "all" \
      "org.inkscape.Inkscape" "public.svg-image" "editor" \
      "org.videolan.vlc" "com.apple.m4v-video" "all" \
      "org.videolan.vlc" "com.microsoft.windows-media-wmv" "all" \
      "org.videolan.vlc" "org.videolan.3gp" "all" \
      "org.videolan.vlc" "org.videolan.aac" "all" \
      "org.videolan.vlc" "org.videolan.ac3" "all" \
      "org.videolan.vlc" "org.videolan.aiff" "all" \
      "org.videolan.vlc" "org.videolan.amr" "all" \
      "org.videolan.vlc" "org.videolan.aob" "all" \
      "org.videolan.vlc" "org.videolan.ape" "all" \
      "org.videolan.vlc" "org.videolan.asf" "all" \
      "org.videolan.vlc" "org.videolan.avi" "all" \
      "org.videolan.vlc" "org.videolan.axa" "all" \
      "org.videolan.vlc" "org.videolan.axv" "all" \
      "org.videolan.vlc" "org.videolan.divx" "all" \
      "org.videolan.vlc" "org.videolan.dts" "all" \
      "org.videolan.vlc" "org.videolan.dv" "all" \
      "org.videolan.vlc" "org.videolan.flac" "all" \
      "org.videolan.vlc" "org.videolan.flash" "all" \
      "org.videolan.vlc" "org.videolan.gxf" "all" \
      "org.videolan.vlc" "org.videolan.it" "all" \
      "org.videolan.vlc" "org.videolan.mid" "all" \
      "org.videolan.vlc" "org.videolan.mka" "all" \
      "org.videolan.vlc" "org.videolan.mkv" "all" \
      "org.videolan.vlc" "org.videolan.mlp" "all" \
      "org.videolan.vlc" "org.videolan.mod" "all" \
      "org.videolan.vlc" "org.videolan.mpc" "all" \
      "org.videolan.vlc" "org.videolan.mpeg-audio" "all" \
      "org.videolan.vlc" "org.videolan.mpeg-stream" "all" \
      "org.videolan.vlc" "org.videolan.mpeg-video" "all" \
      "org.videolan.vlc" "org.videolan.mxf" "all" \
      "org.videolan.vlc" "org.videolan.nsv" "all" \
      "org.videolan.vlc" "org.videolan.nuv" "all" \
      "org.videolan.vlc" "org.videolan.ogg-audio" "all" \
      "org.videolan.vlc" "org.videolan.ogg-video" "all" \
      "org.videolan.vlc" "org.videolan.oma" "all" \
      "org.videolan.vlc" "org.videolan.opus" "all" \
      "org.videolan.vlc" "org.videolan.quicktime" "all" \
      "org.videolan.vlc" "org.videolan.realmedia" "all" \
      "org.videolan.vlc" "org.videolan.rec" "all" \
      "org.videolan.vlc" "org.videolan.rmi" "all" \
      "org.videolan.vlc" "org.videolan.s3m" "all" \
      "org.videolan.vlc" "org.videolan.spx" "all" \
      "org.videolan.vlc" "org.videolan.tod" "all" \
      "org.videolan.vlc" "org.videolan.tta" "all" \
      "org.videolan.vlc" "org.videolan.vob" "all" \
      "org.videolan.vlc" "org.videolan.voc" "all" \
      "org.videolan.vlc" "org.videolan.vqf" "all" \
      "org.videolan.vlc" "org.videolan.vro" "all" \
      "org.videolan.vlc" "org.videolan.wav" "all" \
      "org.videolan.vlc" "org.videolan.webm" "all" \
      "org.videolan.vlc" "org.videolan.wma" "all" \
      "org.videolan.vlc" "org.videolan.wmv" "all" \
      "org.videolan.vlc" "org.videolan.wtv" "all" \
      "org.videolan.vlc" "org.videolan.wv" "all" \
      "org.videolan.vlc" "org.videolan.xa" "all" \
      "org.videolan.vlc" "org.videolan.xesc" "all" \
      "org.videolan.vlc" "org.videolan.xm" "all" \
      "org.videolan.vlc" "public.ac3-audio" "all" \
      "org.videolan.vlc" "public.audiovisual-content" "all" \
      "org.videolan.vlc" "public.avi" "all" \
      "org.videolan.vlc" "public.movie" "all" \
      "org.videolan.vlc" "public.mpeg" "all" \
      "org.videolan.vlc" "public.mpeg-2-video" "all" \
      "org.videolan.vlc" "public.mpeg-4" "all" \
    | while IFS=$'\t' read a b c; do
        defaults write org.duti DUTISettings -array-add \
          "{
            DUTIBundleIdentifier = '$a';
            DUTIUniformTypeIdentifier = '$b';
            DUTIRole = '$c';
          }"
    done

    if [ -x "/usr/local/bin/duti" ]; then
      p "Set document file handlers"

      duti "${HOME}/Library/Preferences/org.duti.plist" 2> /dev/null
    fi

    /System/Library/Frameworks/CoreServices.framework/Versions/Current/Frameworks/LaunchServices.framework/Versions/Current/Support/lsregister -kill -r -domain local -domain system -domain user

    sudo rm -rf /Library/Caches/com.apple.iconservices.store
    sudo find /private/var/folders -depth \( -name com.apple.dock.iconcache -or -name com.apple.iconservices \) -exec rm -rf {} \;
    sudo touch /Applications/* /Applications/Utilities/* 2> /dev/null

    sleep 5
    osascript -e 'tell app "Dock" to quit'
    killall Finder
  }
#+end_src

#+begin_src sh
  function config_done () {
    p "To copy gpg public key, enter 'config_gpg_help'"
    p "To copy ssh public key, enter 'config_ssh_help'"
    p "Otherwise, enter 'private' (if configured) or 'reboot' now"
  }
#+end_src

*** config

#+begin_src sh
  function config () {
    config_mas
    config_atom
    config_bbedit
    config_desktop
    config_dock
    config_emacs
    config_vi_script
    config_terminal
    config_openssl
    config_dovecot
    config_sieve
    config_getmail
    config_gpg
    config_git
    config_shell
    config_ssh
    #config_vim
    config_zsh
    config_loginitems
    config_handlers
    config_done
  }
#+end_src

** Private

This section includes license keys, registration codes, and serial numbers.

#+begin_src sh
  function private () {
    printf "%s\n"
#+end_src

-----BEGIN PGP MESSAGE-----

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
=PXSO
-----END PGP MESSAGE-----

#+begin_src sh
  }
#+end_src

** Commands

#+begin_src sh
  function display_help () {
    cat << EOF

    Initialize:
      $(which init)

    Install:
      $(which install)

  EOF
  }

  display_help
  fi
#+end_src
