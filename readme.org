* macOS Setup
:properties:
:header-args: :tangle setup.command
:header-args:sh: :shebang #!/bin/sh :results silent
:end:
#+startup: content nohideblocks hidestars indent

From clean install to fully configured.

#+begin_example sh :tangle no
  sudo "/Applications/Install macOS Sierra.app/Contents/Resources/createinstallmedia" \
    --applicationpath "/Applications/Install macOS Sierra.app" --nointeraction \
    --volume "/Volumes/Install"
#+end_example

** Initialize

*** New Terminal

#+begin_src sh
  if [ -z "$1" ]; then
    if [[ ! $SHELL == *"zsh" ]]; then
      chsh -s /bin/zsh
    fi

    osascript << EOF
  tell app "Terminal" to do script "source ${0} 0"
  EOF
    clear
  else
#+end_src

*** Constants

#+begin_src sh
  CACHE="/Volumes/Install"
  DOMAIN="ptb2.me"
  MAIL="mail.${DOMAIN}"

  MAS="$(getconf DARWIN_USER_CACHE_DIR)com.apple.appstore"
#+end_src

*** Utility Functions

#+begin_src sh
  function p () {
    printf "\n\033[1m\033[34m%s\033[0m\n\n" "${1}"
  }
#+end_src

*** Disable Repeated Requests for Password

#+begin_src sh
  function init_sudoers () {
    p "Disable repeated requests for password"

    printf "%s\t%s\n" \
      "timeout" "Defaults:%admin timestamp_timeout=-1" \
      "installer" "%admin ALL=(ALL) NOPASSWD:SETENV: /usr/sbin/installer" \
      "tty_tickets" 'Defaults:%admin !tty_tickets' \
    | while IFS=$'\t' read a b; do
      sudo tee "/etc/sudoers.d/${a}" <<< "${b}" > /dev/null
    done
  }
#+end_src

*** Disable System and Disk Sleep

#+begin_src sh
  function init_no_sleep () {
    p "Disable system and disk sleep"

    sudo pmset -a sleep 0
    sudo pmset -a disksleep 0
 }
#+end_src

*** Set Computer Name and Local Hostname

#+begin_src sh
  function init_hostname () {
    p "Set computer name and local hostname"
#+end_src

*Computer Name*
#+begin_src sh
  sudo systemsetup -setcomputername \
    $(ruby -e "print '$(hostname -s)'.capitalize") &> /dev/null
#+end_src

*Local Hostname*
#+begin_src sh
  sudo systemsetup -setlocalsubnetname $(hostname -s) &> /dev/null
#+end_src

#+begin_src sh
  }
#+end_src

*** Set Permissions on Install Destinations

#+begin_src sh
  function init_perms () {
    p "Set permissions on install destinations"

    for c in \
      "/Library/ColorPickers" \
      "/Library/Fonts" \
      "/Library/Input Methods" \
      "/Library/PreferencePanes" \
      "/Library/QuickLook" \
      "/Library/Screen Savers" \
      "/usr/local" \
    ; do
      sudo chgrp -R admin "${c}"
      sudo chmod -R g+w "${c}"
    done

    if [ ! -d "/usr/local/bin" ]; then
      mkdir -m o-w -p "/usr/local/bin"
    fi
  }
#+end_src

*** Install Developer Tools

#+begin_src sh
  function init_devtools () {
    p "Install developer tools"

    if [ -d "${CACHE}/Updates" ]; then
      sudo chown -R "${USER}" "/Library/Updates"
      rsync -a --delay-updates \
        "${CACHE}/Updates/" "/Library/Updates/"
    fi

    xcode-select --install
  }
#+end_src

*** Install macOS Updates

#+begin_src sh
  function init_updater () {
    p "Install macOS updates"

    if [ -d "${CACHE}/Updates" ]; then
      sudo chown -R "${USER}" "/Library/Updates"
      rsync -a --delay-updates \
        "${CACHE}/Updates/" "/Library/Updates/"
    fi

    sudo softwareupdate --install --all
  }
#+end_src

*** Create Primary Account

#+begin_src sh
  function init_account () {
    p "Create primary user account"

    /bin/echo -n "Real name: " && read NAME
    /bin/echo -n "Account name: " && read U
    /bin/echo -n "Email address: " && read EMAIL

    sudo chgrp admin "/Library/User Pictures"
    sudo chmod g+w "/Library/User Pictures"
    curl "https://www.gravatar.com/avatar/$(md5 -qs $EMAIL).jpg?s=512" --silent \
      --compressed --location --output "/Library/User Pictures/${EMAIL}.jpg" \

    sudo defaults write \
      "/System/Library/User Template/Non_localized/Library/Preferences/.GlobalPreferences.plist" \
      "com.apple.swipescrolldirection" -bool false

    sudo sysadminctl -addUser "${U}" -fullName "${NAME}" -password - \
      -shell "/bin/zsh" -admin -picture "/Library/User Pictures/${EMAIL}.jpg"

    p "Press any key to log out."
    /usr/bin/read -n 1 -s

    osascript -e 'tell application "loginwindow" to «event aevtrlgo»'
  }
#+end_src

*** init

#+begin_src sh
  function init () {
    init_sudoers
    init_no_sleep
    init_hostname
    init_perms
    init_devtools
    init_updater
    init_account
  }
#+end_src

** Install

*** Homebrew and App Store Caches

#+begin_src sh
  function install_caches () {
    if [ -d "${CACHE}/Homebrew" ]; then
      p "Restore Homebrew caches from backup"

      rsync -a --delay-updates \
        "${CACHE}/Homebrew/" "${HOME}/Library/Caches/Homebrew/"
    fi

    if [ -d "${CACHE}/Updates" ]; then
      p "Restore App Store caches from backup"

      sudo chown -R "${USER}" "${MAS}"
      rsync -a --delay-updates \
        "${CACHE}/App Store/" "${MAS}/"
    fi
  }
#+end_src

*** Default Paths

#+begin_src sh
  function install_paths () {
    if ! grep -Fq "/usr/local/sbin" /etc/paths; then
      p "Add '/usr/local/sbin' to default \$PATH"

      sudo sed -i -e "/\/usr\/sbin/{x;s/$/\/usr\/local\/sbin/;G;}" /etc/paths
    fi
  }
#+end_src

*** [[https://brew.sh/][Homebrew]]

#+begin_src sh
  function install_brew () {
    p "Install Homebrew"

    ruby -e "$(curl -Ls https://github.com/Homebrew/install/raw/master/install)"

    brew analytics off

    brew update
    brew doctor

    brew tap "homebrew/bundle"
#+end_src

*** [[https://github.com/Homebrew/homebrew-bundle][Brewfile]]

#+begin_src sh
  cat > /usr/local/Brewfile << EOF
  cask_args colorpickerdir: "/Library/ColorPickers",
    fontdir: "/Library/Fonts",
    input_methoddir: "/Library/Input Methods",
    prefpanedir: "/Library/PreferencePanes",
    qlplugindir: "/Library/QuickLook",
    screen_saverdir: "/Library/Screen Savers"

  tap "homebrew/bundle"
  tap "caskroom/cask"

  brew "rsync"
  brew "mas"
  mas "autoping", id: 632347870

  cask "docker-toolbox"
  cask "java"
  cask "vmware-fusion"

  cask "xquartz"
  cask "inkscape"
  cask "wireshark"

  brew "aspell",
    args: ["lang=en"]
  brew "chromedriver"
  brew "coreutils"
  tap "homebrew/services"
  brew "dovecot",
    args: [
    "with-pam",
    "with-pigeonhole" ]
  brew "duti"
  brew "fdupes"
  brew "gawk"
  brew "getmail"
  brew "git"
  brew "gnu-sed",
    args: ["with-default-names"]
  brew "gnupg"
  brew "gpac"
  brew "hub"
  brew "ievms"
  brew "imagemagick"
  brew "mercurial"
  brew "mp4v2"
  brew "mtr"
  brew "nmap"
  brew "nvm"
  brew "openssl"
  brew "pinentry-mac"
  brew "pyenv"
  brew "rbenv"
  brew "selenium-server-standalone"
  brew "sqlite"
  brew "stow"
  brew "terminal-notifier"
  brew "trash"
  brew "vim"
  brew "wget"
  brew "yarn",
    args: ["ignore-dependencies"]
  brew "youtube-dl"
  brew "zsh"

  cask "adium"
  cask "airfoil"
  cask "alfred"
  cask "arduino"
  cask "atom"
  cask "autodmg"
  cask "bbedit"
  cask "caffeine"
  cask "carbon-copy-cloner"
  cask "charles"
  cask "dash"
  cask "dropbox"
  cask "duet"
  cask "exifrenamer"
  cask "firefox"
  cask "flux"
  cask "github-desktop"
  cask "gitup"
  cask "google-chrome"
  cask "handbrake"
  cask "hermes"
  cask "imageoptim"
  cask "integrity"
  cask "istat-menus"
  cask "jubler"
  cask "little-snitch"
  cask "machg"
  cask "makemkv"
  cask "menubar-countdown"
  cask "meteorologist"
  cask "moom"
  cask "mp4tools"
  cask "munki"
  cask "musicbrainz-picard"
  cask "namechanger"
  cask "nvalt"
  cask "nzbget"
  cask "nzbvortex"
  cask "openemu"
  cask "opera"
  cask "pacifist"
  cask "platypus"
  cask "plex-media-server"
  cask "quitter"
  cask "rescuetime"
  cask "scrivener"
  cask "sitesucker"
  cask "sizeup"
  cask "sketch"
  cask "sketchup"
  cask "skitch"
  cask "skype"
  cask "slack"
  cask "sonarr"
  cask "sonarr-menu"
  cask "sourcetree"
  cask "steermouse"
  cask "subler"
  cask "sublime-text"
  cask "the-unarchiver"
  cask "time-sink"
  cask "torbrowser"
  cask "tower"
  cask "transmit"
  cask "unrarx"
  cask "vimr"
  cask "vlc"
  cask "xld"

  tap "railwaycat/emacsmacport"
  cask "railwaycat/emacsmacport/emacs-mac-spacemacs-icon"

  tap "caskroom/fonts"
  cask "caskroom/fonts/font-inconsolata-lgc"

  # tap "caskroom/versions"
  # cask "caskroom/versions/safari-technology-preview"

  tap "ptb/custom"
  cask "ptb/custom/adobe-creative-cloud-2014"
  cask "ptb/custom/blankscreen"
  cask "ptb/custom/composer"
  cask "ptb/custom/enhanced-dictation"
  cask "ptb/custom/ipmenulet"
  cask "ptb/custom/pcalc-3"
  cask "ptb/custom/sketchup-pro"
  cask "ptb/custom/synergy"
  cask "ptb/custom/text-to-speech-allison"

  mas "1Password", id: 443987910
  mas "Coffitivity", id: 659901392
  mas "Growl", id: 467939042
  mas "HardwareGrowler", id: 475260933
  mas "I Love Stars", id: 402642760
  mas "Icon Slate", id: 439697913
  mas "Justnotes", id: 511230166
  mas "Keynote", id: 409183694
  mas "Numbers", id: 409203825
  mas "Pages", id: 409201541
  mas "WiFi Explorer", id: 494803304

  tap "homebrew/nginx"
  brew "homebrew/nginx/nginx-full",
    args: [
    "with-dav-ext-module",
    "with-fancyindex-module",
    "with-gzip-static",
    "with-http2",
    "with-mp4-h264-module",
    "with-passenger",
    "with-push-stream-module",
    "with-secure-link",
    "with-webdav" ]

  brew "ptb/custom/ffmpeg",
    args: [
    "with-chromaprint",
    "with-fdk-aac",
    "with-fontconfig",
    "with-freetype",
    "with-frei0r",
    "with-game-music-emu",
    "with-lame",
    "with-libass",
    "with-libbluray",
    "with-libbs2b",
    "with-libcaca",
    "with-libgsm",
    "with-libmodplug",
    "with-libsoxr",
    "with-libssh",
    "with-libvidstab",
    "with-libvorbis",
    "with-libvpx",
    "with-opencore-amr",
    "with-openh264",
    "with-openjpeg",
    "with-openssl",
    "with-opus",
    "with-pkg-config",
    "with-rtmpdump",
    "with-rubberband",
    "with-schroedinger",
    "with-sdl2",
    "with-snappy",
    "with-speex",
    "with-tesseract",
    "with-texi2html",
    "with-theora",
    "with-tools",
    "with-two-lame",
    "with-wavpack",
    "with-webp",
    "with-x264",
    "with-x265",
    "with-xvid",
    "with-xz",
    "with-yasm",
    "with-zeromq",
    "with-zimg" ]

  mas "Xcode", id: 497799835
  EOF
  }
#+end_src

*** macOS Software

#+begin_src sh
  function install_macos_sw () {
    p "Install macOS software with Homebrew"

    cd /usr/local/ && brew bundle && cd "${HOME}"

    if [ -d "/Applications/Xcode.app" ]; then
      sudo xcodebuild -license accept
    fi

    brew upgrade
  }
#+end_src

*** Link Utilities

#+begin_src sh
  function install_links () {
    p "Link System and Xcode utilities to Applications"

    brew linkapps 2> /dev/null

    cd /Applications && \
    for a in /System/Library/CoreServices/Applications/*; do
      ln -s "../..$a" . 2> /dev/null
    done

    if [ -d "/Applications/Xcode.app" ]; then
      cd /Applications && \
      for b in /Applications/Xcode.app/Contents/Applications/*; do
        ln -s "../..$b" . 2> /dev/null
      done && \
      for c in /Applications/Xcode.app/Contents/Developer/Applications/*; do
        ln -s "../..$c" . 2> /dev/null
      done
    fi

    cd "${HOME}"
  }
#+end_src

*** Node Software

#+begin_src sh
  function install_node_sw () {
    p "Install Node software"

    printf "%s\n" \
      'export NVM_DIR="/usr/local/node"' \
    >> "${HOME}/.zshenv"
    source "${HOME}/.zshenv"

    printf "%s\n" \
      '[ -s "$(brew --prefix)/opt/nvm/nvm.sh" ] && . "$(brew --prefix)/opt/nvm/nvm.sh"' \
    >> "${HOME}/.zshrc"
    source "${HOME}/.zshrc"

    nvm install node
  }
#+end_src

*** Python Software

[[http://akbaribrahim.com/managing-multiple-python-versions-with-pyenv/][Managing Multiple Python Versions with pyenv]]

#+begin_src sh
  function install_python_sw () {
    p "Install Python software"

    printf "%s\n" \
      'export PYENV_ROOT="/usr/local/python"' \
    >> "${HOME}/.zshenv"
    source "${HOME}/.zshenv"

    printf "%s\n" \
      'if which pyenv > /dev/null; then eval "$(pyenv init -)"; fi' \
    >> "${HOME}/.zshrc"
    source "${HOME}/.zshrc"

    pyenv install --skip-existing 2.7.13
    pyenv install --skip-existing 3.6.2
    pyenv global 2.7.13

    pip install --upgrade "pip" "setuptools"
#+end_src

[[https://github.com/mdhiggins/sickbeard_mp4_automator][Automatic MP4 Conversion/Tagging]]

#+begin_src sh
  pip install --upgrade "babelfish" "guessit<2" "qtfaststart" "requests" "stevedore==1.19.1" "subliminal<2"
  pip install --upgrade "requests-cache" "requests[security]"

  mkdir -m go= -p "${HOME}/.config/NzbDrone"
  git clone "https://github.com/mdhiggins/sickbeard_mp4_automator.git" \
    "${HOME}/.config/NzbDrone/scripts" --depth 1
  cd "${HOME}/.config/NzbDrone/scripts" && pyenv local 2.7.13 && cd "${HOME}"
#+end_src

#+begin_src sh
  pip install --upgrade "crudini"
#+end_src

#+begin_src sh
  }
#+end_src

*** Ruby Software

#+begin_src sh
  function install_ruby_sw () {
    p "Install Ruby software"

    printf "%s\n" \
      'export RBENV_ROOT="/usr/local/ruby"' \
    >> "${HOME}/.zshenv"
    source "${HOME}/.zshenv"

    printf "%s\n" \
      'if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi' \
    >> "${HOME}/.zshrc"
    source "${HOME}/.zshrc"

    rbenv install --skip-existing 2.4.1
    rbenv global 2.4.1

    printf "%s\n" \
      "gem: --no-document" \
    >> "${HOME}/.gemrc"

    gem update --system
    gem update
    gem install bundler
  }
#+end_src

*** install

#+begin_src sh
  function install () {
    install_caches
    install_paths
    install_brew
    install_macos_sw
    install_links
    install_node_sw
    install_python_sw
    install_ruby_sw

    which prefs
  }
#+end_src

** Preferences

*** autoping

#+begin_src sh
  function prefs_autoping () {
    p "Set autoping defaults (com.memset.autoping)"

    defaults write -app autoping Hostname -string "google.com"
    defaults write -app autoping LaunchAtLogin -bool true
    defaults write -app autoping ShowNotifications -bool true
    defaults write -app autoping ShowPacketLossText -bool true
  }
#+end_src

*** Finder

**** General

#+begin_src sh
  function prefs_finder () {
    p "Set Finder defaults (com.apple.finder)"
#+end_src

*Show these items on the desktop: Hard disks:* =on=
#+begin_src sh
  defaults write com.apple.finder ShowHardDrivesOnDesktop -bool false
#+end_src

*Show these items on the desktop: External disks:* =on=
#+begin_src sh
  defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool false
#+end_src

*Show these items on the desktop: CDs, DVDs, and iPods:* =on=
#+begin_src sh
  defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool false
#+end_src

*Show these items on the desktop: Connected servers:* =on=
#+begin_src sh
  defaults write com.apple.finder ShowMountedServersOnDesktop -bool true
#+end_src

*New Finder windows show:* =${HOME}=
#+begin_src sh
  defaults write com.apple.finder NewWindowTarget -string PfHm
  defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}/"
#+end_src

**** Advanced

*Show all filename extensions:* =on=
#+begin_src sh
  defaults write -globalDomain AppleShowAllExtensions -bool true
#+end_src

*Show warning before changing an extension:* =off=
#+begin_src sh
  defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false
#+end_src

*Show warning before removing from iCloud Drive:* =on=
#+begin_src sh
  defaults write com.apple.finder FXEnableRemoveFromICloudDriveWarning -bool true
#+end_src

*Show warning before emptying the Trash:* =on=
#+begin_src sh
  defaults write com.apple.finder WarnOnEmptyTrash -bool false
#+end_src

**** View

*Show Path Bar*
#+begin_src sh
  defaults write com.apple.finder ShowPathbar -bool true
#+end_src

*Show Status Bar*
#+begin_src sh
  defaults write com.apple.finder ShowStatusBar -bool true
#+end_src

*Customize Toolbar…*
#+begin_src sh
  defaults write com.apple.finder "NSToolbar Configuration Browser" \
    '{ "TB Display Mode" = 2;
       "TB Item Identifiers" = (
         "com.apple.finder.BACK",
         "com.apple.finder.PATH",
         "com.apple.finder.SWCH",
         "com.apple.finder.ARNG",
         "NSToolbarFlexibleSpaceItem",
         "com.apple.finder.SRCH",
         "com.apple.finder.ACTN" );
    }'
#+end_src

**** View Options

*Show Library Folder:* =on=
#+begin_src sh
  chflags nohidden "${HOME}/Library"
#+end_src

#+begin_src sh
  }
#+end_src

*** Moom

**** General

#+begin_src sh
  function prefs_moom () {
    p "Set Moom defaults (com.manytricks.Moom)"
#+end_src

*Treat drawers as part of their parent windows:* =on=
#+begin_src sh
  defaults write -app Moom "Allow For Drawers" -bool true
#+end_src

*Separate windows by* =2= *pt*
#+begin_src sh
  defaults write -app Moom "Grid Spacing" -bool true
  defaults write -app Moom "Grid Spacing: Gap" -int 2
  defaults write -app Moom "Grid Spacing: Apply To Edges" -bool false
#+end_src

*Show preferences on launch:* =off=
#+begin_src sh
  defaults write -app Moom "Stealth Mode" -bool true
#+end_src

*Run as* =faceless= *application*
#+begin_src sh
  defaults write -app Moom "Application Mode" -int 2
#+end_src

**** Mouse

=on= *Enable Move & Zoom grid with* =10= *×* =6= *cells*
#+begin_src sh
  defaults write -app Moom "Mouse Controls Grid" -bool true
  defaults write -app Moom "Mouse Controls Grid: Columns" -int 10
  defaults write -app Moom "Mouse Controls Grid: Rows" -int 6
#+end_src

=on= *Enable access to custom controls*
#+begin_src sh
  defaults write -app Moom "Mouse Controls Include Custom Controls" -bool true
#+end_src

=on= *Bring moomed windows to the front automatically*
#+begin_src sh
  defaults write -app Moom "Mouse Controls Auto-Activate Window" -bool true
#+end_src

=off= *Move & Zoom when dragging a window to a display edge or corner*
#+begin_src sh
  defaults write -app Moom "Snap" -bool false
#+end_src

**** Custom

#+begin_src sh
  defaults write -app Moom "Custom Controls" -array-add \
    '{ Action = 19; "Relative Frame" = "{{0, 0.33333}, {0.5, 0.66666}}"; }'
  defaults write -app Moom "Custom Controls" -array-add \
    '{ Action = 19; "Relative Frame" = "{{0, 0}, {0.3, 0.33333}}"; }'
  defaults write -app Moom "Custom Controls" -array-add \
    '{ Action = 19; "Relative Frame" = "{{0.4, 0.33333}, {0.3, 0.66666}}"; }'
  defaults write -app Moom "Custom Controls" -array-add \
    '{ Action = 19; "Relative Frame" = "{{0.3, 0}, {0.4, 0.33333}}"; }'
  defaults write -app Moom "Custom Controls" -array-add \
    '{ Action = 19; "Relative Frame" = "{{0.7, 0.66666}, {0.3, 0.33333}}"; }'
  defaults write -app Moom "Custom Controls" -array-add \
    '{ Action = 19; "Relative Frame" = "{{0.7, 0.33333}, {0.3, 0.33333}}"; }'
  defaults write -app Moom "Custom Controls" -array-add \
    '{ Action = 19; "Relative Frame" = "{{0.7, 0}, {0.3, 0.33333}}"; }'
#+end_src

*Define window sizes using* =10= *×* =6= *cells*
#+begin_src sh
  defaults write -app Moom "Configuration Grid: Columns" -int 10
  defaults write -app Moom "Configuration Grid: Rows" -int 6
#+end_src

#+begin_src sh
  }
#+end_src

*** nvALT

**** General

#+begin_src sh
  function prefs_nvalt () {
    p "Set nvALT defaults (net.elasticthreads.nv)"
#+end_src

*List Text Size:* =Small=
#+begin_src sh
  defaults write -app nvALT TableFontPointSize -int 11
#+end_src

*Bring-to-Front Hotkey:* =(None)=
#+begin_src sh
  defaults write -app nvALT AppActivationKeyCode -int -1
  defaults write -app nvALT AppActivationModifiers -int -1
#+end_src

*Auto-select notes by title when searching:* =on=
#+begin_src sh
  defaults write -app nvALT AutoCompleteSearches -bool true
#+end_src

*Confirm note deletion:* =on=
#+begin_src sh
  defaults write -app nvALT ConfirmNoteDeletion -bool true
#+end_src

*Quit when closing window:* =off=
#+begin_src sh
  defaults write -app nvALT QuitWhenClosingMainWindow -bool false
#+end_src

*Show menu bar icon:* =on=
#+begin_src sh
  defaults write -app nvALT StatusBarItem -bool true
#+end_src

*Hide Dock Icon*
#+begin_src sh
  defaults write -app nvALT ShowDockIcon -bool false
#+end_src

**** Editing

*Styled Text: Copy basic styles from other apps:* =off=
#+begin_src sh
  defaults write -app nvALT PastePreservesStyle -bool false
#+end_src

*Spelling: Check as you type:* =off=
#+begin_src sh
  defaults write -app nvALT CheckSpellingInNoteBody -bool false
#+end_src

*Tab Key:* =Indent lines=
#+begin_src sh
  defaults write -app nvALT TabKeyIndents -bool true
#+end_src

*Soft tabs (spaces):* =on=
#+begin_src sh
  defaults write -app nvALT UseSoftTabs -bool true
#+end_src

*Links: Make URLs clickable links:* =on=
#+begin_src sh
  defaults write -app nvALT MakeURLsClickable -bool true
#+end_src

*Links: Suggest titles for note-links:* =off=
#+begin_src sh
  defaults write -app nvALT AutoSuggestLinks -bool false
#+end_src

*URL Import: Convert imported URLs to Markdown:* =off=
#+begin_src sh
  defaults write -app nvALT UseMarkdownImport -bool false
#+end_src

*URL Import: Process with Readability:* =off=
#+begin_src sh
  defaults write -app nvALT UseReadability -bool false
#+end_src

*Direction: Right-To-Left (RTL):* =off=
#+begin_src sh
  defaults write -app nvALT rtl -bool false
#+end_src

*Auto-pair:* =on=
#+begin_src sh
  defaults write -app nvALT UseAutoPairing -bool true
#+end_src

*External editor:* =Emacs.app=
#+begin_src sh
  defaults write -app nvALT DefaultEEIdentifier -string "org.gnu.Emacs"
  defaults write -app nvALT UserEEIdentifiers -array "com.apple.TextEdit" "org.gnu.Emacs"
#+end_src

**** Fonts & Colors

*Body Font:* =InconsolataLGC 13=
#+begin_src sh
  defaults write -app nvALT NoteBodyFont \
    -data 040b73747265616d747970656481e803840140848484064e53466f6e741e8484084e534f626a65637400858401692884055b3430635d060000001e000000fffe49006e0063006f006e0073006f006c006100740061004c004700430000008401660d8401630098019800980086
#+end_src

*Search Highlight:* =on=
#+begin_src sh
  defaults write -app nvALT HighlightSearchTerms -bool true
#+end_src

*Search Highlight:* =#CCFFCC=
#+begin_src sh
  defaults write -app nvALT SearchTermHighlightColor \
    -data 040b73747265616d747970656481e803840140848484074e53436f6c6f72008484084e534f626a65637400858401630184046666666683cdcc4c3f0183cdcc4c3f0186
#+end_src

*Foreground Text:* =#CCCCCC=
#+begin_src sh
  defaults write -app nvALT ForegroundTextColor \
    -data 040b73747265616d747970656481e803840140848484074e53436f6c6f72008484084e534f626a65637400858401630184046666666683cdcc4c3f83cdcc4c3f83cdcc4c3f0186
#+end_src

*Background:* =#1A1A1A=
#+begin_src sh
  defaults write -app nvALT BackgroundTextColor \
    -data 040b73747265616d747970656481e803840140848484074e53436f6c6f72008484084e534f626a65637400858401630184046666666683d1d0d03d83d1d0d03d83d1d0d03d0186
#+end_src

*Always Show Grid Lines in Notes List:* =on=
#+begin_src sh
  defaults write -app nvALT ShowGrid -bool true
#+end_src

*Alternating Row Colors:* =on=
#+begin_src sh
  defaults write -app nvALT AlternatingRows -bool true
#+end_src

*Use nvALT Scrollbars:* =off=
#+begin_src sh
  defaults write -app nvALT UseETScrollbarsOnLion -bool false
#+end_src

*Keep Note Body Width Readable:* =on=
#+begin_src sh
  defaults write -app nvALT KeepsMaxTextWidth -bool true
#+end_src

*Max. Note Body Width:* =650= *pixels*
#+begin_src sh
  defaults write -app nvALT NoteBodyMaxWidth -int 650
#+end_src

**** View

*Switch to Vertical Layout*
#+begin_src sh
  defaults write -app nvALT HorizontalLayout -bool false
#+end_src

*Columns* > =Title= =Tags=
#+begin_src sh
  defaults write -app nvALT NoteAttributesVisible -array "Title" "Tags"
#+end_src

*Sort By* > =Date Modified=
#+begin_src sh
  defaults write -app nvALT TableIsReverseSorted -bool true
  defaults write -app nvALT TableSortColumn -string "Date Modified"
#+end_src

*Show Note Previews in Title*
#+begin_src sh
  defaults write -app nvALT TableColumnsHaveBodyPreview -bool true
#+end_src

#+begin_src sh
  }
#+end_src

*** Safari

**** General

#+begin_src sh
  function prefs_safari () {
    p "Set Safari defaults (com.apple.Safari)"
#+end_src

*Safari opens with:* =A new window=
#+begin_src sh
  defaults write -app Safari AlwaysRestoreSessionAtLaunch -bool false
  defaults write -app Safari OpenPrivateWindowWhenNotRestoringSessionAtLaunch -bool false
#+end_src

*New windows open with:* =Empty Page=
#+begin_src sh
  defaults write -app Safari NewWindowBehavior -int 1
#+end_src

*New tabs open with:* =Empty Page=
#+begin_src sh
  defaults write -app Safari NewTabBehavior -int 1
#+end_src

=off= *Open “safe” files after downloading*
#+begin_src sh
  defaults write -app Safari AutoOpenSafeDownloads -bool false
#+end_src

**** Tabs

*Open pages in tabs instead of windows:* =Always=
#+begin_src sh
  defaults write -app Safari TabCreationPolicy -int 2
#+end_src

**** AutoFill

=off= *Using info from my contacts*
#+begin_src sh
  defaults write -app Safari AutoFillFromAddressBook -bool false
#+end_src

=on= *User names and passwords*
#+begin_src sh
  defaults write -app Safari AutoFillPasswords -bool true
#+end_src

=off= *Credit cards*
#+begin_src sh
  defaults write -app Safari AutoFillCreditCardData -bool false
#+end_src

=off= *Other forms*
#+begin_src sh
  defaults write -app Safari AutoFillMiscellaneousForms -bool false
#+end_src

**** Search

=on= *Include search engine suggestions*
#+begin_src sh
  defaults write -app Safari SuppressSearchSuggestions -bool false
#+end_src

*Smart Search Field:* =off= *Include Safari Suggestions*
#+begin_src sh
  defaults write -app Safari UniversalSearchEnabled -bool false
#+end_src

*Smart Search Field:* =on= *Enable Quick Website Search*
#+begin_src sh
  defaults write -app Safari WebsiteSpecificSearchEnabled -bool true
#+end_src

*Smart Search Field:* =on= *Preload Top Hit in the background*
#+begin_src sh
  defaults write -app Safari PreloadTopHit -bool true
#+end_src

=off= *Show Favorites*
#+begin_src sh
  defaults write -app Safari ShowFavoritesUnderSmartSearchField -bool false
#+end_src

**** Privacy

*Website use of location services:* =Deny without prompting=
#+begin_src sh
  defaults write -app Safari SafariGeolocationPermissionPolicy -int 0
#+end_src

*Website tracking:* =on= *Ask websites not to track me*
#+begin_src sh
  defaults write -app Safari SendDoNotTrackHTTPHeader -bool true
#+end_src

*Apple Pay:* =on= *Allow websites to check if Apple Pay is set up*
#+begin_src sh
  defaults write -app Safari "com.apple.Safari.ContentPageGroupIdentifier.WebKit2ApplePayCapabilityDisclosureAllowed" -bool true
#+end_src

**** Notifications

=off= *Allow websites to ask for permission to send push notifications*
#+begin_src sh
  defaults write -app Safari CanPromptForPushNotifications -bool false
#+end_src

**** Advanced

*Smart Search Field:* =on= *Show full website address*
#+begin_src sh
  defaults write -app Safari ShowFullURLInSmartSearchField -bool true
#+end_src

*Default encoding:* =Unicode (UTF-8)=
#+begin_src sh
  defaults write -app Safari WebKitDefaultTextEncodingName -string "utf-8"
  defaults write -app Safari "com.apple.Safari.ContentPageGroupIdentifier.WebKit2DefaultTextEncodingName" -string "utf-8"
#+end_src

=on= *Show Develop menu in menu bar*
#+begin_src sh
  defaults write -app Safari IncludeDevelopMenu -bool true
  defaults write -app Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true
  defaults write -app Safari "com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled" -bool true
#+end_src

**** View

*Show Favorites Bar*
#+begin_src sh
  defaults write -app Safari "ShowFavoritesBar-v2" -bool true
#+end_src

*Show Tab Bar*
#+begin_src sh
  defaults write -app Safari AlwaysShowTabBar -bool true
#+end_src

*Show Status Bar*
#+begin_src sh
  defaults write -app Safari ShowStatusBar -bool true
  defaults write -app Safari ShowStatusBarInFullScreen -bool true
#+end_src

#+begin_src sh
  }
#+end_src

*** System

**** General

#+begin_src sh
  function prefs_general () {
    p "Set System defaults"
#+end_src

*Appearance:* =Graphite= *For Buttons, Menus, and Windows*
#+begin_src sh
  defaults write -globalDomain AppleAquaColorVariant -int 6
#+end_src

=on= *Use dark menu bar and Dock*
#+begin_src sh
  defaults write -globalDomain AppleInterfaceStyle -string Dark
#+end_src

=off= *Automatically hide and show the menu bar*
#+begin_src sh
  defaults write -globalDomain "_HIHideMenuBar" -bool false
#+end_src

*Highlight color:* =#99CC99= =Other…=
#+begin_src sh
  defaults write -globalDomain AppleHighlightColor -string "0.600000 0.800000 0.600000"
#+end_src

*Sidebar icon size:* =Small=
#+begin_src sh
  defaults write -globalDomain NSTableViewDefaultSizeMode -int 1
#+end_src

*Show scroll bars:* =Always=
#+begin_src sh
  defaults write -globalDomain AppleShowScrollBars -string Always
#+end_src

*Click in the scroll bar to:* =Jump to the next page=
#+begin_src sh
  defaults write -globalDomain AppleScrollerPagingBehavior -bool false
#+end_src

=on= *Ask to keep changes when closing documents*
#+begin_src sh
  defaults write -globalDomain NSCloseAlwaysConfirmsChanges -bool true
#+end_src

=on= *Close windows when quitting an app*
#+begin_src sh
  defaults write -globalDomain NSQuitAlwaysKeepsWindows -bool false
#+end_src

*Recent items:* =None= *Documents, Apps, and Servers*
#+begin_src sh
  osascript << EOF
    tell application "System Events"
      tell appearance preferences
        set recent documents limit to 0
        set recent applications limit to 0
        set recent servers limit to 0
      end tell
    end tell
  EOF
#+end_src

=on= *Allow Handoff between this Mac and your iCloud devices*
#+begin_src sh
  defaults -currentHost write com.apple.coreservices.useractivityd ActivityAdvertisingAllowed -bool true
  defaults -currentHost write com.apple.coreservices.useractivityd ActivityReceivingAllowed -bool true
#+end_src

=on= *Use LCD font smoothing when available*
#+begin_src sh
  defaults -currentHost delete -globalDomain AppleFontSmoothing 2> /dev/null
#+end_src

#+begin_src sh
  }
#+end_src

**** Desktop & Screen Saver: Screen Saver

#+begin_src sh
  function prefs_screensaver () {
#+end_src

*Start after:* =Never=
#+begin_src sh
  defaults -currentHost write com.apple.screensaver idleTime -int 0
#+end_src

*Hot Corners…: Top Left:* =⌘ Mission Control=
#+begin_src sh
  defaults write com.apple.dock "wvous-tl-corner" -int 2
  defaults write com.apple.dock "wvous-tl-modifier" -int 1048576
#+end_src

*Hot Corners…: Bottom Left:* =Put Display to Sleep=
#+begin_src sh
  defaults write com.apple.dock "wvous-bl-corner" -int 10
  defaults write com.apple.dock "wvous-bl-modifier" -int 0
#+end_src

#+begin_src sh
  }
#+end_src

**** Dock

#+begin_src sh
  function prefs_dock () {
#+end_src

*Size:* =32=
#+begin_src sh
  defaults write com.apple.dock tilesize -int 32
#+end_src

=off= *Magnification*
#+begin_src sh
  defaults write com.apple.dock magnification -bool false
  defaults write com.apple.dock largesize -int 64
#+end_src

*Position on screen:* =Right=
#+begin_src sh
  defaults write com.apple.dock orientation -string right
#+end_src

*Minimize windows using:* =Scale effect=
#+begin_src sh
  defaults write com.apple.dock mineffect -string scale
#+end_src

*Prefer tabs when opening documents:* =Always=
#+begin_src sh
  defaults write -globalDomain AppleWindowTabbingMode -string always
#+end_src

=off= *Double-click a window’s title bar to* =None=
#+begin_src sh
  defaults write -globalDomain AppleActionOnDoubleClick -string None
#+end_src

=on= *Minimize windows into application icon*
#+begin_src sh
  defaults write com.apple.dock "minimize-to-application" -bool true
#+end_src

=off= *Animate opening applications*
#+begin_src sh
  defaults write com.apple.dock launchanim -bool false
#+end_src

=on= *Automatically hide and show the Dock*
#+begin_src sh
  defaults write com.apple.dock autohide -bool true
#+end_src

=on= *Show indicators for open applications*
#+begin_src sh
  defaults write com.apple.dock "show-process-indicators" -bool true
#+end_src

#+begin_src sh
  }
#+end_src

**** Security & Privacy

#+begin_src sh
  function prefs_security () {
#+end_src

General: =on= *Require password* =5 seconds= *after sleep or screen saver begins*
#+begin_src sh
  defaults write com.apple.screensaver askForPassword -int 1
  defaults write com.apple.screensaver askForPasswordDelay -int 5
#+end_src

FileVault: =Turn On FileVault=
#+begin_src sh
  p "Enable FileVault"

  sudo fdesetup enable
#+end_src

#+begin_src sh
  }
#+end_src

**** Energy Saver: Power

#+begin_src sh
  function prefs_power () {
#+end_src

*Turn display off after:* =20 min=
#+begin_src sh
  sudo pmset -c displaysleep 20
#+end_src

=on= *Prevent computer from sleeping automatically when the display is off*
#+begin_src sh
  sudo pmset -c sleep 0
#+end_src

=60 min= *Put hard disks to sleep when possible*
#+begin_src sh
  sudo pmset -c disksleep 60
#+end_src

=on= *Wake for network access*
#+begin_src sh
  sudo pmset -c womp 1
#+end_src

=on= *Start up automatically after a power failure*
#+begin_src sh
  sudo pmset -c autorestart 1
#+end_src

=on= *Enable Power Nap*
#+begin_src sh
  sudo pmset -c powernap 1
#+end_src

#+begin_src sh
  }
#+end_src

**** Energy Saver: UPS

#+begin_src sh
  function prefs_ups () {
#+end_src

*Turn display off after:* =2 min=
#+begin_src sh
  sudo pmset -u displaysleep 2
#+end_src

=on= *Slightly dim the display when using this power source*
#+begin_src sh
  sudo pmset -u lessbright 1
#+end_src

=on= *Shut down the computer after using the UPS battery for:* =5 min=
#+begin_src sh
  sudo pmset -u haltafter 5
#+end_src

=off= *Shut down the computer when the time remaining on the UPS battery is:*
#+begin_src sh
  sudo pmset -u haltremain -1
#+end_src

=off= *Shut down the computer when the UPS battery level is below:*
#+begin_src sh
  sudo pmset -u haltlevel -1
#+end_src

#+begin_src sh
  }
#+end_src

**** Keyboard: Keyboard

#+begin_src sh
  function prefs_modkeys () {
    defaults -currentHost write -globalDomain \
      "com.apple.keyboard.modifiermapping.1452-591-0" -array-add \
        '{ HIDKeyboardModifierMappingDst = 0;
          HIDKeyboardModifierMappingSrc = 30064771129;
        }'
  }
#+end_src

**** Keyboard: Text

#+begin_src sh
  function prefs_text () {
#+end_src

#+begin_src sh
  defaults write -globalDomain \
    NSUserDictionaryReplacementItems -array-add \
      '{ on = 1;
         replace = "**";
         with = "\\Ud83d\\Ude18\\Ud83d\\Ude18\\Ud83d\\Ude18\\Ud83d\\Ude0d";
      }'
#+end_src

=off= *Capitalize words automatically*
#+begin_src sh
  defaults write -globalDomain NSAutomaticCapitalizationEnabled -bool false
#+end_src

=off= *Add period with double-space*
#+begin_src sh
  defaults write -globalDomain NSAutomaticPeriodSubstitutionEnabled -bool false
#+end_src

=off= *Use smart quotes and dashes*
#+begin_src sh
  defaults write -globalDomain NSAutomaticQuoteSubstitutionEnabled -bool false
#+end_src

#+begin_src sh
  }
#+end_src

**** Keyboard: Shortcuts

#+begin_src sh
  function prefs_shortcuts () {
#+end_src

*Spotlight:* =off= *Show Spotlight search*
#+begin_src sh
  /usr/libexec/PlistBuddy -c "add ':AppleSymbolicHotKeys' dict" \
    "${HOME}/Library/Preferences/com.apple.symbolichotkeys.plist"
  /usr/libexec/PlistBuddy -c "add ':AppleSymbolicHotKeys:64' dict" \
    "${HOME}/Library/Preferences/com.apple.symbolichotkeys.plist"
  /usr/libexec/PlistBuddy -c "add ':AppleSymbolicHotKeys:64:enabled' bool false" \
    "${HOME}/Library/Preferences/com.apple.symbolichotkeys.plist"
#+end_src

*Spotlight:* =off= *Show Finder search window*
#+begin_src sh
  /usr/libexec/PlistBuddy -c "add ':AppleSymbolicHotKeys:65' dict" \
    "${HOME}/Library/Preferences/com.apple.symbolichotkeys.plist"
  /usr/libexec/PlistBuddy -c "add ':AppleSymbolicHotKeys:65:enabled' bool false" \
    "${HOME}/Library/Preferences/com.apple.symbolichotkeys.plist"
#+end_src

#+begin_src sh
  }
#+end_src

**** Keyboard: Dictation

#+begin_src sh
  function prefs_dictation () {
#+end_src

*Dictation:* =On=
#+begin_src sh
  defaults write com.apple.speech.recognition.AppleSpeechRecognition.prefs \
    DictationIMMasterDictationEnabled -bool true
#+end_src

*Shortcut:* =Press Either Command Key Twice=
#+begin_src sh
  defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys \
    -dict-add 164 '{ enabled = 1; value = { parameters = ( 1048576, 18446744073708503039 ); type = modifier; }; }'
#+end_src

#+begin_src sh
  }
#+end_src

**** Mouse

#+begin_src sh
  function prefs_mouse () {
#+end_src

=off= *Scroll direction: Natural*
#+begin_src sh
  defaults write -globalDomain com.apple.swipescrolldirection -bool false
#+end_src

#+begin_src sh
  }
#+end_src

**** Trackpad: Point & Click

#+begin_src sh
  function prefs_trackpad () {
#+end_src

=on= *Tap to click*
#+begin_src sh
  defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
  defaults -currentHost write -globalDomain com.apple.mouse.tapBehavior -int 1
#+end_src

#+begin_src sh
  }
#+end_src

**** Sound: Sound Effects

#+begin_src sh
  function prefs_sound () {
#+end_src

*Select an alert sound:* =Sosumi=
#+begin_src sh
  defaults write -globalDomain "com.apple.sound.beep.sound" -string "/System/Library/Sounds/Sosumi.aiff"
#+end_src

=off= *Play user interface sound effects*
#+begin_src sh
  defaults write -globalDomain "com.apple.sound.uiaudio.enabled" -int 0
#+end_src

=off= *Play feedback when volume is changed*
#+begin_src sh
  defaults write -globalDomain "com.apple.sound.beep.feedback" -int 0
#+end_src

#+begin_src sh
  }
#+end_src

**** App Store

#+begin_src sh
  function prefs_mas () {
#+end_src

=on= *Install app updates*
#+begin_src sh
  sudo defaults write /Library/Preferences/com.apple.commerce AutoUpdate -bool true
#+end_src

=on= *Install macOS updates*
#+begin_src sh
  sudo defaults write /Library/Preferences/com.apple.commerce AutoUpdateRestartRequired -bool true
#+end_src

#+begin_src sh
  }
#+end_src

**** Network: Wi-Fi

=off= Show Wi-Fi status in menu bar
#+begin_src sh
  function prefs_wifi () {
    defaults -currentHost write com.apple.systemuiserver dontAutoLoad -array-add "/System/Library/CoreServices/Menu Extras/AirPort.menu"
  }
#+end_src

**** Sharing: File Sharing

*Shared Folders:* =None=
#+begin_src sh
  function prefs_sharing () {
    sudo dscl . -delete "/SharePoints"
  }
#+end_src

**** Users & Groups: Guest User

=off= Allow guests to log in to this computer
#+begin_src sh
  function prefs_guest () {
    sudo sysadminctl -guestAccount off
  }
#+end_src

**** Users & Groups: Login Options

*Display login window as:* =Name and password=
#+begin_src sh
  function prefs_login () {
    sudo defaults write /Library/Preferences/com.apple.loginwindow SHOWFULLNAME -bool true
  }
#+end_src

**** Siri

#+begin_src sh
  function prefs_siri () {
#+end_src

*Siri Voice:* =American (Male)=
#+begin_src sh
  defaults write com.apple.assistant.backedup "Output Voice" \
    '{ Custom = 1;
       Footprint = 0;
       Gender = 1;
       Language = "en-US";
    }'
#+end_src

=off= Show Siri in menu bar
#+begin_src sh
  defaults write com.apple.Siri StatusMenuVisible -bool false
#+end_src

#+begin_src sh
  }
#+end_src

**** Date & Time: Clock

=off= *Show date and time in menu bar*

=on= *Time options: Display the time with seconds*

=on= *Time options: Show AM/PM*

=on= *Date options: Show the day of the week*

=on= *Date options: Show date*
#+begin_src sh
  function prefs_clock () {
    defaults -currentHost write com.apple.systemuiserver dontAutoLoad -array-add "/System/Library/CoreServices/Menu Extras/Clock.menu"
    defaults write com.apple.menuextra.clock DateFormat -string "EEE MMM d  h:mm:ss a"
  }
#+end_src

**** Accessibility: Display

=on= *Reduce transparency*
#+begin_src sh
  function prefs_accessibility () {
    defaults write com.apple.universalaccess reduceTransparency -bool true
  }
#+end_src

**** Accessibility: Speech

# System Voice: Allison
#+begin_src sh
  function prefs_speech () {
    if [ -d "/System/Library/Speech/Voices/Allison.SpeechVoice" ]; then
      defaults write com.apple.speech.voice.prefs VisibleIdentifiers '{ "com.apple.speech.synthesis.voice.allison.premium" = 1; }'
      defaults write com.apple.speech.voice.prefs SelectedVoiceName -string Allison
      defaults write com.apple.speech.voice.prefs SelectedVoiceCreator -int 1886745202
      defaults write com.apple.speech.voice.prefs SelectedVoiceID -int 184555197
    fi
  }
#+end_src

#+begin_src sh
  function prefs_restart () {
    killall cfprefsd
    osascript -e 'tell app "Finder" to quit'
    killall Finder
  }
#+end_src

*** VLC

#+begin_src sh
  function prefs_vlc () {
    p "Set VLC defaults (org.videolan.vlc)"

    defaults write -app VLC SUEnableAutomaticChecks -bool true
    defaults write -app VLC SUHasLaunchedBefore -bool true
    defaults write -app VLC SUSendProfileInfo -bool true

    if [ ! -d "${HOME}/Library/Preferences/org.videolan.vlc" ]; then
      mkdir -m go= -p "${HOME}/Library/Preferences/org.videolan.vlc"
    fi

    cat > "${HOME}/Library/Preferences/org.videolan.vlc/vlcrc" << EOF
  avcodec-hw=vda
  macosx-appleremote=0
  macosx-continue-playback=1
  macosx-nativefullscreenmode=1
  macosx-pause-minimized=1
  macosx-video-autoresize=0
  metadata-network-access=1
  spdif=1
  sub-language=English
  subsdec-encoding=UTF-8
  volume-save=0
  EOF
  }
#+end_src

*** prefs

#+begin_src sh
  function prefs () {
    prefs_autoping
    prefs_finder
    prefs_moom
    prefs_nvalt
    prefs_safari

    prefs_general
    prefs_screensaver
    prefs_dock
    prefs_security
    prefs_power
    prefs_ups
    prefs_modkeys
    prefs_text
    prefs_shortcuts
    prefs_dictation
    prefs_mouse
    prefs_trackpad
    prefs_sound
    prefs_mas
    prefs_wifi
    prefs_sharing
    prefs_guest
    prefs_login
    prefs_siri
    prefs_clock
    prefs_accessibility
    prefs_speech

    prefs_restart

    prefs_vlc

    which config
  }
#+end_src

** Configuration

*** App Store

#+begin_src sh
  function config_mas () {
    p "Save App Store packages"

    cat > "/usr/local/bin/mas_save" << EOF
  #!/bin/sh
  DIR="/Users/Shared/App Store"
  MAS="\$(getconf DARWIN_USER_CACHE_DIR)com.apple.appstore"

  mkdir -m go= -p "\${DIR}"
  for a in \$(find "\${MAS}" -iname "[0-9]*" -type d); do
    b="\${DIR}/\$(basename \$a)"
    mkdir -m go= -p "\${b}"
    end=\$(( \$(date +%s) + 5 ))
    while [ \$(date +%s) -lt \$end ]; do
      for c in \${a}/*; do
        d="\$(basename \$c)"
        if [ ! -e "\${b}/\${d}" ]; then
          ln "\${a}/\${d}" "\${b}/\${d}"
        fi
      done
    done
  done
  EOF

    chmod a+x "/usr/local/bin/mas_save"
    rehash
#+end_src

#+begin_src sh
  mkdir -m go= -p "${HOME}/Library/LaunchAgents"
  launchctl unload "${HOME}/Library/LaunchAgents/com.github.ptb.mas_save.plist" 2> /dev/null
  printf "%s\n" \
    "add ':KeepAlive' bool false" \
    "add ':Label' string 'com.github.ptb.mas_save'" \
    "add ':Program' string '/usr/local/bin/mas_save'" \
    "add ':RunAtLoad' bool true" \
    "add ':WatchPaths' array" \
    "add ':WatchPaths:0' string '$(getconf DARWIN_USER_CACHE_DIR)com.apple.appstore'" \
  | while IFS=$'\t' read a; do
    /usr/libexec/PlistBuddy "${HOME}/Library/LaunchAgents/com.github.ptb.mas_save.plist" -c "${a}" &> /dev/null
  done
#+end_src

#+begin_src sh
  }
#+end_src

*** Atom

Inspiration: [[https://evanhahn.com/atom-apm-install-list/][@EvanHahn]]

#+begin_src sh
  function config_atom () {
    p "Install Atom packages"

    for a in \
      "MagicPython" \
      "atom-beautify" \
      "atom-css-comb" \
      "atom-jade" \
      "atom-wallaby" \
      "autoclose-html" \
      "autocomplete-python" \
      "busy-signal" \
      "double-tag" \
      "editorconfig" \
      "ex-mode" \
      "file-icons" \
      "git-plus" \
      "git-time-machine" \
      "highlight-selected" \
      "intentions" \
      "language-docker" \
      "language-jade" \
      "language-javascript-jsx" \
      "language-lisp" \
      "language-slim" \
      "linter" \
      "linter-eslint" \
      "linter-rubocop" \
      "linter-ui-default" \
      "python-yapf" \
      "react" \
      "riot" \
      "sort-lines" \
      "term3" \
      "tomorrow-night-eighties-syntax" \
      "tree-view-open-files" \
      "vim-mode" \
      "vim-mode-zz" \
      "vim-surround" \
    ; do
      apm install "${a}"
    done

  cat > "${HOME}/.atom/packages/tomorrow-night-eighties-syntax/styles/colors.less" \
    << EOF
  @background: #222222;
  @current-line: #333333;
  @selection: #4c4c4c;
  @foreground: #cccccc;
  @comment: #999999;
  @red: #f27f7f;
  @orange: #ff994c;
  @yellow: #ffcc66;
  @green: #99cc99;
  @aqua: #66cccc;
  @blue: #6699cc;
  @purple: #cc99cc;
  EOF
  }
#+end_src

*** BBEdit

#+begin_src sh
  function config_bbedit () {
    if [ -d "/Applications/BBEdit.app" ]; then
      p "Install BBEdit tools"

      cd /usr/local/bin && \
      ln ../../../Applications/BBEdit.app/Contents/Helpers/bbdiff bbdiff && \
      ln ../../../Applications/BBEdit.app/Contents/Helpers/bbedit_tool bbedit && \
      ln ../../../Applications/BBEdit.app/Contents/Helpers/bbfind bbfind && \
      ln ../../../Applications/BBEdit.app/Contents/Helpers/bbresults bbresults && \
      cd "${HOME}"
    fi
  }
#+end_src

*** Desktop

#+begin_src sh
  function config_desktop () {
    p "Set Desktop preferences"
#+end_src

*Desktop: Solid Colors: Custom Color…* =Solid Black=
#+begin_src sh
  sudo rm "/Library/Caches/com.apple.desktop.admin.png"
  base64 -D > "/Library/Caches/com.apple.desktop.admin.png" <<< "iVBORw0KGgoAAAANSUhEUgAAAIAAAACAAQAAAADrRVxmAAAAGElEQVR4AWOgMxgFo2AUjIJRMApGwSgAAAiAAAH3bJXBAAAAAElFTkSuQmCC"

  osascript << EOF
    tell application "System Events"
      set a to POSIX file "/Library/Caches/com.apple.desktop.admin.png"
      set b to a reference to every desktop
      repeat with c in b
        set picture of c to a
      end repeat
    end tell
  EOF
#+end_src

*Screen Saver:* =BlankScreen=
#+begin_src sh
  if [ -e "/Library/Screen Savers/BlankScreen.saver" ]; then
    p "Set Screen Saver preferences"

    defaults -currentHost write com.apple.screensaver moduleDict \
      '{ moduleName = "BlankScreen"; path = "/Library/Screen Savers/BlankScreen.saver"; type = 0; }'
  fi
#+end_src

#+begin_src sh
  }
#+end_src

*** Dock

#+begin_src sh
  function config_dock () {
    p "Set Dock preferences"

    defaults write com.apple.dock "autohide-delay" -float 0
    defaults write com.apple.dock "autohide-time-modifier" -float 0.5

    defaults delete com.apple.dock "persistent-apps"

    for app in \
      "nvALT" \
      "Mail" \
      "Safari" \
      "Messages" \
      "Emacs" \
      "Atom" \
      "Utilities/Terminal" \
      "System Preferences" \
      "PCalc" \
      "iTunes" \
      "VLC" \
    ; do
      defaults write com.apple.dock "persistent-apps" -array-add \
        "<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/${app}.app/</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>"
    done

    defaults delete com.apple.dock "persistent-others"

    osascript -e 'tell app "Dock" to quit'
  }
#+end_src

*** Emacs

**** Download [[http://spacemacs.org/][Spacemacs]]

#+begin_src sh
function config_emacs () {
  p "Configure Emacs"

  mkdir -m go= -p "${HOME}/.emacs.d" \
    && curl --compressed --location --silent \
      "https://github.com/syl20bnr/spacemacs/archive/master.tar.gz" \
    | tar -C "${HOME}/.emacs.d" --strip-components 1 -xf -
  mkdir -m go= -p "${HOME}/.emacs.d/private/ptb"
#+end_src

**** Create =~/.spacemacs=

#+begin_src sh
  cat > "${HOME}/.spacemacs" << EOF
  (defun dotspacemacs/layers ()
    (setq-default
      dotspacemacs-configuration-layers '(
        auto-completion
        (colors :variables
          colors-colorize-identifiers 'variables)
        dash
        deft
        docker
        emacs-lisp
        evil-cleverparens
        git
        github
        helm
        html
        ibuffer
        imenu-list
        javascript
        markdown
        nginx
        (org :variables
          org-enable-github-support t)
        (osx :variables
          osx-use-option-as-meta nil)
        ptb
        react
        ruby
        ruby-on-rails
        search-engine
        semantic
        shell-scripts
        (spell-checking :variables
          spell-checking-enable-by-default nil)
        syntax-checking
        (version-control :variables
          version-control-diff-side 'left)
        vim-empty-lines
      )
      dotspacemacs-excluded-packages '(org-bullets)
    )
  )

  (defun dotspacemacs/init ()
    (setq-default
      dotspacemacs-startup-banner nil
      dotspacemacs-startup-lists nil
      dotspacemacs-scratch-mode 'org-mode
      dotspacemacs-themes '(sanityinc-tomorrow-eighties)
      dotspacemacs-default-font '(
        "Inconsolata LGC"
        :size 13
        :weight normal
        :width normal
        :powerline-scale 1.1)
      dotspacemacs-loading-progress-bar nil
      dotspacemacs-active-transparency 100
      dotspacemacs-inactive-transparency 100
      dotspacemacs-line-numbers t
      dotspacemacs-whitespace-cleanup 'all
    )
  )

  (defun dotspacemacs/user-init ())
  (defun dotspacemacs/user-config ())
  EOF
#+end_src

**** Create =~/.emacs.d/private/ptb/config.el=

#+begin_src sh
  cat > "${HOME}/.emacs.d/private/ptb/config.el" << EOF
  (setq
    default-frame-alist '(
      (top . 22)
      (left . 1790)
      (height . 40)
      (width . 91)
      (vertical-scroll-bars . right))
    initial-frame-alist (copy-alist default-frame-alist)

    deft-directory "~/Dropbox/Notes"
    focus-follows-mouse t
    mouse-wheel-follow-mouse t
    mouse-wheel-scroll-amount '(1 ((shift) . 1))
    purpose-display-at-right 20
    recentf-max-saved-items 5
    scroll-step 1
    system-uses-terminfo nil

    ibuffer-formats '(
      (mark modified read-only " "
      (name 18 18 :left :elide)))

    ibuffer-shrink-to-minimum-size t
    ibuffer-always-show-last-buffer nil
    ibuffer-sorting-mode 'recency
    ibuffer-use-header-line nil
    x-select-enable-clipboard nil)

  (global-linum-mode t)
  (recentf-mode t)
  (x-focus-frame nil)
  (with-eval-after-load 'org
    (org-babel-do-load-languages
      'org-babel-load-languages '(
        (ruby . t)
        (shell . t)
      )
    )
  )
  EOF
#+end_src

**** Create =~/.emacs.d/private/ptb/funcs.el=

#+begin_src sh
  cat > "${HOME}/.emacs.d/private/ptb/funcs.el" << EOF
  (defun is-useless-buffer (buffer)
    (let ((name (buffer-name buffer)))
      (and (= ?* (aref name 0))
          (string-match "^\\**" name))))

  (defun kill-useless-buffers ()
    (interactive)
    (loop for buffer being the buffers
          do (and (is-useless-buffer buffer) (kill-buffer buffer))))

  (defun org-babel-tangle-hook ()
    (add-hook 'after-save-hook 'org-babel-tangle))

  (add-hook 'org-mode-hook #'org-babel-tangle-hook)

  (defun ptb/new-untitled-buffer ()
    "Create a new untitled buffer in the current frame."
    (interactive)
    (let
      ((buffer "Untitled-") (count 1))
      (while
        (get-buffer (concat buffer (number-to-string count)))
        (setq count (1+ count)))
      (switch-to-buffer
      (concat buffer (number-to-string count))))
    (org-mode))

  (defun ptb/previous-buffer ()
    (interactive)
    (kill-useless-buffers)
    (previous-buffer))

  (defun ptb/next-buffer ()
    (interactive)
    (kill-useless-buffers)
    (next-buffer))

  (defun ptb/kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer))
    (kill-useless-buffers))
  EOF
#+end_src

**** Create =~/.emacs.d/private/ptb/keybindings.el=

#+begin_src sh
  cat > "${HOME}/.emacs.d/private/ptb/keybindings.el" << EOF
  (define-key evil-insert-state-map (kbd "<return>") 'newline)

  (define-key evil-normal-state-map (kbd "s-c") 'clipboard-kill-ring-save)
  (define-key evil-insert-state-map (kbd "s-c") 'clipboard-kill-ring-save)
  (define-key evil-visual-state-map (kbd "s-c") 'clipboard-kill-ring-save)

  (define-key evil-ex-completion-map (kbd "s-v") 'clipboard-yank)
  (define-key evil-ex-search-keymap (kbd "s-v") 'clipboard-yank)
  (define-key evil-insert-state-map (kbd "s-v") 'clipboard-yank)

  (define-key evil-normal-state-map (kbd "s-x") 'clipboard-kill-region)
  (define-key evil-insert-state-map (kbd "s-x") 'clipboard-kill-region)
  (define-key evil-visual-state-map (kbd "s-x") 'clipboard-kill-region)

  (define-key evil-normal-state-map (kbd "<S-up>") 'evil-previous-visual-line)
  (define-key evil-insert-state-map (kbd "<S-up>") 'evil-previous-visual-line)
  (define-key evil-visual-state-map (kbd "<S-up>") 'evil-previous-visual-line)

  (define-key evil-normal-state-map (kbd "<S-down>") 'evil-next-visual-line)
  (define-key evil-insert-state-map (kbd "<S-down>") 'evil-next-visual-line)
  (define-key evil-visual-state-map (kbd "<S-down>") 'evil-next-visual-line)

  (global-set-key (kbd "C-l") 'evil-search-highlight-persist-remove-all)

  (global-set-key (kbd "s-t") 'make-frame)
  (global-set-key (kbd "s-n") 'ptb/new-untitled-buffer)
  (global-set-key (kbd "s-w") 'ptb/kill-this-buffer)
  (global-set-key (kbd "s-{") 'ptb/previous-buffer)
  (global-set-key (kbd "s-}") 'ptb/next-buffer)
  EOF
#+end_src

**** Create =~/.emacs.d/private/ptb/packages.el=

#+begin_src sh
  cat > "${HOME}/.emacs.d/private/ptb/packages.el" << EOF
  (setq ptb-packages '(adaptive-wrap auto-indent-mode inline-crypt))

  (defun ptb/init-adaptive-wrap ()
    "Load the adaptive wrap package"
    (use-package adaptive-wrap
      :init
      (setq adaptive-wrap-extra-indent 2)
      :config
      (progn
        ;; http://stackoverflow.com/questions/13559061
        (when (fboundp 'adaptive-wrap-prefix-mode)
          (defun ptb/activate-adaptive-wrap-prefix-mode ()
            "Toggle 'visual-line-mode' and 'adaptive-wrap-prefix-mode' simultaneously."
            (adaptive-wrap-prefix-mode (if visual-line-mode 1 -1)))
          (add-hook 'visual-line-mode-hook 'ptb/activate-adaptive-wrap-prefix-mode)))))

  (defun ptb/init-auto-indent-mode ()
    (use-package auto-indent-mode
      :init
      (setq
        auto-indent-delete-backward-char t
        auto-indent-fix-org-auto-fill t
        auto-indent-fix-org-move-beginning-of-line t
        auto-indent-fix-org-return t
        auto-indent-fix-org-yank t
        auto-indent-start-org-indent t
      )
    )
  )

  (defun ptb/init-inline-crypt ()
    (use-package inline-crypt :init))
  EOF
#+end_src

#+begin_src sh
  }
#+end_src

**** Create =/usr/local/bin/vi=

#+begin_src sh
  function config_vi_script () {
    p "Create vi script"

    cat > /usr/local/bin/vi <<-EOF
  #!/bin/sh

  if [ -e "/Applications/Emacs.app" ]; then
    t=()

    if [ \${#@} -ne 0 ]; then
      while IFS= read -r file; do
        [ ! -f "\$file" ] && t+=("\$file") && /usr/bin/touch "\$file"
        file=\$(echo \$(cd \$(dirname "\$file") && pwd -P)/\$(basename "\$file"))
        \$(/usr/bin/osascript <<-END
          if application "Emacs.app" is running then
            tell application id (id of application "Emacs.app") to open POSIX file "\$file"
          else
            tell application ((path to applications folder as text) & "Emacs.app")
              activate
              open POSIX file "\$file"
            end tell
          end if
  END
          ) &  # Note: END on the previous line may be indented with tabs but not spaces
        done <<<"\$(printf '%s\n' "\$@")"
      fi

      if [ ! -z "\$t" ]; then
        \$(/bin/sleep 10; for file in "\${t[@]}"; do
          [ ! -s "\$file" ] && /bin/rm "\$file";
        done) &
      fi
    else
      vim -No "\$@"
    fi
  EOF

    chmod a+x /usr/local/bin/vi
    rehash
  }
#+end_src

*** iStat Menus
:properties:
:header-args+: :padline no
:end:

#+begin_src sh
  function config_istat () {
    p "Set iStat Menu preferences"

    printf "%s\t%s\t%s\n" \
#+end_src

#+begin_src sh
  "MenubarSkinColor" "-int" "8" \
  "MenubarTheme" "-int" "0" \
  "DropdownTheme" "-int" "1" \
#+end_src

#+begin_src sh
  "CPU_MenubarMode" "-string" "100,2,0" \
  "CPU_MenubarTextSize" "-int" "14" \
  "CPU_MenubarGraphShowBackground" "-int" "0" \
  "CPU_MenubarGraphWidth" "-int" "32" \
  "CPU_MenubarGraphBreakdowns" "-int" "0" \
  "CPU_MenubarGraphCustomColors" "-int" "0" \
  "CPU_MenubarGraphOverall" "-string" "0.40 0.60 0.40 1.00" \
  "CPU_MenubarCombineCores" "-int" "1" \
  "CPU_MenubarGroupItems" "-int" "0" \
  "CPU_MenubarSingleHistoryGraph" "-int" "0" \
  "CPU_CombineLogicalCores" "-int" "1" \
  "CPU_AppFormat" "-int" "0" \
#+end_src

#+begin_src sh
  "Memory_MenubarMode" "-string" "100,2,6" \
  "Memory_MenubarPercentageSize" "-int" "14" \
  "Memory_MenubarGraphBreakdowns" "-int" "1" \
  "Memory_MenubarGraphCustomColors" "-int" "0" \
  "Memory_MenubarGraphOverall" "-string" "0.40 0.60 0.40 1.00" \
  "Memory_MenubarGraphWired" "-string" "0.40 0.60 0.40 1.00" \
  "Memory_MenubarGraphActive" "-string" "0.47 0.67 0.47 1.00" \
  "Memory_MenubarGraphCompressed" "-string" "0.53 0.73 0.53 1.00" \
  "Memory_MenubarGraphInactive" "-string" "0.60 0.80 0.60 1.00" \
  "Memory_IgnoreInactive" "-int" "0" \
  "Memory_AppFormat" "-int" "0" \
  "Memory_DisplayFormat" "-int" "1" \
#+end_src

#+begin_src sh
  "Disks_MenubarMode" "-string" "100,9,8" \
  "Disks_MenubarGroupItems" "-int" "1" \
  "Disks_MenubarRWShowLabel" "-int" "1" \
  "Disks_MenubarRWBold" "-int" "0" \
  "Disks_MenubarGraphActivityWidth" "-int" "32" \
  "Disks_MenubarGraphActivityShowBackground" "-int" "0" \
  "Disks_MenubarGraphActivityCustomColors" "-int" "0" \
  "Disks_MenubarGraphActivityRead" "-string" "0.60 0.80 0.60 1.00" \
  "Disks_MenubarGraphActivityWrite" "-string" "0.40 0.60 0.40 1.00" \
  "Disks_SeperateFusion" "-int" "1" \
#+end_src

#+begin_src sh
  "Network_MenubarMode" "-string" "4,0,1" \
  "Network_TextUploadColor-Dark" "-string" "1.00 1.00 1.00 1.00" \
  "Network_TextDownloadColor-Dark" "-string" "1.00 1.00 1.00 1.00" \
  "Network_GraphWidth" "-int" "32" \
  "Network_GraphShowBackground" "-int" "0" \
  "Network_GraphCustomColors" "-int" "0" \
  "Network_GraphUpload" "-string" "0.60 0.80 0.60 1.00" \
  "Network_GraphDownload" "-string" "0.40 0.60 0.40 1.00" \
  "Network_GraphMode" "-int" "1" \
#+end_src

#+begin_src sh
  "Battery_MenubarMode" "-string" "5,0" \
  "Battery_ColorGraphCustomColors" "-int" "1" \
  "Battery_ColorGraphCharged" "-string" "0.40 0.60 0.40 1.00" \
  "Battery_ColorGraphCharging" "-string" "0.60 0.80 0.60 1.00" \
  "Battery_ColorGraphDraining" "-string" "1.00 0.60 0.60 1.00" \
  "Battery_ColorGraphLow" "-string" "1.00 0.20 0.20 1.00" \
  "Battery_PercentageSize" "-int" "14" \
  "Battery_MenubarCustomizeStates" "-int" "0" \
  "Battery_MenubarHideBluetooth" "-int" "1" \
#+end_src

#+begin_src sh
  "Time_MenubarFormat" "-array-add" "EE" \
  "Time_MenubarFormat" "-array-add" " " \
  "Time_MenubarFormat" "-array-add" "MMM" \
  "Time_MenubarFormat" "-array-add" " " \
  "Time_MenubarFormat" "-array-add" "d" \
  "Time_MenubarFormat" "-array-add" " " \
  "Time_MenubarFormat" "-array-add" "h" \
  "Time_MenubarFormat" "-array-add" ":" \
  "Time_MenubarFormat" "-array-add" "mm" \
  "Time_MenubarFormat" "-array-add" ":" \
  "Time_MenubarFormat" "-array-add" "ss" \
  "Time_MenubarFormat" "-array-add" " " \
  "Time_MenubarFormat" "-array-add" "a" \
#+end_src

#+begin_src sh
  "Time_DropdownFormat" "-array-add" "EE" \
  "Time_DropdownFormat" "-array-add" " " \
  "Time_DropdownFormat" "-array-add" "h" \
  "Time_DropdownFormat" "-array-add" ":" \
  "Time_DropdownFormat" "-array-add" "mm" \
  "Time_DropdownFormat" "-array-add" " " \
  "Time_DropdownFormat" "-array-add" "a" \
  "Time_DropdownFormat" "-array-add" "' ('" \
  "Time_DropdownFormat" "-array-add" "zzz" \
  "Time_DropdownFormat" "-array-add" "')'" \
#+end_src

#+begin_src sh
  "Time_Cities" "-array-add" "4930956" \
  "Time_Cities" "-array-add" "4887398" \
  "Time_Cities" "-array-add" "5419384" \
  "Time_Cities" "-array-add" "5392171" \
  "Time_Cities" "-array-add" "5879400" \
  "Time_Cities" "-array-add" "5856195" \
  "Time_TextSize" "-int" "14" \
#+end_src

#+begin_src sh
  | while IFS=$'\t' read a b c; do
    defaults write com.bjango.istatmenus5.extras "$a" $b "$c"
  done
#+end_src

#+begin_src sh
  }
#+end_src

*** Terminal
:properties:
:header-args+: :padline no
:end:

Inspiration: [[https://github.com/ChrisKempson/Tomorrow-Theme#tomorrow-night-eighties][@chriskempson]], [[https://apple.stackexchange.com/a/98843][@user495470]], & [[https://github.com/reitermarkus/dotfiles/blob/master/include/settings/terminal.sh][@reitermarkus]]

**** General

#+begin_src sh
  function config_terminal () {
    p "Configure Terminal defaults (com.apple.Terminal)"
#+end_src

*On startup, open: New window with profile:* =ptb=
#+begin_src sh
  defaults write -app Terminal "Startup Window Settings" -string "$(whoami)"
#+end_src

**** Profiles

#+begin_src sh
  defaults write -app Terminal "Default Window Settings" -string "$(whoami)"

  /usr/libexec/PlistBuddy -c "delete ':Window Settings:$(whoami)'" \
    "${HOME}/Library/Preferences/com.apple.Terminal.plist" &> /dev/null

  for terminal_prop in \
#+end_src

#+begin_src sh
  " dict" \
  ":name string '$(whoami)'" \
  ":type string 'Window Settings'" \
  ":ProfileCurrentVersion real 2.05" \
#+end_src

**** Text

#+begin_src sh
  ':BackgroundColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC4xIDAuMSAwLjE=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ":BackgroundBlur real 0" \
  ":BackgroundSettingsForInactiveWindows bool false" \
  ":BackgroundAlphaInactive real 1" \
  ":BackgroundBlurInactive real 0" \
  ':Font data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>3</integer></dict><key>NSName</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSSize</key><real>13</real><key>NSfFlags</key><integer>16</integer></dict><string>InconsolataLGC</string><dict><key>$classes</key><array><string>NSFont</string><string>NSObject</string></array><key>$classname</key><string>NSFont</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ":FontWidthSpacing real 1" \
  ":FontHeightSpacing real 1" \
  ":FontAntialias bool true" \
  ":UseBoldFonts bool true" \
  ":BlinkText bool false" \
  ":DisableANSIColor bool false" \
  ":UseBrightBold bool false" \
  ':TextColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDAuOCAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':TextBoldColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDAuOCAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':SelectionColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC4zIDAuMyAwLjM=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBlackColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC4zIDAuMyAwLjM=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIRedColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC45NSAwLjUgMC41</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIGreenColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC42IDAuOCAwLjY=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIYellowColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MSAwLjggMC40</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBlueColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC40IDAuNiAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIMagentaColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDAuNiAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSICyanColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC40IDAuOCAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIWhiteColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDAuOCAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightBlackColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC41IDAuNSAwLjU=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightRedColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MSAwLjcgMC43</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightGreenColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDEgMC44</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightYellowColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MSAxIDAuNg==</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightBlueColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC42IDAuOCAx</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightMagentaColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MSAwLjggMQ==</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightCyanColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC42IDEgMQ==</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightWhiteColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC45IDAuOSAwLjk=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ":CursorType integer 0" \
  ":CursorBlink bool false" \
  ':CursorColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC43IDAuNyAwLjc=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
#+end_src

**** Window

#+begin_src sh
  ":ShowRepresentedURLInTitle bool true" \
  ":ShowRepresentedURLPathInTitle bool true" \
  ":ShowActiveProcessInTitle bool true" \
  ":ShowActiveProcessArgumentsInTitle bool false" \
  ":ShowShellCommandInTitle bool false" \
  ":ShowWindowSettingsNameInTitle bool false" \
  ":ShowTTYNameInTitle bool false" \
  ":ShowDimensionsInTitle bool false" \
  ":ShowCommandKeyInTitle bool false" \
  ":columnCount integer 124" \
  ":rowCount integer 20" \
  ":ShouldLimitScrollback integer 0" \
  ":ScrollbackLines integer 0" \
  ":ShouldRestoreContent bool false" \
#+end_src

**** Tab

#+begin_src sh
  ":ShowRepresentedURLInTabTitle bool false" \
  ":ShowRepresentedURLPathInTabTitle bool false" \
  ":ShowActiveProcessInTabTitle bool true" \
  ":ShowActiveProcessArgumentsInTabTitle bool false" \
  ":ShowTTYNameInTabTitle bool false" \
  ":ShowComponentsWhenTabHasCustomTitle bool true" \
  ":ShowActivityIndicatorInTab bool true" \
#+end_src

**** Shell

#+begin_src sh
  ":shellExitAction integer 1" \
  ":warnOnShellCloseAction integer 1" \
#+end_src

**** Keyboard

#+begin_src sh
  ":useOptionAsMetaKey bool false" \
  ":ScrollAlternateScreen bool true" \
#+end_src

**** Advanced

#+begin_src sh
  ":TerminalType string 'xterm-256color'" \
  ":deleteSendsBackspace bool false" \
  ":EscapeNonASCIICharacters bool true" \
  ":ConvertNewlinesOnPaste bool true" \
  ":StrictVTKeypad bool true" \
  ":scrollOnInput bool true" \
  ":Bell bool false" \
  ":VisualBell bool false" \
  ":VisualBellOnlyWhenMuted bool false" \
  ":BellBadge bool false" \
  ":BellBounce bool false" \
  ":BellBounceCritical bool false" \
  ":CharacterEncoding integer 4" \
  ":SetLanguageEnvironmentVariables bool true" \
  ":EastAsianAmbiguousWide bool false" \
#+end_src

#+begin_src sh
  ; do
    /usr/libexec/PlistBuddy "$HOME/Library/Preferences/com.apple.Terminal.plist" \
      -c "add ':Window Settings:$(whoami)'${terminal_prop}"
  done
#+end_src

#+begin_src sh
  }
#+end_src

*** dovecot

#+begin_example sh :tangle no
  doveadm sync -u $(whoami) maildir:~/.email:INBOX=~/.email/Inbox:LAYOUT=fs
#+end_example

#+begin_src sh
  function config_dovecot () {
    #   p "Enable email authentication with macOS accounts"

    #   sudo tee "/etc/pam.d/dovecot" > /dev/null << EOF
    # auth		required	pam_opendirectory.so try_first_pass
    # account		required	pam_nologin.so
    # account		required	pam_opendirectory.so
    # password	required	pam_opendirectory.so
    # EOF

    p "Configure Dovecot email server"

    cat > "/usr/local/etc/dovecot/dovecot.conf" << EOF
  auth_mechanisms = cram-md5
  default_internal_user = _dovecot
  default_login_user = _dovenull
  log_path = /dev/stderr
  mail_location = maildir:~/.mail:INBOX=~/.mail/Inbox:LAYOUT=fs
  mail_plugins = zlib
  maildir_copy_with_hardlinks = no
  namespace {
    inbox = yes
    mailbox Drafts {
      auto = subscribe
      special_use = \Drafts
    }
    mailbox Junk {
      auto = subscribe
      special_use = \Junk
    }
    mailbox Sent {
      auto = subscribe
      special_use = \Sent
    }
    mailbox "Sent Messages" {
      special_use = \Sent
    }
    mailbox Trash {
      auto = subscribe
      special_use = \Trash
    }
    separator = .
    type = private
  }
  passdb {
    args = scheme=cram-md5 /usr/local/etc/dovecot/cram-md5.pwd
    driver = passwd-file

    # driver = pam

    # args = nopassword=y
    # driver = static
  }
  plugin {
    sieve = file:/Users/%u/.sieve
    sieve_plugins = sieve_extprograms
    zlib_save = bz2
    zlib_save_level = 9
  }
  postmaster_address = ${USER}@${DOMAIN}
  protocols = imap
  service imap-login {
    inet_listener imap {
      port = 0
    }
  }
  ssl = required
  ssl_cert = <${SSL}/certs/${MAIL}/${MAIL}.crt
  ssl_cipher_list = AES128+EECDH:AES128+EDH
  ssl_dh_parameters_length = 4096
  ssl_key = <${SSL}/certs/${MAIL}/${MAIL}.key
  ssl_prefer_server_ciphers = yes
  ssl_protocols = !SSLv2 !SSLv3
  userdb {
    driver = passwd
  }
  protocol lda {
    mail_plugins = sieve zlib
  }

  # auth_debug = yes
  # auth_debug_passwords = yes
  # auth_verbose = yes
  # auth_verbose_passwords = plain
  # mail_debug = yes
  # verbose_ssl = yes
  EOF

    if [ ! -f "/usr/local/etc/dovecot/cram-md5.pwd" ]; then
      p "Create email account for '${USER}' with 'CRAM-MD5' authentication: "
      doveadm pw | sed -e "s/^/${USER}:/" > "/usr/local/etc/dovecot/cram-md5.pwd"
      sudo chown _dovecot "/usr/local/etc/dovecot/cram-md5.pwd"
      sudo chmod go= "/usr/local/etc/dovecot/cram-md5.pwd"
    fi

    if ! /usr/bin/grep -Fq ${MAIL} "/etc/hosts"; then
      printf "127.0.0.1\t${MAIL}\n" | sudo tee -a /etc/hosts > /dev/null
    fi

    sudo brew services start dovecot

    cat > "/usr/local/bin/imaptimefix.py" << EOF
  #!/usr/bin/env python

  # Author: Zachary Cutlip <@zcutlip>
  # http://shadow-file.blogspot.com/2012/06/parsing-email-and-fixing-timestamps-in.html
  # Updated: Peter T Bosse II <@ptb>
  # Purpose: A program to fix sorting of mail messages that have been POPed or
  #          IMAPed in the wrong order. Compares time stamp sent and timestamp
  #          received on an RFC822-formatted email message, and renames the
  #          message file using the most recent timestamp that is no more than
  #          24 hours after the date sent. Updates the file's atime/mtime with
  #          the timestamp, as well. Does not modify the headers or contents of
  #          the message.

  from bz2 import BZ2File
  from email import message_from_string
  from email.utils import mktime_tz, parsedate_tz
  from os import rename, utime, walk
  from os.path import abspath, isdir, isfile, join
  from re import compile, match
  from sys import argv

  if isdir(argv[1]):
    e = compile("([0-9]+)(\..*$)")

    for a, b, c in walk(argv[1]):
      for d in c:
        if e.match(d):
          f = message_from_string(BZ2File(join(a, d)).read())
          g = mktime_tz(parsedate_tz(f.get("Date")))

          h = 0
          for i in f.get_all("Received", []):
            j = i.split(";")[-1]
            if parsedate_tz(j):
              k = mktime_tz(parsedate_tz(j))
              if (k - g) > (60*60*24):
                continue

              h = k
            break

          if (h < 1):
            h = g

          l = e.match(d)

          if len(l.groups()) == 2:
            m = str(int(h)) + l.groups()[1]
            if not isfile(join(a, m)):
              rename(join(a, d), join(a, m))
            utime(join(a, m), (h, h))
  EOF

    chmod +x /usr/local/bin/imaptimefix.py

    printf "%s\t%s\t%s\n" \
      "KeepAlive" "-bool" "false" \
      "Label" "-string" "org.dovecot.imaptimefix" \
      "LowPriorityIO" "-bool" "true" \
      "ProgramArguments" "-array-add" "/usr/local/bin/imaptimefix.py" \
      "ProgramArguments" "-array-add" "${HOME}/.mail" \
      "StartInterval" "-int" "600" \
    | while IFS=$'\t' read a b c; do
      defaults write "${HOME}/Library/LaunchAgents/org.dovecot.imaptimefix" "$a" $b $c
    done
    plutil -convert xml1 "${HOME}/Library/LaunchAgents/org.dovecot.imaptimefix.plist"
    chmod 644 "${HOME}/Library/LaunchAgents/org.dovecot.imaptimefix.plist"
  }
#+end_src

*** getmail

#+begin_src sh
  function config_getmail () {
    p "Configure getmail"

    mkdir -m go= -p "${HOME}/.getmail" "${HOME}/Library/LaunchAgents"

    printf "%s\n" \
      "add ':KeepAlive' bool false" \
      "add ':Label' string 'ca.pyropus.getmail'" \
      "add ':ProgramArguments' array" \
      "add ':ProgramArguments:0' string '/usr/local/bin/getmail'" \
      "add ':RunAtLoad' bool true" \
      "add ':StandardOutPath' string '${HOME}/.getmail/getmail.log'" \
      "add ':StandardErrorPath' string '${HOME}/.getmail/getmail.err'" \
      "add ':StartInterval' integer 300" \
    | while read a; do
      /usr/libexec/PlistBuddy "${HOME}/Library/LaunchAgents/ca.pyropus.getmail.plist" -c "${a}" &> /dev/null
    done

    for email in \
      "pbosse@gmail.com" \
      "ptb@ioutime.com" \
    ; do
      p "Add password for '${email}' to Keychain"

      security add-internet-password -a "${email}" -s "imap.gmail.com" -r "imap" \
        -l "${email}" -D "getmail password" -P 993 -w

      cat > "${HOME}/.getmail/${email}" << EOF
  [retriever]
  type = SimpleIMAPSSLRetriever
  server = imap.gmail.com
  port = 993
  username = ${email}
  mailboxes = ("[Gmail]/All Mail",)
  move_on_delete = "[Gmail]/Trash"

  [destination]
  type = MDA_external
  path = /usr/local/Cellar/dovecot/2.2.31/libexec/dovecot/dovecot-lda
  arguments = ("-c","/usr/local/etc/dovecot/dovecot.conf","-d","$(whoami)",)
  ignore_stderr = true

  [options]
  delete = true
  delivered_to = false
  read_all = false
  received = false
  verbose = 0
  EOF

    defaults write "${HOME}/Library/LaunchAgents/ca.pyropus.getmail" \
      ProgramArguments -array-add "--rcfile"
    defaults write "${HOME}/Library/LaunchAgents/ca.pyropus.getmail" \
      ProgramArguments -array-add "${email}"
    done

    plutil -convert xml1 "${HOME}/Library/LaunchAgents/ca.pyropus.getmail.plist"
  }
#+end_src

*** git

#+begin_src sh
  function config_git () {
    p "Configure git"

    KEY="$(gpg -K --with-colons | awk -F: '/^sec/ { a=$5 } END { print a }')"

    git config --global user.name "Peter T Bosse II"
    git config --global user.email "ptb@ioutime.com"

    git config --global alias.cm "commit --allow-empty --allow-empty-message --message="
    git config --global alias.co "checkout"
    git config --global alias.st "status"

    git config --global push.default "simple"

    if [ ! -z ${KEY} ]; then
      git config --global user.signingkey "${KEY}"
      git config --global gpg.program "$(which gpg)"
      git config --global commit.gpgsign "true"
      git config --global tag.gpgsign "true"
      git config --global log.showSignature "true"
    fi
  }
#+end_src

*** gnupg

#+begin_src sh
  function config_gpg () {
    p "Create GPG keys"

    mkdir -m go= -p "${HOME}/.gnupg"

    echo "keyid-format long" \
      > "${HOME}/.gnupg/gpg.conf"
    echo "pinentry-program $(which pinentry-mac)" \
      > "${HOME}/.gnupg/gpg-agent.conf"

    gpg --faked-system-time '20170701T120000!' \
      --quick-generate-key "Peter T Bosse II <ptb@ioutime.com>" \
      future-default default never
  }
#+end_src

#+begin_src sh
  function config_gpg_help () {
    KEY="$(gpg -K --with-colons | awk -F: '/^sec/ { a=$5 } END { print a }')"
    gpg --armor --export "${KEY}" | pbcopy
    open "https://github.com/settings/keys"
  }
#+end_src

*** openssl

#+begin_src sh
  function config_openssl () {
    p "Create OpenSSL certificates"

    SSL="/usr/local/etc/openssl"
    DOMAIN="ptb2.me"
    MAIL="mail.${DOMAIN}"
    FAKE="0701080017"
    DAYS=3652
#+end_src

#+begin_src sh
  mkdir -p "${SSL}/certs/${DOMAIN}"
  cat > "${SSL}/certs/${DOMAIN}/${DOMAIN}.cnf" << EOF
  [ req ]
  default_bits = 4096
  default_keyfile = ${SSL}/certs/${DOMAIN}/${DOMAIN}.key
  default_md = sha256
  distinguished_name = dn
  encrypt_key = no
  prompt = no
  utf8 = yes
  x509_extensions = v3_ca

  [ dn ]
  CN = ${DOMAIN}

  [ v3_ca ]
  subjectKeyIdentifier = hash
  authorityKeyIdentifier = keyid:always,issuer
  basicConstraints = CA:true
  EOF
#+end_src

#+begin_src sh
  openssl genrsa -out "${SSL}/certs/${DOMAIN}/${DOMAIN}.key" 4096

  p "Set fake '${DOMAIN}' certificate creation date"
  sudo date "${FAKE}" && \
  openssl req -days ${DAYS} -new -x509 \
    -config "${SSL}/certs/${DOMAIN}/${DOMAIN}.cnf" \
    -key "${SSL}/certs/${DOMAIN}/${DOMAIN}.key" \
    -out "${SSL}/certs/${DOMAIN}/${DOMAIN}.crt" && \
  sudo ntpdate -u time.apple.com

  p "Password for adding certificate to Keychain Access"
  openssl pkcs12 -aes256 -clcerts -export \
    -in "${SSL}/certs/${DOMAIN}/${DOMAIN}.crt" \
    -inkey "${SSL}/certs/${DOMAIN}/${DOMAIN}.key" \
    -out "${SSL}/certs/${DOMAIN}/${DOMAIN}.p12"

  open -g "${SSL}/certs/${DOMAIN}/${DOMAIN}.p12"
#+end_src

#+begin_src sh
  mkdir -p "${SSL}/certs/${MAIL}"
  cat > "${SSL}/certs/${MAIL}/${MAIL}.cnf" << EOF
  [ req ]
  default_bits = 4096
  default_keyfile = ${SSL}/certs/${DOMAIN}/${DOMAIN}.key
  default_md = sha256
  distinguished_name = dn
  encrypt_key = no
  prompt = no
  utf8 = yes
  x509_extensions = v3_ca

  [ dn ]
  CN = ${MAIL}

  [ v3_ca ]
  subjectKeyIdentifier = hash
  authorityKeyIdentifier = keyid:always,issuer
  basicConstraints = CA:true
  EOF
#+end_src

#+begin_src sh
  openssl genrsa -out "${SSL}/certs/${MAIL}/${MAIL}.key" 4096

  openssl req -new \
    -config "${SSL}/certs/${MAIL}/${MAIL}.cnf" \
    -key "${SSL}/certs/${MAIL}/${MAIL}.key" \
    -out "${SSL}/certs/${MAIL}/${MAIL}.csr"

  p "Set fake '${MAIL}' certificate creation date"
  sudo date "${FAKE}" && \
  openssl x509 -days ${DAYS} -req -set_serial 01 -sha256 \
    -CA "${SSL}/certs/${DOMAIN}/${DOMAIN}.crt" \
    -CAkey "${SSL}/certs/${DOMAIN}/${DOMAIN}.key" \
    -in "${SSL}/certs/${MAIL}/${MAIL}.csr" \
    -out "${SSL}/certs/${MAIL}/${MAIL}.crt" && \
  sudo ntpdate -u time.apple.com
}
#+end_src

*** shell

#+begin_src sh
function config_shell () {
  if [ -x "/usr/local/bin/zsh" ]; then
    # Current User > Advanced Options… > Login shell: /usr/local/bin/zsh
    p "Set '/usr/local/bin/zsh' as the default shell"

    sudo sh -c "printf '%s\n' '/usr/local/bin/zsh' >> /etc/shells" && \
    sudo chsh -s /usr/local/bin/zsh && \
    sudo mkdir -m go= -p /private/var/root/Library/Caches/ && \
    sudo touch "/private/var/root/.zshrc"
    chsh -s /usr/local/bin/zsh
    touch "${HOME}/.zshrc"
  fi
}
#+end_src

*** sieve

#+begin_src sh
  function config_sieve () {
    p "Configure sieve"

    cat > "${HOME}/.sieve" << EOF
  require ["date", "fileinto", "imap4flags", "mailbox", "relational", "variables"];

  setflag "\\\\Seen";

  if date :is "date" "year" "1995" { fileinto :create "Archives.1995"; }
  if date :is "date" "year" "1996" { fileinto :create "Archives.1996"; }
  if date :is "date" "year" "1997" { fileinto :create "Archives.1997"; }
  if date :is "date" "year" "1998" { fileinto :create "Archives.1998"; }
  if date :is "date" "year" "1999" { fileinto :create "Archives.1999"; }
  if date :is "date" "year" "2000" { fileinto :create "Archives.2000"; }
  if date :is "date" "year" "2001" { fileinto :create "Archives.2001"; }
  if date :is "date" "year" "2002" { fileinto :create "Archives.2002"; }
  if date :is "date" "year" "2003" { fileinto :create "Archives.2003"; }
  if date :is "date" "year" "2004" { fileinto :create "Archives.2004"; }
  if date :is "date" "year" "2005" { fileinto :create "Archives.2005"; }
  if date :is "date" "year" "2006" { fileinto :create "Archives.2006"; }
  if date :is "date" "year" "2007" { fileinto :create "Archives.2007"; }
  if date :is "date" "year" "2008" { fileinto :create "Archives.2008"; }
  if date :is "date" "year" "2009" { fileinto :create "Archives.2009"; }
  if date :is "date" "year" "2010" { fileinto :create "Archives.2010"; }
  if date :is "date" "year" "2011" { fileinto :create "Archives.2011"; }
  if date :is "date" "year" "2012" { fileinto :create "Archives.2012"; }
  if date :is "date" "year" "2013" { fileinto :create "Archives.2013"; }
  if date :is "date" "year" "2014" { fileinto :create "Archives.2014"; }
  if date :is "date" "year" "2015" { fileinto :create "Archives.2015"; }
  if date :is "date" "year" "2016" { fileinto :create "Archives.2016"; }
  if date :is "date" "year" "2017" { fileinto :create "Archives.2017"; }
  if date :is "date" "year" "2018" { fileinto :create "Archives.2018"; }
  if date :is "date" "year" "2019" { fileinto :create "Archives.2019"; }
  if date :is "date" "year" "2020" { fileinto :create "Archives.2020"; }
  EOF
  }
#+end_src

*** ssh

#+begin_src sh
  function config_ssh () {
    p "Create ssh keys"

    mkdir -m go= -p "${HOME}/.ssh"

    ssh-keygen -t ed25519 -a 100 -C "ptb@ioutime.com"

    cat > "${HOME}/.ssh/config" <<-EOF
  Host *
    AddKeysToAgent yes
    IdentityFile ~/.ssh/id_ed25519
  EOF

    p "Adding ssh key to macOS keychain"

    ssh-add -K
    echo "ssh-add -A &> /dev/null" >> "${HOME}/.zshrc"
  }
#+end_src

#+begin_src sh
  function config_ssh_help () {
    pbcopy < "${HOME}/.ssh/id_ed25519.pub"
    open "https://github.com/settings/keys"
  }
#+end_src

#+begin_example sh :tangle no
  ssh-copy-id username@example.com
#+end_example

*** TODO: vim

#+begin_src sh :tangle no
  function config_vim () {
    p "Configure vim"
  }
#+end_src

*** zsh

#+begin_src sh
function config_zsh () {
  p "Create system default '/etc/zshrc'"

  sudo tee /etc/zshrc > /dev/null <<-EOF
alias -g ...="../.."
alias -g ....="../../.."
alias -g .....="../../../.."
alias l="/bin/ls -lG"
alias ll="/bin/ls -alG"
alias lr="/bin/ls -alRG"
alias screen="/usr/bin/screen -U"
autoload -U compaudit
compaudit | xargs -L 1 sudo chown -HR root:wheel {} 2> /dev/null
compaudit | xargs -L 1 sudo chmod -HR go-w {} 2> /dev/null
autoload -U compinit
compinit -d "\${HOME}/Library/Caches/zcompdump"
bindkey "\e[3~" delete-char
bindkey "\e[A" up-line-or-search
bindkey "\e[B" down-line-or-search
export HISTFILE="\${HOME}/Library/Caches/zsh_history"
export HISTSIZE=50000
export SAVEHIST=50000
setopt APPEND_HISTORY
setopt AUTO_CD
setopt EXTENDED_HISTORY
setopt HIST_FIND_NO_DUPS
setopt INC_APPEND_HISTORY
setopt PROMPT_SUBST
setopt SHARE_HISTORY
stty erase 
# Correctly display UTF-8 with combining characters.
if [ "\$TERM_PROGRAM" = "Apple_Terminal" ]; then
  setopt combiningchars
fi
function precmd () {
  print -Pn "\\e]7;file://%M\${PWD// /%%20}\a";
  print -Pn "\\e]2;%n@%m\a";
  print -Pn "\\e]1;%~\a";
}
function gb () {
  git branch --no-color 2> /dev/null | \
    sed -e "/^[^*]/d" -e "s/* \(.*\)/ (\1)/"
}
function xd () {
  xattr -d com.apple.diskimages.fsck \$* 2> /dev/null;
  xattr -d com.apple.diskimages.recentcksum \$* 2> /dev/null;
  xattr -d com.apple.metadata:kMDItemFinderComment \$* 2> /dev/null;
  xattr -d com.apple.metadata:kMDItemDownloadedDate \$* 2> /dev/null;
  xattr -d com.apple.metadata:kMDItemWhereFroms \$* 2> /dev/null;
  xattr -d com.apple.quarantine \$* 2> /dev/null;
  find . -name .DS_Store -delete;
  find . -name 'Icon' -delete
}
function sf () {
  SetFile -P -d "\$1 12:00:00" -m "\$1 12:00:00" \$argv[2,\$]
}
function sd () {
  xd **/*;
  sf \$1 .;
  for i in **/*; do sf \$1 \$i; done;
  chown -R root:wheel .;
  chmod -R a+r,u+w,go-w .;
  find . -type d -exec chmod a+x '{}' ';';
  chgrp -R admin ./Applications;
  chmod -R g+w ./Applications;
  chgrp -R admin ./Library;
  chmod -R g+w ./Library;
  chgrp -R staff "./Library/Application Support/Adobe";
  chmod -R g-w ./Library/Keychains;
  chmod -R g-w ./Library/ScriptingAdditions;
  chgrp -R wheel ./Library/Filesystems;
  chmod -R g-w ./Library/Filesystems;
  chgrp -R wheel ./Library/LaunchAgents;
  chmod -R g-w ./Library/LaunchAgents;
  chgrp -R wheel ./Library/LaunchDaemons;
  chmod -R g-w ./Library/LaunchDaemons;
  chgrp -R wheel ./Library/PreferencePanes;
  chmod -R g-w ./Library/PreferencePanes;
  chgrp -R wheel ./Library/StartupItems;
  chmod -R g-w ./Library/StartupItems;
  chgrp -R wheel ./Library/Widgets;
  chmod -R g-w ./Library/Widgets;
  find . -name "kexts" -type d -exec chmod -R g-w '{}' ';';
  find . -name "*.kext" -exec chown -R root:wheel '{}' ';';
  find . -name "*.kext" -exec chmod -R g-w '{}' ';'
}
MAS="\$(getconf DARWIN_USER_CACHE_DIR)com.apple.appstore"
PROMPT="%B%n@%m%b:%2~%B\$(gb) %#%b "
EOF
}
#+end_src

*** Login Items

#+begin_src sh
  function config_loginitems () {
    p "Create login items"

    osascript > /dev/null << EOF
      tell app "System Events"
        make new login item with properties ¬
          { path: "/Applications/Alfred 3.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/autoping.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Caffeine.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Coffitivity.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Dropbox.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/HardwareGrowler.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/I Love Stars.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/IPMenulet.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/iTunes.app/Contents/MacOS/iTunesHelper.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Menubar Countdown.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Meteorologist.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Moom.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/NZBGet.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Plex Media Server.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Sonarr-Menu.app", hidden: true }
        make new login item with properties ¬
          { path: "/Library/PreferencePanes/SteerMouse.prefPane/Contents/MacOS/SteerMouse Manager.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Synergy Preferences.app/Contents/PreferencePanes/Synergy.prefPane/Contents/Helpers/Synergy.app", hidden: true }
      end tell
  EOF

    mkdir -m go= -p "${HOME}/Library/LaunchAgents"
    printf "%s\t%s\n" \
      "net.elasticthreads.nv" "add ':KeepAlive' bool true" \
      "net.elasticthreads.nv" "add ':Label' string 'net.elasticthreads.nv'" \
      "net.elasticthreads.nv" "add ':Program' string '/Applications/nvALT.app/Contents/MacOS/nvALT'" \
    | while IFS=$'\t' read a b; do
      /usr/libexec/PlistBuddy "${HOME}/Library/LaunchAgents/${a}.plist" -c "${b}" &> /dev/null
    done
  }
#+end_src

*** handlers

#+begin_src sh
  function config_handlers () {
    if [ -x "/usr/local/bin/duti" ]; then
      p "Set document file handlers"

      if [ -f "${HOME}/Library/Preferences/org.duti.plist" ]; then
        rm "${HOME}/Library/Preferences/org.duti.plist"
      fi

      printf "%s\t%s\t%s\n" \
        "com.apple.DiskImageMounter" "com.apple.disk-image" "all" \
        "com.apple.DiskImageMounter" "public.disk-image" "all" \
        "com.apple.DiskImageMounter" "public.iso-image" "all" \
        "com.apple.QuickTimePlayerX" "com.apple.coreaudio-format" "all" \
        "com.apple.QuickTimePlayerX" "com.apple.quicktime-movie" "all" \
        "com.apple.QuickTimePlayerX" "com.microsoft.waveform-audio" "all" \
        "com.apple.QuickTimePlayerX" "public.aifc-audio" "all" \
        "com.apple.QuickTimePlayerX" "public.aiff-audio" "all" \
        "com.apple.QuickTimePlayerX" "public.audio" "all" \
        "com.apple.QuickTimePlayerX" "public.mp3" "all" \
        "com.apple.Safari" "com.compuserve.gif" "all" \
        "com.apple.Terminal" "com.apple.terminal.shell-script" "all" \
        "com.apple.iTunes" "com.apple.iTunes.audible" "all" \
        "com.apple.iTunes" "com.apple.iTunes.ipg" "all" \
        "com.apple.iTunes" "com.apple.iTunes.ipsw" "all" \
        "com.apple.iTunes" "com.apple.iTunes.ite" "all" \
        "com.apple.iTunes" "com.apple.iTunes.itlp" "all" \
        "com.apple.iTunes" "com.apple.iTunes.itms" "all" \
        "com.apple.iTunes" "com.apple.iTunes.podcast" "all" \
        "com.apple.iTunes" "com.apple.m4a-audio" "all" \
        "com.apple.iTunes" "com.apple.mpeg-4-ringtone" "all" \
        "com.apple.iTunes" "com.apple.protected-mpeg-4-audio" "all" \
        "com.apple.iTunes" "com.apple.protected-mpeg-4-video" "all" \
        "com.apple.iTunes" "com.audible.aa-audio" "all" \
        "com.apple.iTunes" "public.mpeg-4-audio" "all" \
        "com.apple.installer" "com.apple.installer-package-archive" "all" \
        "com.github.atom" "com.apple.binary-property-list" "editor" \
        "com.github.atom" "com.apple.crashreport" "editor" \
        "com.github.atom" "com.apple.dt.document.ascii-property-list" "editor" \
        "com.github.atom" "com.apple.dt.document.script-suite-property-list" "editor" \
        "com.github.atom" "com.apple.dt.document.script-terminology-property-list" "editor" \
        "com.github.atom" "com.apple.log" "editor" \
        "com.github.atom" "com.apple.property-list" "editor" \
        "com.github.atom" "com.apple.rez-source" "editor" \
        "com.github.atom" "com.apple.symbol-export" "editor" \
        "com.github.atom" "com.apple.xcode.ada-source" "editor" \
        "com.github.atom" "com.apple.xcode.bash-script" "editor" \
        "com.github.atom" "com.apple.xcode.configsettings" "editor" \
        "com.github.atom" "com.apple.xcode.csh-script" "editor" \
        "com.github.atom" "com.apple.xcode.fortran-source" "editor" \
        "com.github.atom" "com.apple.xcode.ksh-script" "editor" \
        "com.github.atom" "com.apple.xcode.lex-source" "editor" \
        "com.github.atom" "com.apple.xcode.make-script" "editor" \
        "com.github.atom" "com.apple.xcode.mig-source" "editor" \
        "com.github.atom" "com.apple.xcode.pascal-source" "editor" \
        "com.github.atom" "com.apple.xcode.strings-text" "editor" \
        "com.github.atom" "com.apple.xcode.tcsh-script" "editor" \
        "com.github.atom" "com.apple.xcode.yacc-source" "editor" \
        "com.github.atom" "com.apple.xcode.zsh-script" "editor" \
        "com.github.atom" "com.apple.xml-property-list" "editor" \
        "com.github.atom" "com.barebones.bbedit.actionscript-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.erb-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.ini-configuration" "editor" \
        "com.github.atom" "com.barebones.bbedit.javascript-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.json-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.jsp-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.lasso-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.lua-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.setext-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.sql-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.tcl-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.tex-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.textile-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.vbscript-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.vectorscript-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.verilog-hdl-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.vhdl-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.yaml-source" "editor" \
        "com.github.atom" "com.netscape.javascript-source" "editor" \
        "com.github.atom" "com.sun.java-source" "editor" \
        "com.github.atom" "dyn.ah62d4rv4ge80255drq" "all" \
        "com.github.atom" "dyn.ah62d4rv4ge80g55gq3w0n" "all" \
        "com.github.atom" "dyn.ah62d4rv4ge80g55sq2" "all" \
        "com.github.atom" "dyn.ah62d4rv4ge80y2xzrf0gk3pw" "all" \
        "com.github.atom" "dyn.ah62d4rv4ge81e3dtqq" "all" \
        "com.github.atom" "dyn.ah62d4rv4ge81e7k" "all" \
        "com.github.atom" "dyn.ah62d4rv4ge81g25xsq" "all" \
        "com.github.atom" "dyn.ah62d4rv4ge81g2pxsq" "all" \
        "com.github.atom" "net.daringfireball.markdown" "editor" \
        "com.github.atom" "public.assembly-source" "editor" \
        "com.github.atom" "public.c-header" "editor" \
        "com.github.atom" "public.c-plus-plus-source" "editor" \
        "com.github.atom" "public.c-source" "editor" \
        "com.github.atom" "public.csh-script" "editor" \
        "com.github.atom" "public.json" "editor" \
        "com.github.atom" "public.lex-source" "editor" \
        "com.github.atom" "public.log" "editor" \
        "com.github.atom" "public.mig-source" "editor" \
        "com.github.atom" "public.nasm-assembly-source" "editor" \
        "com.github.atom" "public.objective-c-plus-plus-source" "editor" \
        "com.github.atom" "public.objective-c-source" "editor" \
        "com.github.atom" "public.patch-file" "editor" \
        "com.github.atom" "public.perl-script" "editor" \
        "com.github.atom" "public.php-script" "editor" \
        "com.github.atom" "public.plain-text" "editor" \
        "com.github.atom" "public.precompiled-c-header" "editor" \
        "com.github.atom" "public.precompiled-c-plus-plus-header" "editor" \
        "com.github.atom" "public.python-script" "editor" \
        "com.github.atom" "public.ruby-script" "editor" \
        "com.github.atom" "public.script" "editor" \
        "com.github.atom" "public.shell-script" "editor" \
        "com.github.atom" "public.source-code" "editor" \
        "com.github.atom" "public.text" "editor" \
        "com.github.atom" "public.utf16-external-plain-text" "editor" \
        "com.github.atom" "public.utf16-plain-text" "editor" \
        "com.github.atom" "public.utf8-plain-text" "editor" \
        "com.github.atom" "public.xml" "editor" \
        "com.kodlian.Icon-Slate" "com.apple.icns" "all" \
        "com.kodlian.Icon-Slate" "com.microsoft.ico" "all" \
        "com.microsoft.Word" "public.rtf" "all" \
        "com.panayotis.jubler" "dyn.ah62d4rv4ge81g6xy" "all" \
        "com.sketchup.SketchUp.2017" "com.sketchup.skp" "all" \
        "com.VortexApps.NZBVortex3" "dyn.ah62d4rv4ge8068xc" "all" \
        "com.vmware.fusion" "com.microsoft.windows-executable" "all" \
        "cx.c3.theunarchiver" "com.alcohol-soft.mdf-image" "all" \
        "cx.c3.theunarchiver" "com.allume.stuffit-archive" "all" \
        "cx.c3.theunarchiver" "com.altools.alz-archive" "all" \
        "cx.c3.theunarchiver" "com.amiga.adf-archive" "all" \
        "cx.c3.theunarchiver" "com.amiga.adz-archive" "all" \
        "cx.c3.theunarchiver" "com.apple.applesingle-archive" "all" \
        "cx.c3.theunarchiver" "com.apple.binhex-archive" "all" \
        "cx.c3.theunarchiver" "com.apple.bom-compressed-cpio" "all" \
        "cx.c3.theunarchiver" "com.apple.itunes.ipa" "all" \
        "cx.c3.theunarchiver" "com.apple.macbinary-archive" "all" \
        "cx.c3.theunarchiver" "com.apple.self-extracting-archive" "all" \
        "cx.c3.theunarchiver" "com.apple.xar-archive" "all" \
        "cx.c3.theunarchiver" "com.apple.xip-archive" "all" \
        "cx.c3.theunarchiver" "com.cyclos.cpt-archive" "all" \
        "cx.c3.theunarchiver" "com.microsoft.cab-archive" "all" \
        "cx.c3.theunarchiver" "com.microsoft.msi-installer" "all" \
        "cx.c3.theunarchiver" "com.nero.nrg-image" "all" \
        "cx.c3.theunarchiver" "com.network172.pit-archive" "all" \
        "cx.c3.theunarchiver" "com.nowsoftware.now-archive" "all" \
        "cx.c3.theunarchiver" "com.nscripter.nsa-archive" "all" \
        "cx.c3.theunarchiver" "com.padus.cdi-image" "all" \
        "cx.c3.theunarchiver" "com.pkware.zip-archive" "all" \
        "cx.c3.theunarchiver" "com.rarlab.rar-archive" "all" \
        "cx.c3.theunarchiver" "com.redhat.rpm-archive" "all" \
        "cx.c3.theunarchiver" "com.stuffit.archive.sit" "all" \
        "cx.c3.theunarchiver" "com.stuffit.archive.sitx" "all" \
        "cx.c3.theunarchiver" "com.sun.java-archive" "all" \
        "cx.c3.theunarchiver" "com.symantec.dd-archive" "all" \
        "cx.c3.theunarchiver" "com.winace.ace-archive" "all" \
        "cx.c3.theunarchiver" "com.winzip.zipx-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.arc-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.arj-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.dcs-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.dms-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.ha-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.lbr-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.lha-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.lhf-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.lzx-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.packdev-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.pax-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.pma-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.pp-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.xmash-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.zoo-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.zoom-archive" "all" \
        "cx.c3.theunarchiver" "org.7-zip.7-zip-archive" "all" \
        "cx.c3.theunarchiver" "org.archive.warc-archive" "all" \
        "cx.c3.theunarchiver" "org.debian.deb-archive" "all" \
        "cx.c3.theunarchiver" "org.gnu.gnu-tar-archive" "all" \
        "cx.c3.theunarchiver" "org.gnu.gnu-zip-archive" "all" \
        "cx.c3.theunarchiver" "org.gnu.gnu-zip-tar-archive" "all" \
        "cx.c3.theunarchiver" "org.tukaani.lzma-archive" "all" \
        "cx.c3.theunarchiver" "org.tukaani.xz-archive" "all" \
        "cx.c3.theunarchiver" "public.bzip2-archive" "all" \
        "cx.c3.theunarchiver" "public.cpio-archive" "all" \
        "cx.c3.theunarchiver" "public.tar-archive" "all" \
        "cx.c3.theunarchiver" "public.tar-bzip2-archive" "all" \
        "cx.c3.theunarchiver" "public.z-archive" "all" \
        "cx.c3.theunarchiver" "public.zip-archive" "all" \
        "cx.c3.theunarchiver" "public.zip-archive.first-part" "all" \
        "org.gnu.Emacs" "dyn.ah62d4rv4ge8086xh" "all" \
        "org.inkscape.Inkscape" "public.svg-image" "editor" \
        "org.videolan.vlc" "com.apple.m4v-video" "all" \
        "org.videolan.vlc" "com.microsoft.windows-media-wmv" "all" \
        "org.videolan.vlc" "org.videolan.3gp" "all" \
        "org.videolan.vlc" "org.videolan.aac" "all" \
        "org.videolan.vlc" "org.videolan.ac3" "all" \
        "org.videolan.vlc" "org.videolan.aiff" "all" \
        "org.videolan.vlc" "org.videolan.amr" "all" \
        "org.videolan.vlc" "org.videolan.aob" "all" \
        "org.videolan.vlc" "org.videolan.ape" "all" \
        "org.videolan.vlc" "org.videolan.asf" "all" \
        "org.videolan.vlc" "org.videolan.avi" "all" \
        "org.videolan.vlc" "org.videolan.axa" "all" \
        "org.videolan.vlc" "org.videolan.axv" "all" \
        "org.videolan.vlc" "org.videolan.divx" "all" \
        "org.videolan.vlc" "org.videolan.dts" "all" \
        "org.videolan.vlc" "org.videolan.dv" "all" \
        "org.videolan.vlc" "org.videolan.flac" "all" \
        "org.videolan.vlc" "org.videolan.flash" "all" \
        "org.videolan.vlc" "org.videolan.gxf" "all" \
        "org.videolan.vlc" "org.videolan.it" "all" \
        "org.videolan.vlc" "org.videolan.mid" "all" \
        "org.videolan.vlc" "org.videolan.mka" "all" \
        "org.videolan.vlc" "org.videolan.mkv" "all" \
        "org.videolan.vlc" "org.videolan.mlp" "all" \
        "org.videolan.vlc" "org.videolan.mod" "all" \
        "org.videolan.vlc" "org.videolan.mpc" "all" \
        "org.videolan.vlc" "org.videolan.mpeg-audio" "all" \
        "org.videolan.vlc" "org.videolan.mpeg-stream" "all" \
        "org.videolan.vlc" "org.videolan.mpeg-video" "all" \
        "org.videolan.vlc" "org.videolan.mxf" "all" \
        "org.videolan.vlc" "org.videolan.nsv" "all" \
        "org.videolan.vlc" "org.videolan.nuv" "all" \
        "org.videolan.vlc" "org.videolan.ogg-audio" "all" \
        "org.videolan.vlc" "org.videolan.ogg-video" "all" \
        "org.videolan.vlc" "org.videolan.oma" "all" \
        "org.videolan.vlc" "org.videolan.opus" "all" \
        "org.videolan.vlc" "org.videolan.quicktime" "all" \
        "org.videolan.vlc" "org.videolan.realmedia" "all" \
        "org.videolan.vlc" "org.videolan.rec" "all" \
        "org.videolan.vlc" "org.videolan.rmi" "all" \
        "org.videolan.vlc" "org.videolan.s3m" "all" \
        "org.videolan.vlc" "org.videolan.spx" "all" \
        "org.videolan.vlc" "org.videolan.tod" "all" \
        "org.videolan.vlc" "org.videolan.tta" "all" \
        "org.videolan.vlc" "org.videolan.vob" "all" \
        "org.videolan.vlc" "org.videolan.voc" "all" \
        "org.videolan.vlc" "org.videolan.vqf" "all" \
        "org.videolan.vlc" "org.videolan.vro" "all" \
        "org.videolan.vlc" "org.videolan.wav" "all" \
        "org.videolan.vlc" "org.videolan.webm" "all" \
        "org.videolan.vlc" "org.videolan.wma" "all" \
        "org.videolan.vlc" "org.videolan.wmv" "all" \
        "org.videolan.vlc" "org.videolan.wtv" "all" \
        "org.videolan.vlc" "org.videolan.wv" "all" \
        "org.videolan.vlc" "org.videolan.xa" "all" \
        "org.videolan.vlc" "org.videolan.xesc" "all" \
        "org.videolan.vlc" "org.videolan.xm" "all" \
        "org.videolan.vlc" "public.ac3-audio" "all" \
        "org.videolan.vlc" "public.audiovisual-content" "all" \
        "org.videolan.vlc" "public.avi" "all" \
        "org.videolan.vlc" "public.movie" "all" \
        "org.videolan.vlc" "public.mpeg" "all" \
        "org.videolan.vlc" "public.mpeg-2-video" "all" \
        "org.videolan.vlc" "public.mpeg-4" "all" \
      | while IFS=$'\t' read a b c; do
          defaults write org.duti DUTISettings -array-add \
            "{
              DUTIBundleIdentifier = '$a';
              DUTIUniformTypeIdentifier = '$b';
              DUTIRole = '$c';
            }"
      done

      duti "${HOME}/Library/Preferences/org.duti.plist" 2> /dev/null
    fi

    sudo rm -rf /Library/Caches/com.apple.iconservices.store
    sudo find /private/var/folders -depth \( -name com.apple.dock.iconcache -or -name com.apple.iconservices \) -exec rm -rf {} \;
    sudo touch /Applications/* /Applications/Utilities/* 2> /dev/null

    /System/Library/Frameworks/CoreServices.framework/Versions/Current/Frameworks/LaunchServices.framework/Versions/Current/Support/lsregister -kill -r -domain local -domain system -domain user

    sleep 5
    osascript -e 'tell app "Dock" to quit'
    killall Finder
  }
#+end_src

*** Configure Home

#+begin_src sh
  function config_home () {
    DROPBOX="/Volumes/Dropbox"
    STORAGE="/Volumes/Storage"

    printf "%s\t%s\n" \
      "${DROPBOX}/Dropbox" "Documents" \
      "${DROPBOX}/Dropbox" "Dropbox" \
      "${STORAGE}/Incoming/Downloads" "Downloads" \
      "${STORAGE}/Incoming/Movies" "Movies" \
      "${STORAGE}/Incoming/TV-Shows" "TV Shows" \
      "${STORAGE}/Media" "Music" \
    | while IFS=$'\t' read a b; do
      SetFile -P -a l "${HOME}/${b}" 1> /dev/null
      chmod -h -N "${HOME}/${b}" 2> /dev/null
      rm -rf "${HOME}/${b}"
      ln -s "${a}" "${HOME}/${b}"
      chmod -h go= "${HOME}/${b}"
      chmod -h +a "group:everyone deny delete" "${HOME}/${b}"
    done
  }
#+end_src

#+begin_src sh
  function config_done () {
    p "To copy gpg public key, enter 'config_gpg_help'"
    p "To copy ssh public key, enter 'config_ssh_help'"
    p "Otherwise, enter 'private' (if configured) or 'reboot' now"
  }
#+end_src

*** config

#+begin_src sh
  function config () {
    config_mas
    config_atom
    config_bbedit
    config_desktop
    config_dock
    config_emacs
    config_vi_script
    config_istat
    config_terminal
    config_openssl
    config_dovecot
    config_sieve
    config_getmail
    config_gpg
    config_git
    config_shell
    config_ssh
    #config_vim
    config_zsh
    config_loginitems
    config_handlers
    config_home
    config_done
  }
#+end_src

** Private

This section includes license keys, registration codes, and serial numbers.

#+begin_src sh
  function private () {
    printf "%s\n"
#+end_src

-----BEGIN PGP MESSAGE-----

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
TZembb0lMasR2Mo=
=duIk
-----END PGP MESSAGE-----

#+begin_src sh
  }
#+end_src


** Commands

#+begin_src sh
  function display_help () {
    cat << EOF

    Initialize:
      $(which init)

    Install:
      $(which install)

  EOF
  }

  display_help
  fi
#+end_src
