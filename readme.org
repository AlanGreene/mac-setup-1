* macOS Setup
:properties:
:header-args: :tangle setup.command
:header-args:sh: :shebang #!/bin/sh :results silent
:end:
#+startup: content nohideblocks hidestars indent

From clean install to fully configured.

#+begin_example sh :tangle no
  sudo "/Applications/Install macOS Sierra.app/Contents/Resources/createinstallmedia" \
    --applicationpath "/Applications/Install macOS Sierra.app" --nointeraction \
    --volume "/Volumes/Install"
#+end_example

** Initialize

*** New Terminal

#+begin_src sh
  if [ -z "$1" ]; then
    if [[ ! $SHELL == *"zsh" ]]; then
      chsh -s /bin/zsh
    fi

    osascript << EOF
  tell app "Terminal" to do script "source ${0} 0"
  EOF
    clear
  else
#+end_src

*** Constants

#+begin_src sh
  CACHE="/Volumes/Install"
  DOMAIN="ptb2.me"
  MAIL="mail.${DOMAIN}"

  MAS="$(getconf DARWIN_USER_CACHE_DIR)com.apple.appstore"
#+end_src

*** Utility Functions

#+begin_src sh
  function p () {
    printf "\n\033[1m\033[34m%s\033[0m\n\n" "${1}"
  }
#+end_src

*** Disable Repeated Requests for Password

#+begin_src sh
  function init_sudoers () {
    p "Disable repeated requests for password"

    printf "%s\t%s\n" \
      "timeout" "Defaults:%admin timestamp_timeout=-1" \
      "installer" "%admin ALL=(ALL) NOPASSWD:SETENV: /usr/sbin/installer" \
      "tty_tickets" 'Defaults:%admin !tty_tickets' \
    | while IFS=$'\t' read a b; do
      sudo tee "/etc/sudoers.d/${a}" <<< "${b}" > /dev/null
    done
  }
#+end_src

*** Disable System and Disk Sleep

#+begin_src sh
function init_no_sleep () {
  p "Disable system and disk sleep"

  sudo pmset -a sleep 0
  sudo pmset -a disksleep 0
}
#+end_src

*** Set Computer Name and Local Hostname

#+begin_src sh
  function init_hostname () {
    p "Set computer name and local hostname"
#+end_src

*Computer Name*
#+begin_src sh
  sudo systemsetup -setcomputername $(ruby -e "print '$(hostname -s)'.capitalize") &> /dev/null
#+end_src

*Local Hostname*
#+begin_src sh
  sudo systemsetup -setlocalsubnetname $(hostname -s) &> /dev/null
#+end_src

#+begin_src sh
  }
#+end_src

*** Set Permissions on Install Destinations

#+begin_src sh
  function init_perms () {
    p "Set permissions on install destinations"

    for c in \
      "/Library/ColorPickers" \
      "/Library/Fonts" \
      "/Library/Input Methods" \
      "/Library/PreferencePanes" \
      "/Library/QuickLook" \
      "/Library/Screen Savers" \
      "/usr/local" \
    ; do
      sudo chgrp -R admin "${c}"
      sudo chmod -R g+w "${c}"
    done

    if [ ! -d "/usr/local/bin" ]; then
      mkdir -m o-w -p "/usr/local/bin"
    fi
  }
#+end_src

*** Install Developer Tools

#+begin_src sh
  function init_devtools () {
    p "Install developer tools"

    if [ -d "${CACHE}/Updates" ]; then
      sudo chown -R "${USER}" "/Library/Updates"
      rsync -a --delay-updates \
        "${CACHE}/Updates/" "/Library/Updates/"
    fi

    xcode-select --install
  }
#+end_src

*** Install macOS Updates

#+begin_src sh
  function init_updater () {
    p "Install macOS updates"

    if [ -d "${CACHE}/Updates" ]; then
      sudo chown -R "${USER}" "/Library/Updates"
      rsync -a --delay-updates \
        "${CACHE}/Updates/" "/Library/Updates/"
    fi

    sudo softwareupdate --install --all
  }
#+end_src

*** Create Primary Account

#+begin_src sh
  function init_account () {
    p "Create primary user account"

    /bin/echo -n "Real name: " && read NAME
    /bin/echo -n "Account name: " && read U
    /bin/echo -n "Email address: " && read EMAIL

    sudo chgrp admin "/Library/User Pictures"
    sudo chmod g+w "/Library/User Pictures"
    curl "https://www.gravatar.com/avatar/$(md5 -qs $EMAIL).jpg?s=512" --silent \
      --compressed --location --output "/Library/User Pictures/${EMAIL}.jpg" \

    sudo defaults write \
      "/System/Library/User Template/Non_localized/Library/Preferences/.GlobalPreferences.plist" \
      "com.apple.swipescrolldirection" -bool false

    sudo sysadminctl -addUser "${U}" -fullName "${NAME}" -password - \
      -shell "/bin/zsh" -admin -picture "/Library/User Pictures/${EMAIL}.jpg"

    p "Press any key to log out."
    /usr/bin/read -n 1 -s

    osascript -e 'tell application "loginwindow" to «event aevtrlgo»'
  }
#+end_src

*** init

#+begin_src sh
  function init () {
    init_sudoers
    init_no_sleep
    init_hostname
    init_perms
    init_devtools
    init_updater
    init_account
  }
#+end_src

** Install

*** Homebrew and App Store Caches

#+begin_src sh
  function install_caches () {
    if [ -d "${CACHE}/Homebrew" ]; then
      p "Restore Homebrew caches from backup"

      rsync -a --delay-updates \
        "${CACHE}/Homebrew/" "${HOME}/Library/Caches/Homebrew/"
    fi

    if [ -d "${CACHE}/Updates" ]; then
      p "Restore App Store caches from backup"

      sudo chown -R "${USER}" "${MAS}"
      rsync -a --delay-updates \
        "${CACHE}/App Store/" "${MAS}/"
    fi
  }
#+end_src

*** Default Paths

#+begin_src sh
  function install_paths () {
    if ! grep -Fq "/usr/local/sbin" /etc/paths; then
      p "Add '/usr/local/sbin' to default \$PATH"

      sudo sed -i -e "/\/usr\/sbin/{x;s/$/\/usr\/local\/sbin/;G;}" /etc/paths
    fi
  }
#+end_src

*** [[https://brew.sh/][Homebrew]]

#+begin_src sh
  function install_brew () {
    p "Install Homebrew"

    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

    brew analytics off

    brew update
    brew doctor

    brew tap "homebrew/bundle"
#+end_src

*** [[https://github.com/Homebrew/homebrew-bundle][Brewfile]]

#+begin_src sh
  cat > /usr/local/Brewfile << EOF
  cask_args colorpickerdir: "/Library/ColorPickers",
    fontdir: "/Library/Fonts",
    input_methoddir: "/Library/Input Methods",
    prefpanedir: "/Library/PreferencePanes",
    qlplugindir: "/Library/QuickLook",
    screen_saverdir: "/Library/Screen Savers"

  tap "homebrew/bundle"
  tap "caskroom/cask"

  brew "rsync"
  brew "mas"
  mas "autoping", id: 632347870

  cask "docker-toolbox"
  cask "java"
  cask "vmware-fusion"

  cask "xquartz"
  cask "inkscape"
  cask "wireshark"

  brew "aspell",
    args: ["lang=en"]
  brew "chromedriver"
  brew "coreutils"
  tap "homebrew/services"
  brew "dovecot",
    args: [
    "with-pam",
    "with-pigeonhole" ]
  brew "duti"
  brew "fdupes"
  brew "gawk"
  brew "getmail"
  brew "git"
  brew "gnu-sed",
    args: ["with-default-names"]
  brew "gnupg"
  brew "gpac"
  brew "hub"
  brew "ievms"
  brew "imagemagick"
  brew "mercurial"
  brew "mp4v2"
  brew "mtr"
  brew "nmap"
  brew "nvm"
  brew "openssl"
  brew "pinentry-mac"
  brew "pyenv"
  brew "rbenv"
  brew "selenium-server-standalone"
  brew "sqlite"
  brew "stow"
  brew "terminal-notifier"
  brew "trash"
  brew "vim"
  brew "wget"
  brew "yarn",
    args: ["ignore-dependencies"]
  brew "youtube-dl"
  brew "zsh"

  cask "adium"
  cask "airfoil"
  cask "alfred"
  cask "arduino"
  cask "atom"
  cask "autodmg"
  cask "bbedit"
  cask "caffeine"
  cask "carbon-copy-cloner"
  cask "charles"
  cask "dash"
  cask "dropbox"
  cask "duet"
  cask "exifrenamer"
  cask "firefox"
  cask "flux"
  cask "github-desktop"
  cask "gitup"
  cask "google-chrome"
  cask "handbrake"
  cask "hermes"
  cask "imageoptim"
  cask "integrity"
  cask "istat-menus"
  cask "jubler"
  cask "little-snitch"
  cask "machg"
  cask "makemkv"
  cask "menubar-countdown"
  cask "meteorologist"
  cask "moom"
  cask "mp4tools"
  cask "munki"
  cask "musicbrainz-picard"
  cask "namechanger"
  cask "nvalt"
  cask "nzbget"
  cask "nzbvortex"
  cask "openemu"
  cask "opera"
  cask "pacifist"
  cask "platypus"
  cask "plex-media-server"
  cask "quitter"
  cask "rescuetime"
  cask "scrivener"
  cask "sitesucker"
  cask "sizeup"
  cask "sketch"
  cask "sketchup"
  cask "skitch"
  cask "skype"
  cask "slack"
  cask "sonarr"
  cask "sonarr-menu"
  cask "sourcetree"
  cask "steermouse"
  cask "subler"
  cask "sublime-text"
  cask "the-unarchiver"
  cask "time-sink"
  cask "torbrowser"
  cask "tower"
  cask "transmit"
  cask "unrarx"
  cask "vimr"
  cask "vlc"
  cask "xld"

  tap "railwaycat/emacsmacport"
  cask "railwaycat/emacsmacport/emacs-mac-spacemacs-icon"

  tap "caskroom/fonts"
  cask "caskroom/fonts/font-inconsolata-lgc"

  # tap "caskroom/versions"
  # cask "caskroom/versions/safari-technology-preview"

  tap "ptb/custom"
  cask "ptb/custom/adobe-creative-cloud-2014"
  cask "ptb/custom/blankscreen"
  cask "ptb/custom/composer"
  cask "ptb/custom/enhanced-dictation"
  cask "ptb/custom/ipmenulet"
  cask "ptb/custom/pcalc-3"
  cask "ptb/custom/sketchup-pro"
  cask "ptb/custom/synergy"

  mas "1Password", id: 443987910
  mas "Coffitivity", id: 659901392
  mas "Growl", id: 467939042
  mas "HardwareGrowler", id: 475260933
  mas "I Love Stars", id: 402642760
  mas "Icon Slate", id: 439697913
  mas "Justnotes", id: 511230166
  mas "Keynote", id: 409183694
  mas "Numbers", id: 409203825
  mas "Pages", id: 409201541
  mas "WiFi Explorer", id: 494803304

  tap "homebrew/nginx"
  brew "homebrew/nginx/nginx-full",
    args: [
    "with-dav-ext-module",
    "with-fancyindex-module",
    "with-gzip-static",
    "with-http2",
    "with-mp4-h264-module",
    "with-passenger",
    "with-push-stream-module",
    "with-secure-link",
    "with-webdav" ]

  brew "ptb/custom/ffmpeg",
    args: [
    "with-chromaprint",
    "with-fdk-aac",
    "with-fontconfig",
    "with-freetype",
    "with-frei0r",
    "with-game-music-emu",
    "with-lame",
    "with-libass",
    "with-libbluray",
    "with-libbs2b",
    "with-libcaca",
    "with-libgsm",
    "with-libmodplug",
    "with-libsoxr",
    "with-libssh",
    "with-libvidstab",
    "with-libvorbis",
    "with-libvpx",
    "with-opencore-amr",
    "with-openh264",
    "with-openjpeg",
    "with-openssl",
    "with-opus",
    "with-pkg-config",
    "with-rtmpdump",
    "with-rubberband",
    "with-schroedinger",
    "with-sdl2",
    "with-snappy",
    "with-speex",
    "with-tesseract",
    "with-texi2html",
    "with-theora",
    "with-tools",
    "with-two-lame",
    "with-wavpack",
    "with-webp",
    "with-x264",
    "with-x265",
    "with-xvid",
    "with-xz",
    "with-yasm",
    "with-zeromq",
    "with-zimg" ]

  mas "Xcode", id: 497799835
  EOF
  }
#+end_src

*** macOS Software

#+begin_src sh
  function install_macos_sw () {
    p "Install macOS software with Homebrew"

    cd /usr/local/ && brew bundle && cd "${HOME}"

    if [ -d "/Applications/Xcode.app" ]; then
      sudo xcodebuild -license accept
    fi

    brew upgrade
  }
#+end_src

*** Link Utilities

#+begin_src sh
  function install_links () {
    p "Link System and Xcode utilities to Applications"

    brew linkapps 2> /dev/null
    cd /Applications \
      && for a in /System/Library/CoreServices/Applications/*; do
        ln -s "../..$a" . 2> /dev/null
      done && \
    cd "${HOME}"

    if [ -d "/Applications/Xcode.app" ]; then
      cd /Applications \
        && for b in /Applications/Xcode.app/Contents/Applications/*; do
          ln -s "../..$b" . 2> /dev/null
        done \
        && for c in /Applications/Xcode.app/Contents/Developer/Applications/*; do
          ln -s "../..$c" . 2> /dev/null
        done && \
      cd "${HOME}"
    fi
  }
#+end_src

*** Node Software

#+begin_src sh
  function install_node_sw () {
    p "Install Node software"

    printf "%s\n" \
      'export NVM_DIR="/usr/local/node"' \
    >> "${HOME}/.zshenv"
    source "${HOME}/.zshenv"

    printf "%s\n" \
      '[ -s "$(brew --prefix)/opt/nvm/nvm.sh" ] && . "$(brew --prefix)/opt/nvm/nvm.sh"' \
    >> "${HOME}/.zshrc"
    source "${HOME}/.zshrc"

    nvm install node
  }
#+end_src

*** Python Software

[[http://akbaribrahim.com/managing-multiple-python-versions-with-pyenv/][Managing Multiple Python Versions with pyenv]]

#+begin_src sh
  function install_python_sw () {
    p "Install Python software"

    printf "%s\n" \
      'export PYENV_ROOT="/usr/local/python"' \
    >> "${HOME}/.zshenv"
    source "${HOME}/.zshenv"

    printf "%s\n" \
      'if which pyenv > /dev/null; then eval "$(pyenv init -)"; fi' \
    >> "${HOME}/.zshrc"
    source "${HOME}/.zshrc"

    pyenv install --skip-existing 2.7.13
    pyenv install --skip-existing 3.6.2
    pyenv global 2.7.13

    pip install --upgrade "pip" "setuptools"
#+end_src

[[https://github.com/mdhiggins/sickbeard_mp4_automator][Automatic MP4 Conversion/Tagging]]

#+begin_src sh
  pip install --upgrade "babelfish" "guessit<2" "qtfaststart" "requests" "stevedore==1.19.1" "subliminal<2"
  pip install --upgrade "requests-cache" "requests[security]"

  mkdir -m go= -p "${HOME}/.config/NzbDrone"
  git clone "https://github.com/mdhiggins/sickbeard_mp4_automator.git" \
    "${HOME}/.config/NzbDrone/scripts" --depth 1
  cd "${HOME}/.config/NzbDrone/scripts" && pyenv local 2.7.13 && cd "${HOME}"
#+end_src

#+begin_src sh
  pip install --upgrade "crudini"
#+end_src

#+begin_src sh
  }
#+end_src

*** Ruby Software

#+begin_src sh
  function install_ruby_sw () {
    p "Install Ruby software"

    printf "%s\n" \
      'export RBENV_ROOT="/usr/local/ruby"' \
    >> "${HOME}/.zshenv"
    source "${HOME}/.zshenv"

    printf "%s\n" \
      'if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi' \
    >> "${HOME}/.zshrc"
    source "${HOME}/.zshrc"

    rbenv install --skip-existing 2.4.1
    rbenv global 2.4.1

    printf "%s\n" \
      "gem: --no-document" \
    >> "${HOME}/.gemrc"

    gem update --system
    gem update
    gem install bundler
  }
#+end_src

*** install

#+begin_src sh
  function install () {
    install_caches
    install_paths
    install_brew
    install_macos_sw
    install_links
    install_node_sw
    install_python_sw
    install_ruby_sw

    which prefs
  }
#+end_src

** Preferences

*** Autoping

#+begin_src sh
  function prefs_autoping () {
    defaults write -app autoping Hostname -string "google.com"
    defaults write -app autoping LaunchAtLogin -bool true
    defaults write -app autoping ShowNotifications -bool true
    defaults write -app autoping ShowPacketLossText -bool true
  }
#+end_src

*** Finder

**** General

#+begin_src sh
  function prefs_finder () {
    p "Set Finder preferences"
#+end_src

*Show these items on the desktop: Hard disks:* =on=
#+begin_src sh
  defaults write com.apple.finder ShowHardDrivesOnDesktop -bool false
#+end_src

*Show these items on the desktop: External disks:* =on=
#+begin_src sh
  defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool false
#+end_src

*Show these items on the desktop: CDs, DVDs, and iPods:* =on=
#+begin_src sh
  defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool false
#+end_src

*Show these items on the desktop: Connected servers:* =on=
#+begin_src sh
  defaults write com.apple.finder ShowMountedServersOnDesktop -bool true
#+end_src

*New Finder windows show:* =${HOME}=
#+begin_src sh
  defaults write com.apple.finder NewWindowTarget -string "PfHm"
  defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}/"
#+end_src

**** Advanced

*Show all filename extensions:* =on=
#+begin_src sh
  defaults write -globalDomain AppleShowAllExtensions -bool true
#+end_src

*Show warning before changing an extension:* =off=
#+begin_src sh
  defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false
#+end_src

*Show warning before removing from iCloud Drive:* =on=
#+begin_src sh
  defaults write com.apple.finder FXEnableRemoveFromICloudDriveWarning -bool true
#+end_src

*Show warning before emptying the Trash:* =on=
#+begin_src sh
  defaults write com.apple.finder WarnOnEmptyTrash -bool false
#+end_src

**** View

*Show Path Bar*
#+begin_src sh
  defaults write com.apple.finder ShowPathbar -bool true
#+end_src

*Show Status Bar*
#+begin_src sh
  defaults write com.apple.finder ShowStatusBar -bool true
#+end_src

*Customize Toolbar…*
#+begin_src sh
  defaults write com.apple.finder "NSToolbar Configuration Browser" '{ "TB Item Identifiers" = ( "com.apple.finder.BACK", "com.apple.finder.PATH", "com.apple.finder.SWCH", "com.apple.finder.ARNG", "NSToolbarFlexibleSpaceItem", "com.apple.finder.SRCH", "com.apple.finder.ACTN" ); "TB Display Mode" = 2; }'
#+end_src

**** View Options

*Show Library Folder:* =on=
#+begin_src sh
  chflags nohidden "${HOME}/Library"
#+end_src

**** Window

*Copy*
#+begin_src sh
  defaults write com.apple.finder CopyProgressWindowLocation -string "{2160, 23}"
#+end_src

#+begin_src sh
  }
#+end_src

*** Moom

**** General

#+begin_src sh
  function prefs_moom () {
    p "Set Moom preferences"
#+end_src

*Treat drawers as part of their parent windows:* =on=
#+begin_src sh
  defaults write -app Moom "Allow For Drawers" -bool true
#+end_src

*Separate windows by* =2= *pt*
#+begin_src sh
  defaults write -app Moom "Grid Spacing" -bool true
  defaults write -app Moom "Grid Spacing: Gap" -int 2
  defaults write -app Moom "Grid Spacing: Apply To Edges" -bool false
#+end_src

*Show preferences on launch:* =off=
#+begin_src sh
  defaults write -app Moom "Stealth Mode" -bool true
#+end_src

*Run as* =faceless= *application*
#+begin_src sh
  defaults write -app Moom "Application Mode" -int 2
#+end_src

**** Mouse

=on= *Enable Move & Zoom grid with* =10= *×* =6= *cells*
#+begin_src sh
  defaults write -app Moom "Mouse Controls Grid" -bool true
  defaults write -app Moom "Mouse Controls Grid: Columns" -int 10
  defaults write -app Moom "Mouse Controls Grid: Rows" -int 6
#+end_src

=on= *Enable access to custom controls*
#+begin_src sh
  defaults write -app Moom "Mouse Controls Include Custom Controls" -bool true
#+end_src

=on= *Bring moomed windows to the front automatically*
#+begin_src sh
  defaults write -app Moom "Mouse Controls Auto-Activate Window" -bool true
#+end_src

=off= *Move & Zoom when dragging a window to a display edge or corner*
#+begin_src sh
  defaults write -app Moom "Snap" -bool false
#+end_src

**** Custom

#+begin_src sh
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0, 0.33333}, {0.5, 0.66666}}"; }'
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0, 0}, {0.3, 0.33333}}"; }'
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0.4, 0.33333}, {0.3, 0.66666}}"; }'
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0.3, 0}, {0.4, 0.33333}}"; }'
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0.7, 0.66666}, {0.3, 0.33333}}"; }'
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0.7, 0.33333}, {0.3, 0.33333}}"; }'
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0.7, 0}, {0.3, 0.33333}}"; }'
#+end_src

*Define window sizes using* =10= *×* =6= *cells*
#+begin_src sh
  defaults write -app Moom "Configuration Grid: Columns" -int 10
  defaults write -app Moom "Configuration Grid: Rows" -int 6
#+end_src

#+begin_src sh
  }
#+end_src

*** nvALT

**** General

#+begin_src sh
  function prefs_nvalt () {
    p "Set nvALT preferences"
#+end_src

*List Text Size:* =Small=
#+begin_src sh
  defaults write -app nvALT TableFontPointSize -int 11
#+end_src

*Bring-to-Front Hotkey:* =(None)=
#+begin_src sh
  defaults write -app nvALT AppActivationKeyCode -int -1
  defaults write -app nvALT AppActivationModifiers -int -1
#+end_src

*Auto-select notes by title when searching:* =on=
#+begin_src sh
  defaults write -app nvALT AutoCompleteSearches -bool true
#+end_src

*Confirm note deletion:* =on=
#+begin_src sh
  defaults write -app nvALT ConfirmNoteDeletion -bool true
#+end_src

*Quit when closing window:* =off=
#+begin_src sh
  defaults write -app nvALT QuitWhenClosingMainWindow -bool false
#+end_src

*Show menu bar icon:* =on=
#+begin_src sh
  defaults write -app nvALT StatusBarItem -bool true
#+end_src

*Hide Dock Icon*
#+begin_src sh
  defaults write -app nvALT ShowDockIcon -bool false
#+end_src

**** Editing

*Styled Text: Copy basic styles from other apps:* =off=
#+begin_src sh
  defaults write -app nvALT PastePreservesStyle -bool false
#+end_src

*Spelling: Check as you type:* =off=
#+begin_src sh
  defaults write -app nvALT CheckSpellingInNoteBody -bool false
#+end_src

*Tab Key:* =Indent lines=
#+begin_src sh
  defaults write -app nvALT TabKeyIndents -bool true
#+end_src

*Soft tabs (spaces):* =on=
#+begin_src sh
  defaults write -app nvALT UseSoftTabs -bool true
#+end_src

*Links: Make URLs clickable links:* =on=
#+begin_src sh
  defaults write -app nvALT MakeURLsClickable -bool true
#+end_src

*Links: Suggest titles for note-links:* =off=
#+begin_src sh
  defaults write -app nvALT AutoSuggestLinks -bool false
#+end_src

*URL Import: Convert imported URLs to Markdown:* =off=
#+begin_src sh
  defaults write -app nvALT UseMarkdownImport -bool false
#+end_src

*URL Import: Process with Readability:* =off=
#+begin_src sh
  defaults write -app nvALT UseReadability -bool false
#+end_src

*Direction: Right-To-Left (RTL):* =off=
#+begin_src sh
  defaults write -app nvALT rtl -bool false
#+end_src

*Auto-pair:* =on=
#+begin_src sh
  defaults write -app nvALT UseAutoPairing -bool true
#+end_src

*External editor:* =Emacs.app=
#+begin_src sh
  defaults write -app nvALT DefaultEEIdentifier -string "org.gnu.Emacs"
  defaults write -app nvALT UserEEIdentifiers -array "com.apple.TextEdit" "org.gnu.Emacs"
#+end_src

**** Fonts & Colors

*Body Font:* =InconsolataLGC 13=
#+begin_src sh
  defaults write -app nvALT NoteBodyFont -data 040b73747265616d747970656481e803840140848484064e53466f6e741e8484084e534f626a65637400858401692884055b3430635d060000001e000000fffe49006e0063006f006e0073006f006c006100740061004c004700430000008401660d8401630098019800980086
#+end_src

*Search Highlight:* =on=
#+begin_src sh
  defaults write -app nvALT HighlightSearchTerms -bool true
#+end_src

*Search Highlight:* =#CCFFCC=
#+begin_src sh
  defaults write -app nvALT SearchTermHighlightColor -data 040b73747265616d747970656481e803840140848484074e53436f6c6f72008484084e534f626a65637400858401630184046666666683cdcc4c3f0183cdcc4c3f0186
#+end_src

*Foreground Text:* =#CCCCCC=
#+begin_src sh
  defaults write -app nvALT ForegroundTextColor -data 040b73747265616d747970656481e803840140848484074e53436f6c6f72008484084e534f626a65637400858401630184046666666683cdcc4c3f83cdcc4c3f83cdcc4c3f0186
#+end_src

*Background:* =#1A1A1A=
#+begin_src sh
  defaults write -app nvALT BackgroundTextColor -data 040b73747265616d747970656481e803840140848484074e53436f6c6f72008484084e534f626a65637400858401630184046666666683d1d0d03d83d1d0d03d83d1d0d03d0186
#+end_src

*Always Show Grid Lines in Notes List:* =on=
#+begin_src sh
  defaults write -app nvALT ShowGrid -bool true
#+end_src

*Alternating Row Colors:* =on=
#+begin_src sh
  defaults write -app nvALT AlternatingRows -bool true
#+end_src

*Use nvALT Scrollbars:* =off=
#+begin_src sh
  defaults write -app nvALT UseETScrollbarsOnLion -bool false
#+end_src

*Keep Note Body Width Readable:* =on=
#+begin_src sh
  defaults write -app nvALT KeepsMaxTextWidth -bool true
#+end_src

*Max. Note Body Width:* =650= *pixels*
#+begin_src sh
  defaults write -app nvALT NoteBodyMaxWidth -int 650
#+end_src

**** View

*Switch to Vertical Layout*
#+begin_src sh
  defaults write -app nvALT HorizontalLayout -bool false
#+end_src

*Columns* > =Title= =Tags=
#+begin_src sh
  defaults write -app nvALT NoteAttributesVisible -array "Title" "Tags"
#+end_src

*Sort By* > =Date Modified=
#+begin_src sh
  defaults write -app nvALT TableIsReverseSorted -bool true
  defaults write -app nvALT TableSortColumn -string "Date Modified"
#+end_src

*Show Note Previews in Title*
#+begin_src sh
  defaults write -app nvALT TableColumnsHaveBodyPreview -bool true
#+end_src

#+begin_src sh
  }
#+end_src

*** Safari

**** General

#+begin_src sh
  function prefs_safari () {
    p "Set Safari preferences"
#+end_src

*Safari opens with:* =A new window=
#+begin_src sh
  defaults write -app Safari AlwaysRestoreSessionAtLaunch -bool false
  defaults write -app Safari OpenPrivateWindowWhenNotRestoringSessionAtLaunch -bool false
#+end_src

*New windows open with:* =Empty Page=
#+begin_src sh
  defaults write -app Safari NewWindowBehavior -int 1
#+end_src

*New tabs open with:* =Empty Page=
#+begin_src sh
  defaults write -app Safari NewTabBehavior -int 1
#+end_src

=off= *Open “safe” files after downloading*
#+begin_src sh
  defaults write -app Safari AutoOpenSafeDownloads -bool false
#+end_src

**** Tabs

*Open pages in tabs instead of windows:* =Always=
#+begin_src sh
  defaults write -app Safari TabCreationPolicy -int 2
#+end_src

**** AutoFill

=off= *Using info from my contacts*
#+begin_src sh
  defaults write -app Safari AutoFillFromAddressBook -bool false
#+end_src

=on= *User names and passwords*
#+begin_src sh
  defaults write -app Safari AutoFillPasswords -bool true
#+end_src

=off= *Credit cards*
#+begin_src sh
  defaults write -app Safari AutoFillCreditCardData -bool false
#+end_src

=off= *Other forms*
#+begin_src sh
  defaults write -app Safari AutoFillMiscellaneousForms -bool false
#+end_src

**** Search

=on= *Include search engine suggestions*
#+begin_src sh
  defaults write -app Safari SuppressSearchSuggestions -bool false
#+end_src

*Smart Search Field:* =off= *Include Safari Suggestions*
#+begin_src sh
  defaults write -app Safari UniversalSearchEnabled -bool false
#+end_src

*Smart Search Field:* =on= *Enable Quick Website Search*
#+begin_src sh
  defaults write -app Safari WebsiteSpecificSearchEnabled -bool true
#+end_src

*Smart Search Field:* =on= *Preload Top Hit in the background*
#+begin_src sh
  defaults write -app Safari PreloadTopHit -bool true
#+end_src

=off= *Show Favorites*
#+begin_src sh
  defaults write -app Safari ShowFavoritesUnderSmartSearchField -bool false
#+end_src

**** Privacy

*Website use of location services:* =Deny without prompting=
#+begin_src sh
  defaults write -app Safari SafariGeolocationPermissionPolicy -int 0
#+end_src

*Website tracking:* =on= *Ask websites not to track me*
#+begin_src sh
  defaults write -app Safari SendDoNotTrackHTTPHeader -bool true
#+end_src

*Apple Pay:* =on= *Allow websites to check if Apple Pay is set up*
#+begin_src sh
  defaults write -app Safari "com.apple.Safari.ContentPageGroupIdentifier.WebKit2ApplePayCapabilityDisclosureAllowed" -bool true
#+end_src

**** Notifications

=off= *Allow websites to ask for permission to send push notifications*
#+begin_src sh
  defaults write -app Safari CanPromptForPushNotifications -bool false
#+end_src

**** Advanced

*Smart Search Field:* =on= *Show full website address*
#+begin_src sh
  defaults write -app Safari ShowFullURLInSmartSearchField -bool true
#+end_src

*Default encoding:* =Unicode (UTF-8)=
#+begin_src sh
  defaults write -app Safari WebKitDefaultTextEncodingName -string "utf-8"
  defaults write -app Safari "com.apple.Safari.ContentPageGroupIdentifier.WebKit2DefaultTextEncodingName" -string "utf-8"
#+end_src

=on= *Show Develop menu in menu bar*
#+begin_src sh
  defaults write -app Safari IncludeDevelopMenu -bool true
  defaults write -app Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true
  defaults write -app Safari "com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled" -bool true
#+end_src

**** View

*Show Favorites Bar*
#+begin_src sh
  defaults write -app Safari "ShowFavoritesBar-v2" -bool true
#+end_src

*Show Tab Bar*
#+begin_src sh
  defaults write -app Safari AlwaysShowTabBar -bool true
#+end_src

*Show Status Bar*
#+begin_src sh
  defaults write -app Safari ShowStatusBar -bool true
  defaults write -app Safari ShowStatusBarInFullScreen -bool true
#+end_src

#+begin_src sh
  }
#+end_src

*** System

**** General

#+begin_src sh
  function prefs_general () {
    p "Set System preferences"
#+end_src

*Appearance:* =Graphite= *For Buttons, Menus, and Windows*
#+begin_src sh
  defaults write -globalDomain "AppleAquaColorVariant" -int 6
#+end_src

=on= *Use dark menu bar and Dock*
#+begin_src sh
  defaults write -globalDomain "AppleInterfaceStyle" -string "Dark"
#+end_src

=off= *Automatically hide and show the menu bar*
#+begin_src sh
  defaults write -globalDomain "_HIHideMenuBar" -bool false
#+end_src

*Highlight color:* =#99CC99= =Other…=
#+begin_src sh
  defaults write -globalDomain "AppleHighlightColor" -string "0.600000 0.800000 0.600000"
#+end_src

*Sidebar icon size:* =Small=
#+begin_src sh
  defaults write -globalDomain "NSTableViewDefaultSizeMode" -int 1
#+end_src

*Show scroll bars:* =Always=
#+begin_src sh
  defaults write -globalDomain "AppleShowScrollBars" -string "Always"
#+end_src

*Click in the scroll bar to:* =Jump to the next page=
#+begin_src sh
  defaults write -globalDomain "AppleScrollerPagingBehavior" -bool false
#+end_src

=on= *Ask to keep changes when closing documents*
#+begin_src sh
  defaults write -globalDomain "NSCloseAlwaysConfirmsChanges" -bool true
#+end_src

=on= *Close windows when quitting an app*
#+begin_src sh
  defaults write -globalDomain "NSQuitAlwaysKeepsWindows" -bool false
#+end_src

*Recent items:* =None= *Documents, Apps, and Servers*
#+begin_src sh
  osascript << EOF
    tell application "System Events"
      tell appearance preferences
        set recent documents limit to 0
        set recent applications limit to 0
        set recent servers limit to 0
      end tell
    end tell
  EOF
#+end_src

=on= *Allow Handoff between this Mac and your iCloud devices*
#+begin_src sh
  defaults -currentHost write com.apple.coreservices.useractivityd "ActivityAdvertisingAllowed" -bool true
  defaults -currentHost write com.apple.coreservices.useractivityd "ActivityReceivingAllowed" -bool true
#+end_src

=on= *Use LCD font smoothing when available*
#+begin_src sh
  defaults -currentHost delete -globalDomain "AppleFontSmoothing" 2> /dev/null
#+end_src

#+begin_src sh
  }
#+end_src

**** Desktop & Screen Saver: Screen Saver

#+begin_src sh
  function prefs_screensaver () {
#+end_src

*Start after:* =Never=
#+begin_src sh
  defaults -currentHost write com.apple.screensaver "idleTime" -int 0
#+end_src

*Hot Corners…: Top Left:* =⌘ Mission Control=
#+begin_src sh
  defaults write com.apple.dock "wvous-tl-corner" -int 2
  defaults write com.apple.dock "wvous-tl-modifier" -int 1048576
#+end_src

*Hot Corners…: Bottom Left:* =Put Display to Sleep=
#+begin_src sh
  defaults write com.apple.dock "wvous-bl-corner" -int 10
  defaults write com.apple.dock "wvous-bl-modifier" -int 0
#+end_src

#+begin_src sh
  }
#+end_src

**** Dock

#+begin_src sh
  function prefs_dock () {
#+end_src

*Size:* =32=
#+begin_src sh
  defaults write com.apple.dock "tilesize" -int 32
#+end_src

=off= *Magnification*
#+begin_src sh
  defaults write com.apple.dock "magnification" -bool false
  defaults write com.apple.dock "largesize" -int 64
#+end_src

*Position on screen:* =Right=
#+begin_src sh
  defaults write com.apple.dock "orientation" -string "right"
#+end_src

*Minimize windows using:* =Scale effect=
#+begin_src sh
  defaults write com.apple.dock "mineffect" -string "scale"
#+end_src

*Prefer tabs when opening documents:* =Always=
#+begin_src sh
  defaults write -globalDomain "AppleWindowTabbingMode" -string "always"
#+end_src

=off= *Double-click a window’s title bar to* =None=
#+begin_src sh
  defaults write -globalDomain "AppleActionOnDoubleClick" -string "None"
#+end_src

=on= *Minimize windows into application icon*
#+begin_src sh
  defaults write com.apple.dock "minimize-to-application" -bool true
#+end_src

=off= *Animate opening applications*
#+begin_src sh
  defaults write com.apple.dock "launchanim" -bool false
#+end_src

=on= *Automatically hide and show the Dock*
#+begin_src sh
  defaults write com.apple.dock "autohide" -bool true
#+end_src

=on= *Show indicators for open applications*
#+begin_src sh
  defaults write com.apple.dock "show-process-indicators" -bool true
#+end_src

#+begin_src sh
  }
#+end_src

**** Security & Privacy: General

#+begin_src sh
  function prefs_security () {
#+end_src

=on= *Require password* =5 seconds= *after sleep or screen saver begins*
#+begin_src sh
  defaults write com.apple.screensaver "askForPassword" -int 1
  defaults write com.apple.screensaver "askForPasswordDelay" -int 5
#+end_src

#+begin_src sh
  }
#+end_src

**** Energy Saver: Power

#+begin_src sh
  function prefs_power () {
#+end_src

*Turn display off after:* =20 min=
#+begin_src sh
  sudo pmset -c displaysleep 20
#+end_src

=on= *Prevent computer from sleeping automatically when the display is off*
#+begin_src sh
  sudo pmset -c sleep 0
#+end_src

=60 min= *Put hard disks to sleep when possible*
#+begin_src sh
  sudo pmset -c disksleep 60
#+end_src

=on= *Wake for network access*
#+begin_src sh
  sudo pmset -c womp 1
#+end_src

=on= *Start up automatically after a power failure*
#+begin_src sh
  sudo pmset -c autorestart 1
#+end_src

=on= *Enable Power Nap*
#+begin_src sh
  sudo pmset -c powernap 1
#+end_src

#+begin_src sh
  }
#+end_src

**** Energy Saver: UPS

#+begin_src sh
  function prefs_ups () {
#+end_src

*Turn display off after:* =2 min=
#+begin_src sh
  sudo pmset -u displaysleep 2
#+end_src

=on= *Slightly dim the display when using this power source*
#+begin_src sh
  sudo pmset -u lessbright 1
#+end_src

=on= *Shut down the computer after using the UPS battery for:* =5 min=
#+begin_src sh
  sudo pmset -u haltafter 5
#+end_src

=off= *Shut down the computer when the time remaining on the UPS battery is:*
#+begin_src sh
  sudo pmset -u haltremain -1
#+end_src

=off= *Shut down the computer when the UPS battery level is below:*
#+begin_src sh
  sudo pmset -u haltlevel -1
#+end_src

#+begin_src sh
  }
#+end_src

**** Keyboard: Text

#+begin_src sh
  function prefs_text () {
#+end_src

=off= *Capitalize words automatically*
#+begin_src sh
  defaults write -globalDomain NSAutomaticCapitalizationEnabled -bool false
#+end_src

=off= *Add period with double-space*
#+begin_src sh
  defaults write -globalDomain NSAutomaticPeriodSubstitutionEnabled -bool false
#+end_src

=off= *Use smart quotes and dashes*
#+begin_src sh
  defaults write -globalDomain NSAutomaticQuoteSubstitutionEnabled -bool false
#+end_src

#+begin_src sh
  }
#+end_src

**** Mouse

#+begin_src sh
  function prefs_mouse () {
#+end_src

=off= *Scroll direction: Natural*
#+begin_src sh
  defaults write -globalDomain com.apple.swipescrolldirection -bool false
#+end_src

#+begin_src sh
  }
#+end_src

**** Trackpad: Point & Click

#+begin_src sh
  function prefs_trackpad () {
#+end_src

=on= *Tap to click*
#+begin_src sh
  defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
  defaults -currentHost write -globalDomain com.apple.mouse.tapBehavior -int 1
#+end_src

#+begin_src sh
  }
#+end_src

**** Sound: Sound Effects

#+begin_src sh
  function prefs_sound () {
#+end_src

*Select an alert sound:* =Sosumi=
#+begin_src sh
  defaults write -globalDomain "com.apple.sound.beep.sound" -string "/System/Library/Sounds/Sosumi.aiff"
#+end_src

=off= *Play user interface sound effects*
#+begin_src sh
  defaults write -globalDomain "com.apple.sound.uiaudio.enabled" -int 0
#+end_src

=off= *Play feedback when volume is changed*
#+begin_src sh
  defaults write -globalDomain "com.apple.sound.beep.feedback" -int 0
#+end_src

#+begin_src sh
  }
#+end_src

**** Sharing: File Sharing

*Shared Folders:* =None=
#+begin_src sh
  sudo dscl . -delete "/SharePoints"
#+end_src

**** Users & Groups: Guest User

=off= Allow guests to log in to this computer
#+begin_src sh
  sudo sysadminctl -guestAccount off
#+end_src

**** Date & Time: Clock

=on= *Show date and time in menu bar*

=on= *Time options: Display the time with seconds*

=on= *Time options: Show AM/PM*

=on= *Date options: Show the day of the week*

=on= *Date options: Show date*
#+begin_src sh
  function prefs_clock () {
    defaults write com.apple.menuextra.clock "DateFormat" -string "EEE MMM d  h:mm:ss a"
  }
#+end_src

**** Accessibility: Display

=on= *Reduce transparency*
#+begin_src sh
  function prefs_accessibility () {
    defaults write com.apple.universalaccess "reduceTransparency" -bool true
  }
#+end_src

#+begin_src sh
  function prefs_restart () {
    killall -u "$(whoami)" cfprefsd
    osascript -e 'tell app "Finder" to quit'
    killall Finder
  }
#+end_src

*** VLC

#+begin_src sh
  function prefs_vlc () {
    p "Set VLC preferences"

    if [ ! -d "${HOME}/Library/Preferences/org.videolan.vlc" ]; then
      mkdir -m o-w -p "${HOME}/Library/Preferences/org.videolan.vlc"
    fi

    cat > "${HOME}/Library/Preferences/org.videolan.vlc/vlcrc" << EOF
  avcodec-hw=vda
  macosx-appleremote=0
  macosx-continue-playback=1
  macosx-nativefullscreenmode=1
  macosx-pause-minimized=1
  macosx-video-autoresize=0
  spdif=1
  sub-language=English
  subsdec-encoding=UTF-8
  volume-save=0
  EOF
  }
#+end_src

*** prefs

#+begin_src sh
  function prefs () {
    prefs_autoping
    prefs_finder
    prefs_moom
    prefs_nvalt
    prefs_safari

    prefs_general
    prefs_screensaver
    prefs_dock
    prefs_security
    prefs_power
    prefs_ups
    prefs_text
    prefs_mouse
    prefs_trackpad
    prefs_sound
    prefs_clock
    prefs_accessibility

    prefs_restart

    prefs_vlc

    which config
  }
#+end_src

** Configuration

*** App Store

#+begin_src sh
  function config_mas () {
    p "Save App Store packages"

    cat > "/usr/local/bin/mas_save.sh" << EOF
  #!/bin/sh
  DIR="\${HOME}/Downloads/App Store"
  MAS="\$(getconf DARWIN_USER_CACHE_DIR)com.apple.appstore"

  mkdir -m go= -p "\${DIR}"
  for a in \$(find "\${MAS}" -iname "[0-9]*" -type d); do
    b="\${DIR}/\$(basename \$a)"
    mkdir -m go= -p "\${b}"
    end=\$(( \$(date +%s) + 5 ))
    while [ \$(date +%s) -lt \$end ]; do
      for c in \${a}/*; do
        d="\$(basename \$c)"
        if [ ! -e "\${b}/\${d}" ]; then
          ln "\${a}/\${d}" "\${b}/\${d}"
        fi
      done
    done
  done
  EOF

    chmod a+x "/usr/local/bin/mas_save.sh"
    rehash
#+end_src

#+begin_src sh
  mkdir -m go= -p "${HOME}/Library/LaunchAgents"
  launchctl unload "${HOME}/Library/LaunchAgents/com.github.ptb.mas_save.plist" 2> /dev/null
  printf "%s\n" \
    "add ':KeepAlive' bool false" \
    "add ':Label' string 'com.github.ptb.mas_save'" \
    "add ':Program' string '/usr/local/bin/mas_save.sh'" \
    "add ':RunAtLoad' bool true" \
    "add ':WatchPaths' array" \
    "add ':WatchPaths:0' string '$(getconf DARWIN_USER_CACHE_DIR)com.apple.appstore'" \
  | while IFS=$'\t' read a; do
    /usr/libexec/PlistBuddy "${HOME}/Library/LaunchAgents/com.github.ptb.mas_save.plist" -c "${a}" &> /dev/null
  done
  launchctl load "${HOME}/Library/LaunchAgents/com.github.ptb.mas_save.plist"
#+end_src

#+begin_src sh
  }
#+end_src

*** Atom

Inspiration: [[https://evanhahn.com/atom-apm-install-list/][@EvanHahn]]

#+begin_src sh
  function config_atom () {
    p "Install Atom packages"

    for a in \
      "MagicPython" \
      "atom-beautify" \
      "atom-css-comb" \
      "atom-jade" \
      "atom-wallaby" \
      "autoclose-html" \
      "autocomplete-python" \
      "busy-signal" \
      "double-tag" \
      "editorconfig" \
      "ex-mode" \
      "file-icons" \
      "git-plus" \
      "git-time-machine" \
      "highlight-selected" \
      "intentions" \
      "language-docker" \
      "language-jade" \
      "language-javascript-jsx" \
      "language-lisp" \
      "language-slim" \
      "linter" \
      "linter-eslint" \
      "linter-rubocop" \
      "linter-ui-default" \
      "python-yapf" \
      "react" \
      "riot" \
      "sort-lines" \
      "term3" \
      "tomorrow-night-eighties-syntax" \
      "tree-view-open-files" \
      "vim-mode" \
      "vim-mode-zz" \
      "vim-surround" \
    ; do
      apm install "${a}"
    done

  cat > "${HOME}/.atom/packages/tomorrow-night-eighties-syntax/styles/colors.less" \
    << EOF
  @background: #191919;
  @current-line: #333333;
  @selection: #4c4c4c;
  @foreground: #cccccc;
  @comment: #999999;
  @red: #f27f7f;
  @orange: #ff994c;
  @yellow: #ffcc66;
  @green: #99cc99;
  @aqua: #66cccc;
  @blue: #6699cc;
  @purple: #cc99cc;
  EOF
  }
#+end_src

*** BBEdit

#+begin_src sh
  function config_bbedit () {
    if [ -d "/Applications/BBEdit.app" ]; then
      p "Install BBEdit tools"

      cd /usr/local/bin && \
      ln ../../../Applications/BBEdit.app/Contents/Helpers/bbdiff bbdiff && \
      ln ../../../Applications/BBEdit.app/Contents/Helpers/bbedit_tool bbedit && \
      ln ../../../Applications/BBEdit.app/Contents/Helpers/bbfind bbfind && \
      ln ../../../Applications/BBEdit.app/Contents/Helpers/bbresults bbresults && \
      cd "${HOME}"
    fi
  }
#+end_src

*** Desktop

#+begin_src sh
  function config_desktop () {
    p "Set Desktop preferences"
#+end_src

*Desktop: Solid Colors: Custom Color…* =Solid Black=
#+begin_src sh
  sudo rm "/Library/Caches/com.apple.desktop.admin.png"
  base64 -D > "/Library/Caches/com.apple.desktop.admin.png" <<< "iVBORw0KGgoAAAANSUhEUgAAAIAAAACAAQAAAADrRVxmAAAAGElEQVR4AWOgMxgFo2AUjIJRMApGwSgAAAiAAAH3bJXBAAAAAElFTkSuQmCC"

  osascript << EOF
    tell application "System Events"
      set a to POSIX file "/Library/Caches/com.apple.desktop.admin.png"
      set b to a reference to every desktop
      repeat with c in b
        set picture of c to a
      end repeat
    end tell
  EOF
#+end_src

*Screen Saver:* =BlankScreen=
#+begin_src sh
  if [ -e "/Library/Screen Savers/BlankScreen.saver" ]; then
    p "Set Screen Saver preferences"

    defaults -currentHost write com.apple.screensaver moduleDict \
      '{ moduleName = "BlankScreen"; path = "/Library/Screen Savers/BlankScreen.saver"; type = 0; }'
  fi
#+end_src

#+begin_src sh
  }
#+end_src

*** Dock

#+begin_src sh
  function config_dock () {
    p "Set Dock preferences"

    defaults write com.apple.dock "autohide-delay" -float 0
    defaults write com.apple.dock "autohide-time-modifier" -float 0.5

    defaults delete com.apple.dock "persistent-apps"

    for app in \
      "nvALT" \
      "Mail" \
      "Safari" \
      "Messages" \
      "Emacs" \
      "Atom" \
      "Utilities/Terminal" \
      "System Preferences" \
      "PCalc" \
      "iTunes" \
      "VLC" \
    ; do
      defaults write com.apple.dock "persistent-apps" -array-add \
        "<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/${app}.app/</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>"
    done

    defaults delete com.apple.dock "persistent-others"

    osascript -e 'tell app "Dock" to quit'
  }
#+end_src

*** Emacs

**** Download [[http://spacemacs.org/][Spacemacs]]

#+begin_src sh
function config_emacs () {
  p "Configure Emacs"

  mkdir -m go= -p "${HOME}/.emacs.d" \
    && curl --compressed --location --silent \
      "https://github.com/syl20bnr/spacemacs/archive/master.tar.gz" \
    | tar -C "${HOME}/.emacs.d" --strip-components 1 -xf -
  mkdir -m go= -p "${HOME}/.emacs.d/private/ptb"
#+end_src

**** Create =~/.spacemacs=

#+begin_src sh
  cat > "${HOME}/.spacemacs" << EOF
  (defun dotspacemacs/layers ()
    (setq-default
      dotspacemacs-configuration-layers '(
        auto-completion
        (colors :variables
          colors-colorize-identifiers 'variables)
        dash
        deft
        docker
        emacs-lisp
        evil-cleverparens
        git
        github
        helm
        html
        ibuffer
        imenu-list
        javascript
        markdown
        nginx
        (org :variables
          org-enable-github-support t)
        (osx :variables
          osx-use-option-as-meta nil)
        ptb
        react
        ruby
        ruby-on-rails
        search-engine
        semantic
        shell-scripts
        (spell-checking :variables
          spell-checking-enable-by-default nil)
        syntax-checking
        (version-control :variables
          version-control-diff-side 'left)
        vim-empty-lines
      )
      dotspacemacs-excluded-packages '(org-bullets)
    )
  )

  (defun dotspacemacs/init ()
    (setq-default
      dotspacemacs-startup-banner nil
      dotspacemacs-startup-lists nil
      dotspacemacs-scratch-mode 'org-mode
      dotspacemacs-themes '(sanityinc-tomorrow-eighties)
      dotspacemacs-default-font '(
        "Inconsolata LGC"
        :size 13
        :weight normal
        :width normal
        :powerline-scale 1.1)
      dotspacemacs-loading-progress-bar nil
      dotspacemacs-active-transparency 100
      dotspacemacs-inactive-transparency 100
      dotspacemacs-line-numbers t
      dotspacemacs-whitespace-cleanup 'all
    )
  )

  (defun dotspacemacs/user-init ())
  (defun dotspacemacs/user-config ())
  EOF
#+end_src

**** Create =~/.emacs.d/private/ptb/config.el=

#+begin_src sh
  cat > "${HOME}/.emacs.d/private/ptb/config.el" << EOF
  (setq
    default-frame-alist '(
      (top . 22)
      (left . 1790)
      (height . 40)
      (width . 91)
      (vertical-scroll-bars . right))
    initial-frame-alist (copy-alist default-frame-alist)

    deft-directory "~/Dropbox/Notes"
    focus-follows-mouse t
    mouse-wheel-follow-mouse t
    mouse-wheel-scroll-amount '(1 ((shift) . 1))
    purpose-display-at-right 20
    recentf-max-saved-items 5
    scroll-step 1
    system-uses-terminfo nil

    ibuffer-formats '(
      (mark modified read-only " "
      (name 18 18 :left :elide)))

    ibuffer-shrink-to-minimum-size t
    ibuffer-always-show-last-buffer nil
    ibuffer-sorting-mode 'recency
    ibuffer-use-header-line nil
    x-select-enable-clipboard nil)

  (global-linum-mode t)
  (recentf-mode t)
  (x-focus-frame nil)
  (with-eval-after-load 'org
    (org-babel-do-load-languages
      'org-babel-load-languages '(
        (ruby . t)
        (shell . t)
      )
    )
  )
  EOF
#+end_src

**** Create =~/.emacs.d/private/ptb/funcs.el=

#+begin_src sh
  cat > "${HOME}/.emacs.d/private/ptb/funcs.el" << EOF
  (defun is-useless-buffer (buffer)
    (let ((name (buffer-name buffer)))
      (and (= ?* (aref name 0))
          (string-match "^\\**" name))))

  (defun kill-useless-buffers ()
    (interactive)
    (loop for buffer being the buffers
          do (and (is-useless-buffer buffer) (kill-buffer buffer))))

  (defun org-babel-tangle-hook ()
    (add-hook 'after-save-hook 'org-babel-tangle))

  (add-hook 'org-mode-hook #'org-babel-tangle-hook)

  (defun ptb/new-untitled-buffer ()
    "Create a new untitled buffer in the current frame."
    (interactive)
    (let
      ((buffer "Untitled-") (count 1))
      (while
        (get-buffer (concat buffer (number-to-string count)))
        (setq count (1+ count)))
      (switch-to-buffer
      (concat buffer (number-to-string count))))
    (org-mode))

  (defun ptb/previous-buffer ()
    (interactive)
    (kill-useless-buffers)
    (previous-buffer))

  (defun ptb/next-buffer ()
    (interactive)
    (kill-useless-buffers)
    (next-buffer))

  (defun ptb/kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer))
    (kill-useless-buffers))
  EOF
#+end_src

**** Create =~/.emacs.d/private/ptb/keybindings.el=

#+begin_src sh
  cat > "${HOME}/.emacs.d/private/ptb/keybindings.el" << EOF
  (define-key evil-normal-state-map (kbd "s-c") 'clipboard-kill-ring-save)
  (define-key evil-insert-state-map (kbd "s-c") 'clipboard-kill-ring-save)
  (define-key evil-visual-state-map (kbd "s-c") 'clipboard-kill-ring-save)

  (define-key evil-ex-completion-map (kbd "s-v") 'clipboard-yank)
  (define-key evil-ex-search-keymap (kbd "s-v") 'clipboard-yank)
  (define-key evil-insert-state-map (kbd "s-v") 'clipboard-yank)

  (define-key evil-normal-state-map (kbd "s-x") 'clipboard-kill-region)
  (define-key evil-insert-state-map (kbd "s-x") 'clipboard-kill-region)
  (define-key evil-visual-state-map (kbd "s-x") 'clipboard-kill-region)

  (define-key evil-normal-state-map (kbd "<S-up>") 'evil-previous-visual-line)
  (define-key evil-insert-state-map (kbd "<S-up>") 'evil-previous-visual-line)
  (define-key evil-visual-state-map (kbd "<S-up>") 'evil-previous-visual-line)

  (define-key evil-normal-state-map (kbd "<S-down>") 'evil-next-visual-line)
  (define-key evil-insert-state-map (kbd "<S-down>") 'evil-next-visual-line)
  (define-key evil-visual-state-map (kbd "<S-down>") 'evil-next-visual-line)

  (global-set-key (kbd "C-l") 'evil-search-highlight-persist-remove-all)

  (global-set-key (kbd "s-t") 'make-frame)
  (global-set-key (kbd "s-n") 'ptb/new-untitled-buffer)
  (global-set-key (kbd "s-w") 'ptb/kill-this-buffer)
  (global-set-key (kbd "s-{") 'ptb/previous-buffer)
  (global-set-key (kbd "s-}") 'ptb/next-buffer)
  EOF
#+end_src

**** Create =~/.emacs.d/private/ptb/packages.el=

#+begin_src sh
  cat > "${HOME}/.emacs.d/private/ptb/packages.el" << EOF
  (setq ptb-packages '(auto-indent-mode inline-crypt))

  (defun ptb/init-auto-indent-mode ()
    (use-package auto-indent-mode
      :init
      (setq
        auto-indent-delete-backward-char t
        auto-indent-fix-org-auto-fill t
        auto-indent-fix-org-move-beginning-of-line t
        auto-indent-fix-org-return t
        auto-indent-fix-org-yank t
        auto-indent-start-org-indent t
      )
    )
  )

  (defun ptb/init-inline-crypt ()
    (use-package inline-crypt :init))
  EOF
#+end_src

#+begin_src sh
  }
#+end_src

**** Create =/usr/local/bin/vi=

#+begin_src sh
  function config_vi_script () {
    p "Create vi script"

    cat > /usr/local/bin/vi <<-EOF
  #!/bin/sh

  if [ -e "/Applications/Emacs.app" ]; then
    t=()

    if [ \${#@} -ne 0 ]; then
      while IFS= read -r file; do
        [ ! -f "\$file" ] && t+=("\$file") && /usr/bin/touch "\$file"
        file=\$(echo \$(cd \$(dirname "\$file") && pwd -P)/\$(basename "\$file"))
        \$(/usr/bin/osascript <<-END
          if application "Emacs.app" is running then
            tell application id (id of application "Emacs.app") to open POSIX file "\$file"
          else
            tell application ((path to applications folder as text) & "Emacs.app")
              activate
              open POSIX file "\$file"
            end tell
          end if
  END
          ) &  # Note: END on the previous line may be indented with tabs but not spaces
        done <<<"\$(printf '%s\n' "\$@")"
      fi

      if [ ! -z "\$t" ]; then
        \$(/bin/sleep 10; for file in "\${t[@]}"; do
          [ ! -s "\$file" ] && /bin/rm "\$file";
        done) &
      fi
    else
      vim -No "\$@"
    fi
  EOF

    chmod a+x /usr/local/bin/vi
    rehash
  }
#+end_src

*** iStat Menus
:properties:
:header-args+: :padline no
:end:

#+begin_src sh
  function config_istat () {
    p "Set iStat Menu preferences"

    printf "%s\t%s\t%s\n" \
#+end_src

#+begin_src sh
  "MenubarSkinColor" "-int" "8" \
  "MenubarTheme" "-int" "0" \
  "DropdownTheme" "-int" "1" \
#+end_src

#+begin_src sh
  "CPU_MenubarMode" "-string" "100,2,0" \
  "CPU_MenubarTextSize" "-int" "14" \
  "CPU_MenubarGraphShowBackground" "-int" "0" \
  "CPU_MenubarGraphWidth" "-int" "32" \
  "CPU_MenubarGraphBreakdowns" "-int" "0" \
  "CPU_MenubarGraphCustomColors" "-int" "0" \
  "CPU_MenubarGraphOverall" "-string" "0.40 0.60 0.40 1.00" \
  "CPU_MenubarCombineCores" "-int" "1" \
  "CPU_MenubarGroupItems" "-int" "0" \
  "CPU_MenubarSingleHistoryGraph" "-int" "0" \
  "CPU_CombineLogicalCores" "-int" "1" \
  "CPU_AppFormat" "-int" "0" \
#+end_src

#+begin_src sh
  "Memory_MenubarMode" "-string" "100,2,6" \
  "Memory_MenubarPercentageSize" "-int" "14" \
  "Memory_MenubarGraphBreakdowns" "-int" "1" \
  "Memory_MenubarGraphCustomColors" "-int" "0" \
  "Memory_MenubarGraphOverall" "-string" "0.40 0.60 0.40 1.00" \
  "Memory_MenubarGraphWired" "-string" "0.40 0.60 0.40 1.00" \
  "Memory_MenubarGraphActive" "-string" "0.47 0.67 0.47 1.00" \
  "Memory_MenubarGraphCompressed" "-string" "0.53 0.73 0.53 1.00" \
  "Memory_MenubarGraphInactive" "-string" "0.60 0.80 0.60 1.00" \
  "Memory_IgnoreInactive" "-int" "0" \
  "Memory_AppFormat" "-int" "0" \
  "Memory_DisplayFormat" "-int" "1" \
#+end_src

#+begin_src sh
  "Disks_MenubarMode" "-string" "100,9,8" \
  "Disks_MenubarGroupItems" "-int" "1" \
  "Disks_MenubarRWShowLabel" "-int" "1" \
  "Disks_MenubarRWBold" "-int" "0" \
  "Disks_MenubarGraphActivityWidth" "-int" "32" \
  "Disks_MenubarGraphActivityShowBackground" "-int" "0" \
  "Disks_MenubarGraphActivityCustomColors" "-int" "0" \
  "Disks_MenubarGraphActivityRead" "-string" "0.60 0.80 0.60 1.00" \
  "Disks_MenubarGraphActivityWrite" "-string" "0.40 0.60 0.40 1.00" \
  "Disks_SeperateFusion" "-int" "1" \
#+end_src

#+begin_src sh
  "Network_MenubarMode" "-string" "4,0,1" \
  "Network_TextUploadColor-Dark" "-string" "1.00 1.00 1.00 1.00" \
  "Network_TextDownloadColor-Dark" "-string" "1.00 1.00 1.00 1.00" \
  "Network_GraphWidth" "-int" "32" \
  "Network_GraphShowBackground" "-int" "0" \
  "Network_GraphCustomColors" "-int" "0" \
  "Network_GraphUpload" "-string" "0.60 0.80 0.60 1.00" \
  "Network_GraphDownload" "-string" "0.40 0.60 0.40 1.00" \
  "Network_GraphMode" "-int" "1" \
#+end_src

#+begin_src sh
  "Battery_MenubarMode" "-string" "5,0" \
  "Battery_ColorGraphCustomColors" "-int" "1" \
  "Battery_ColorGraphCharged" "-string" "0.40 0.60 0.40 1.00" \
  "Battery_ColorGraphCharging" "-string" "0.60 0.80 0.60 1.00" \
  "Battery_ColorGraphDraining" "-string" "1.00 0.60 0.60 1.00" \
  "Battery_ColorGraphLow" "-string" "1.00 0.20 0.20 1.00" \
  "Battery_PercentageSize" "-int" "14" \
  "Battery_MenubarCustomizeStates" "-int" "0" \
  "Battery_MenubarHideBluetooth" "-int" "1" \
#+end_src

#+begin_src sh
  "Time_MenubarFormat" "-array-add" "EE" \
  "Time_MenubarFormat" "-array-add" " " \
  "Time_MenubarFormat" "-array-add" "MMM" \
  "Time_MenubarFormat" "-array-add" " " \
  "Time_MenubarFormat" "-array-add" "d" \
  "Time_MenubarFormat" "-array-add" " " \
  "Time_MenubarFormat" "-array-add" "h" \
  "Time_MenubarFormat" "-array-add" ":" \
  "Time_MenubarFormat" "-array-add" "mm" \
  "Time_MenubarFormat" "-array-add" ":" \
  "Time_MenubarFormat" "-array-add" "ss" \
  "Time_MenubarFormat" "-array-add" " " \
  "Time_MenubarFormat" "-array-add" "a" \
#+end_src

#+begin_src sh
  "Time_DropdownFormat" "-array-add" "EE" \
  "Time_DropdownFormat" "-array-add" " " \
  "Time_DropdownFormat" "-array-add" "h" \
  "Time_DropdownFormat" "-array-add" ":" \
  "Time_DropdownFormat" "-array-add" "mm" \
  "Time_DropdownFormat" "-array-add" " " \
  "Time_DropdownFormat" "-array-add" "a" \
  "Time_DropdownFormat" "-array-add" "' ('" \
  "Time_DropdownFormat" "-array-add" "zzz" \
  "Time_DropdownFormat" "-array-add" "')'" \
#+end_src

#+begin_src sh
  "Time_Cities" "-array-add" "4930956" \
  "Time_Cities" "-array-add" "4887398" \
  "Time_Cities" "-array-add" "5419384" \
  "Time_Cities" "-array-add" "5392171" \
  "Time_Cities" "-array-add" "5879400" \
  "Time_Cities" "-array-add" "5856195" \
  "Time_TextSize" "-int" "14" \
#+end_src

#+begin_src sh
  | while IFS=$'\t' read a b c; do
    defaults write com.bjango.istatmenus5.extras "$a" $b "$c"
  done
#+end_src

#+begin_src sh
  }
#+end_src

*** Terminal
:properties:
:header-args+: :padline no
:end:

Inspiration: [[https://github.com/ChrisKempson/Tomorrow-Theme#tomorrow-night-eighties][@chriskempson]], [[https://apple.stackexchange.com/a/98843][@user495470]], & [[https://github.com/reitermarkus/dotfiles/blob/master/include/settings/terminal.sh][@reitermarkus]]

**** General

#+begin_src sh
  function config_terminal () {
    p "Set Terminal preferences"
#+end_src

*On startup, open: New window with profile:* =ptb=
#+begin_src sh
  defaults write -app Terminal "Startup Window Settings" -string "$(whoami)"
#+end_src

**** Profiles

#+begin_src sh
  defaults write -app Terminal "Default Window Settings" -string "$(whoami)"

  /usr/libexec/PlistBuddy -c "delete ':Window Settings:$(whoami)'" \
    "${HOME}/Library/Preferences/com.apple.Terminal.plist" &> /dev/null

  for terminal_prop in \
#+end_src

#+begin_src sh
  " dict" \
  ":name string '$(whoami)'" \
  ":type string 'Window Settings'" \
  ":ProfileCurrentVersion real 2.05" \
#+end_src

**** Text

#+begin_src sh
  ':BackgroundColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC4xIDAuMSAwLjE=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ":BackgroundBlur real 0" \
  ":BackgroundSettingsForInactiveWindows bool false" \
  ":BackgroundAlphaInactive real 1" \
  ":BackgroundBlurInactive real 0" \
  ':Font data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>3</integer></dict><key>NSName</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSSize</key><real>13</real><key>NSfFlags</key><integer>16</integer></dict><string>InconsolataLGC</string><dict><key>$classes</key><array><string>NSFont</string><string>NSObject</string></array><key>$classname</key><string>NSFont</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ":FontWidthSpacing real 1" \
  ":FontHeightSpacing real 1" \
  ":FontAntialias bool true" \
  ":UseBoldFonts bool true" \
  ":BlinkText bool false" \
  ":DisableANSIColor bool false" \
  ":UseBrightBold bool false" \
  ':TextColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDAuOCAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':TextBoldColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDAuOCAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':SelectionColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC4zIDAuMyAwLjM=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBlackColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC4zIDAuMyAwLjM=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIRedColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC45NSAwLjUgMC41</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIGreenColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC42IDAuOCAwLjY=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIYellowColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MSAwLjggMC40</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBlueColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC40IDAuNiAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIMagentaColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDAuNiAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSICyanColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC40IDAuOCAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIWhiteColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDAuOCAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightBlackColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC41IDAuNSAwLjU=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightRedColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MSAwLjcgMC43</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightGreenColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDEgMC44</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightYellowColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MSAxIDAuNg==</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightBlueColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC42IDAuOCAx</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightMagentaColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MSAwLjggMQ==</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightCyanColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC42IDEgMQ==</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightWhiteColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC45IDAuOSAwLjk=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ":CursorType integer 0" \
  ":CursorBlink bool false" \
  ':CursorColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC43IDAuNyAwLjc=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
#+end_src

**** Window

#+begin_src sh
  ":ShowRepresentedURLInTitle bool true" \
  ":ShowRepresentedURLPathInTitle bool true" \
  ":ShowActiveProcessInTitle bool true" \
  ":ShowActiveProcessArgumentsInTitle bool false" \
  ":ShowShellCommandInTitle bool false" \
  ":ShowWindowSettingsNameInTitle bool false" \
  ":ShowTTYNameInTitle bool false" \
  ":ShowDimensionsInTitle bool false" \
  ":ShowCommandKeyInTitle bool false" \
  ":columnCount integer 124" \
  ":rowCount integer 20" \
  ":ShouldLimitScrollback integer 0" \
  ":ScrollbackLines integer 0" \
  ":ShouldRestoreContent bool false" \
#+end_src

**** Tab

#+begin_src sh
  ":ShowRepresentedURLInTabTitle bool false" \
  ":ShowRepresentedURLPathInTabTitle bool false" \
  ":ShowActiveProcessInTabTitle bool true" \
  ":ShowActiveProcessArgumentsInTabTitle bool false" \
  ":ShowTTYNameInTabTitle bool false" \
  ":ShowComponentsWhenTabHasCustomTitle bool true" \
  ":ShowActivityIndicatorInTab bool true" \
#+end_src

**** Shell

#+begin_src sh
  ":shellExitAction integer 1" \
  ":warnOnShellCloseAction integer 1" \
#+end_src

**** Keyboard

#+begin_src sh
  ":useOptionAsMetaKey bool false" \
  ":ScrollAlternateScreen bool true" \
#+end_src

**** Advanced

#+begin_src sh
  ":TerminalType string 'xterm-256color'" \
  ":deleteSendsBackspace bool false" \
  ":EscapeNonASCIICharacters bool true" \
  ":ConvertNewlinesOnPaste bool true" \
  ":StrictVTKeypad bool true" \
  ":scrollOnInput bool true" \
  ":Bell bool false" \
  ":VisualBell bool false" \
  ":VisualBellOnlyWhenMuted bool false" \
  ":BellBadge bool false" \
  ":BellBounce bool false" \
  ":BellBounceCritical bool false" \
  ":CharacterEncoding integer 4" \
  ":SetLanguageEnvironmentVariables bool true" \
  ":EastAsianAmbiguousWide bool false" \
#+end_src

#+begin_src sh
  ; do
    /usr/libexec/PlistBuddy "$HOME/Library/Preferences/com.apple.Terminal.plist" \
      -c "add ':Window Settings:$(whoami)'${terminal_prop}"
  done
#+end_src

#+begin_src sh
  }
#+end_src

*** dovecot

#+begin_example sh :tangle no
  doveadm sync -u $(whoami) maildir:~/.email:INBOX=~/.email/Inbox:LAYOUT=fs
#+end_example

#+begin_src sh
  function config_dovecot () {
    p "Enable email authentication with macOS accounts"

    sudo tee "/etc/pam.d/dovecot" > /dev/null << EOF
  auth		required	pam_opendirectory.so try_first_pass
  account		required	pam_nologin.so
  account		required	pam_opendirectory.so
  password	required	pam_opendirectory.so
  EOF

    p "Configure Dovecot email server"

    cat > "/usr/local/etc/dovecot/dovecot.conf" << EOF
  auth_mechanisms = cram-md5
  default_internal_user = _dovecot
  default_login_user = _dovenull
  log_path = /dev/stderr
  mail_location = maildir:~/.mail:INBOX=~/.mail/Inbox:LAYOUT=fs
  mail_plugins = zlib
  maildir_copy_with_hardlinks = no
  namespace {
    inbox = yes
    mailbox Drafts {
      auto = subscribe
      special_use = \Drafts
    }
    mailbox Junk {
      auto = subscribe
      special_use = \Junk
    }
    mailbox Sent {
      auto = subscribe
      special_use = \Sent
    }
    mailbox "Sent Messages" {
      special_use = \Sent
    }
    mailbox Trash {
      auto = subscribe
      special_use = \Trash
    }
    separator = .
    type = private
  }
  passdb {
    args = scheme=cram-md5 /usr/local/etc/dovecot/cram-md5.pwd
    driver = passwd-file

    # driver = pam

    # args = nopassword=y
    # driver = static
  }
  plugin {
    sieve = file:/Users/%u/.sieve
    zlib_save = bz2
    zlib_save_level = 9
  }
  postmaster_address = ${USER}@${DOMAIN}
  protocols = imap
  service imap-login {
    inet_listener imap {
      port = 0
    }
  }
  ssl = required
  ssl_cert = <${SSL}/certs/${MAIL}/${MAIL}.crt
  ssl_cipher_list = AES128+EECDH:AES128+EDH
  ssl_dh_parameters_length = 4096
  ssl_key = <${SSL}/certs/${MAIL}/${MAIL}.key
  ssl_prefer_server_ciphers = yes
  ssl_protocols = !SSLv2 !SSLv3
  userdb {
    driver = passwd
  }
  protocol lda {
    mail_plugins = sieve
  }

  # auth_debug = yes
  # auth_debug_passwords = yes
  # auth_verbose = yes
  # auth_verbose_passwords = plain
  # mail_debug = yes
  # verbose_ssl = yes
  EOF

    if [ ! -f "/usr/local/etc/dovecot/cram-md5.pwd" ]; then
      p "Create email account for '${USER}' with 'CRAM-MD5' authentication: "
      doveadm pw | sed -e "s/^/${USER}:/" > "/usr/local/etc/dovecot/cram-md5.pwd"
      sudo chown _dovecot "/usr/local/etc/dovecot/cram-md5.pwd"
      sudo chmod go= "/usr/local/etc/dovecot/cram-md5.pwd"
    fi

    if ! /usr/bin/grep -Fq ${MAIL} "/etc/hosts"; then
      printf "127.0.0.1\t${MAIL}\n" | sudo tee -a /etc/hosts > /dev/null
    fi

    sudo brew services start dovecot
  }
#+end_src

*** getmail

#+begin_src sh
  function config_getmail () {
    p "Configure getmail"

    mkdir -m go= -p "${HOME}/.getmail" "${HOME}/Library/LaunchAgents"

    printf "%s\n" \
      "add ':KeepAlive' bool false" \
      "add ':Label' string 'ca.pyropus.getmail'" \
      "add ':ProgramArguments' array" \
      "add ':ProgramArguments:0' string '/usr/local/bin/getmail'" \
      "add ':RunAtLoad' bool true" \
      "add ':StandardOutPath' string '${HOME}/.getmail/getmail.log'" \
      "add ':StandardErrorPath' string '${HOME}/.getmail/getmail.err'" \
      "add ':StartInterval' integer 300" \
    | while read a; do
      /usr/libexec/PlistBuddy "${HOME}/Library/LaunchAgents/ca.pyropus.getmail.plist" -c "${a}" &> /dev/null
    done

    for email in \
      "pbosse@gmail.com" \
      "ptb@ioutime.com" \
    ; do
      p "Add password for '${email}' to Keychain"

      security add-internet-password -a "${email}" -s "imap.gmail.com" -r "imap" \
        -l "${email}" -D "getmail password" -P 993 -w

      cat > "${HOME}/.getmail/${email}" << EOF
  [retriever]
  type = SimpleIMAPSSLRetriever
  server = imap.gmail.com
  port = 993
  username = ${email}
  mailboxes = ("[Gmail]/All Mail",)

  [destination]
  type = MDA_external
  path = /usr/local/Cellar/dovecot/2.2.31/libexec/dovecot/dovecot-lda
  arguments = ("-c","/usr/local/etc/dovecot/dovecot.conf","-d","$(whoami)",)
  ignore_stderr = true

  [options]
  # delete = true
  delete_after = 30
  delivered_to = false
  read_all = false
  received = false
  verbose = 1
  EOF

    defaults write "${HOME}/Library/LaunchAgents/ca.pyropus.getmail" \
      ProgramArguments -array-add "--rcfile"
    defaults write "${HOME}/Library/LaunchAgents/ca.pyropus.getmail" \
      ProgramArguments -array-add "${email}"
    done

    plutil -convert xml1 "${HOME}/Library/LaunchAgents/ca.pyropus.getmail.plist"
    launchctl load "${HOME}/Library/LaunchAgents/ca.pyropus.getmail.plist"

    # http://shadow-file.blogspot.com/2012/06/parsing-email-and-fixing-timestamps-in.html
    curl -L https://pastebin.com/raw/ZBq7euid | tr -d '\015' > /usr/local/bin/timestamp.py
    chmod +x /usr/local/bin/timestamp.py
  }
#+end_src

for file in $(ls -1); do ~/bin/timestamp.py $file; done

find "${HOME}/.mail" -type f -name "[0123456789]*" -exec /usr/local/bin/timestamp.py '{}' ';'

*** git

#+begin_src sh
  function config_git () {
    p "Configure git"

    KEY="$(gpg -K --with-colons | awk -F: '/^sec/ { a=$5 } END { print a }')"

    git config --global user.name "Peter T Bosse II"
    git config --global user.email "ptb@ioutime.com"

    git config --global alias.cm "commit --allow-empty-message --message="
    git config --global alias.co "checkout"
    git config --global alias.st "status"

    git config --global push.default "simple"

    if [ ! -z ${KEY} ]; then
      git config --global user.signingkey "${KEY}"
      git config --global gpg.program "$(which gpg)"
      git config --global commit.gpgsign "true"
      git config --global tag.gpgsign "true"
      git config --global log.showSignature "true"
    fi
  }
#+end_src

*** gnupg

#+begin_src sh
  function config_gpg () {
    p "Create GPG keys"

    mkdir -m go= -p "${HOME}/.gnupg"

    echo "keyid-format long" \
      > "${HOME}/.gnupg/gpg.conf"
    echo "pinentry-program $(which pinentry-mac)" \
      > "${HOME}/.gnupg/gpg-agent.conf"

    gpg --faked-system-time '20170701T120000!' \
      --quick-generate-key "Peter T Bosse II <ptb@ioutime.com>" \
      future-default default never
  }
#+end_src

#+begin_src sh
  function config_gpg_help () {
    KEY="$(gpg -K --with-colons | awk -F: '/^sec/ { a=$5 } END { print a }')"
    gpg --armor --export "${KEY}" | pbcopy
    open "https://github.com/settings/keys"
  }
#+end_src

*** openssl

#+begin_src sh
  function config_openssl () {
    p "Create OpenSSL certificates"

    SSL="/usr/local/etc/openssl"
    DOMAIN="ptb2.me"
    MAIL="mail.${DOMAIN}"
    FAKE="0701080017"
    DAYS=3652
#+end_src

#+begin_src sh
  mkdir -p "${SSL}/certs/${DOMAIN}"
  cat > "${SSL}/certs/${DOMAIN}/${DOMAIN}.cnf" << EOF
  [ req ]
  default_bits = 4096
  default_keyfile = ${SSL}/certs/${DOMAIN}/${DOMAIN}.key
  default_md = sha256
  distinguished_name = dn
  encrypt_key = no
  prompt = no
  utf8 = yes
  x509_extensions = v3_ca

  [ dn ]
  CN = ${DOMAIN}

  [ v3_ca ]
  subjectKeyIdentifier = hash
  authorityKeyIdentifier = keyid:always,issuer
  basicConstraints = CA:true
  EOF
#+end_src

#+begin_src sh
  openssl genrsa -out "${SSL}/certs/${DOMAIN}/${DOMAIN}.key" 4096

  p "Set fake '${DOMAIN}' certificate creation date"
  sudo date "${FAKE}" && \
  openssl req -days ${DAYS} -new -x509 \
    -config "${SSL}/certs/${DOMAIN}/${DOMAIN}.cnf" \
    -key "${SSL}/certs/${DOMAIN}/${DOMAIN}.key" \
    -out "${SSL}/certs/${DOMAIN}/${DOMAIN}.crt" && \
  sudo ntpdate -u time.apple.com

  p "Password for adding certificate to Keychain Access"
  openssl pkcs12 -aes256 -clcerts -export \
    -in "${SSL}/certs/${DOMAIN}/${DOMAIN}.crt" \
    -inkey "${SSL}/certs/${DOMAIN}/${DOMAIN}.key" \
    -out "${SSL}/certs/${DOMAIN}/${DOMAIN}.p12"

  open -g "${SSL}/certs/${DOMAIN}/${DOMAIN}.p12"
#+end_src

#+begin_src sh
  mkdir -p "${SSL}/certs/${MAIL}"
  cat > "${SSL}/certs/${MAIL}/${MAIL}.cnf" << EOF
  [ req ]
  default_bits = 4096
  default_keyfile = ${SSL}/certs/${DOMAIN}/${DOMAIN}.key
  default_md = sha256
  distinguished_name = dn
  encrypt_key = no
  prompt = no
  utf8 = yes
  x509_extensions = v3_ca

  [ dn ]
  CN = ${MAIL}

  [ v3_ca ]
  subjectKeyIdentifier = hash
  authorityKeyIdentifier = keyid:always,issuer
  basicConstraints = CA:true
  EOF
#+end_src

#+begin_src sh
  openssl genrsa -out "${SSL}/certs/${MAIL}/${MAIL}.key" 4096

  openssl req -new \
    -config "${SSL}/certs/${MAIL}/${MAIL}.cnf" \
    -key "${SSL}/certs/${MAIL}/${MAIL}.key" \
    -out "${SSL}/certs/${MAIL}/${MAIL}.csr"

  p "Set fake '${MAIL}' certificate creation date"
  sudo date "${FAKE}" && \
  openssl x509 -days ${DAYS} -req -set_serial 01 -sha256 \
    -CA "${SSL}/certs/${DOMAIN}/${DOMAIN}.crt" \
    -CAkey "${SSL}/certs/${DOMAIN}/${DOMAIN}.key" \
    -in "${SSL}/certs/${MAIL}/${MAIL}.csr" \
    -out "${SSL}/certs/${MAIL}/${MAIL}.crt" && \
  sudo ntpdate -u time.apple.com
}
#+end_src

*** shell

#+begin_src sh
function config_shell () {
  if [ -x "/usr/local/bin/zsh" ]; then
    # Current User > Advanced Options… > Login shell: /usr/local/bin/zsh
    p "Set '/usr/local/bin/zsh' as the default shell"

    sudo sh -c "printf '%s\n' '/usr/local/bin/zsh' >> /etc/shells" && \
    sudo chsh -s /usr/local/bin/zsh && \
    sudo mkdir -m go= -p /private/var/root/Library/Caches/ && \
    sudo touch "/private/var/root/.zshrc"
    chsh -s /usr/local/bin/zsh
    touch "${HOME}/.zshrc"
  fi
}
#+end_src

*** sieve

#+begin_src sh
  function config_sieve () {
    p "Configure sieve"

    cat > "${HOME}/.sieve" << EOF
  require ["date", "fileinto", "imap4flags", "mailbox", "relational", "variables"];

  setflag "\\Seen";

  if date :is "date" "year" "1995" { fileinto :create "Archives.1995"; }
  if date :is "date" "year" "1996" { fileinto :create "Archives.1996"; }
  if date :is "date" "year" "1997" { fileinto :create "Archives.1997"; }
  if date :is "date" "year" "1998" { fileinto :create "Archives.1998"; }
  if date :is "date" "year" "1999" { fileinto :create "Archives.1999"; }
  if date :is "date" "year" "2000" { fileinto :create "Archives.2000"; }
  if date :is "date" "year" "2001" { fileinto :create "Archives.2001"; }
  if date :is "date" "year" "2002" { fileinto :create "Archives.2002"; }
  if date :is "date" "year" "2003" { fileinto :create "Archives.2003"; }
  if date :is "date" "year" "2004" { fileinto :create "Archives.2004"; }
  if date :is "date" "year" "2005" { fileinto :create "Archives.2005"; }
  if date :is "date" "year" "2006" { fileinto :create "Archives.2006"; }
  if date :is "date" "year" "2007" { fileinto :create "Archives.2007"; }
  if date :is "date" "year" "2008" { fileinto :create "Archives.2008"; }
  if date :is "date" "year" "2009" { fileinto :create "Archives.2009"; }
  if date :is "date" "year" "2010" { fileinto :create "Archives.2010"; }
  if date :is "date" "year" "2011" { fileinto :create "Archives.2011"; }
  if date :is "date" "year" "2012" { fileinto :create "Archives.2012"; }
  if date :is "date" "year" "2013" { fileinto :create "Archives.2013"; }
  if date :is "date" "year" "2014" { fileinto :create "Archives.2014"; }
  if date :is "date" "year" "2015" { fileinto :create "Archives.2015"; }
  if date :is "date" "year" "2016" { fileinto :create "Archives.2016"; }
  if date :is "date" "year" "2017" { fileinto :create "Archives.2017"; }
  if date :is "date" "year" "2018" { fileinto :create "Archives.2018"; }
  if date :is "date" "year" "2019" { fileinto :create "Archives.2019"; }
  if date :is "date" "year" "2020" { fileinto :create "Archives.2020"; }
  EOF
  }
#+end_src

*** ssh

#+begin_src sh
  function config_ssh () {
    p "Create ssh keys"

    mkdir -m go= -p "${HOME}/.ssh"

    ssh-keygen -t ed25519 -a 100 -C "ptb@ioutime.com"

    cat > "${HOME}/.ssh/config" <<-EOF
  Host *
    AddKeysToAgent yes
    IdentityFile ~/.ssh/id_ed25519
  EOF

    p "Adding ssh key to macOS keychain"

    ssh-add -K
    echo "ssh-add -A &> /dev/null" >> "${HOME}/.zshrc"
  }
#+end_src

#+begin_src sh
  function config_ssh_help () {
    pbcopy < "${HOME}/.ssh/id_ed25519.pub"
    open "https://github.com/settings/keys"
  }
#+end_src

#+begin_example sh :tangle no
  ssh-copy-id username@example.com
#+end_example

*** TODO: vim

#+begin_src sh :tangle no
  function config_vim () {
    p "Configure vim"
  }
#+end_src

*** zsh

#+begin_src sh
function config_zsh () {
  p "Create system default '/etc/zshrc'"

  sudo tee /etc/zshrc > /dev/null <<-EOF
alias -g ...="../.."
alias -g ....="../../.."
alias -g .....="../../../.."
alias l="/bin/ls -lG"
alias ll="/bin/ls -alG"
alias lr="/bin/ls -alRG"
alias screen="/usr/bin/screen -U"
autoload -U compaudit
compaudit | xargs -L 1 sudo chown -HR root:wheel {} 2> /dev/null
compaudit | xargs -L 1 sudo chmod -HR go-w {} 2> /dev/null
autoload -U compinit
compinit -d "\${HOME}/Library/Caches/zcompdump"
bindkey "\e[3~" delete-char
bindkey "\e[A" up-line-or-search
bindkey "\e[B" down-line-or-search
export HISTFILE="\${HOME}/Library/Caches/zsh_history"
export HISTSIZE=50000
export SAVEHIST=50000
setopt APPEND_HISTORY
setopt AUTO_CD
setopt EXTENDED_HISTORY
setopt HIST_FIND_NO_DUPS
setopt INC_APPEND_HISTORY
setopt PROMPT_SUBST
setopt SHARE_HISTORY
stty erase 
# Correctly display UTF-8 with combining characters.
if [ "\$TERM_PROGRAM" = "Apple_Terminal" ]; then
  setopt combiningchars
fi
function precmd () {
  print -Pn "\\e]7;file://%M\${PWD// /%%20}\a";
  print -Pn "\\e]2;%n@%m\a";
  print -Pn "\\e]1;%~\a";
}
function gb () {
  git branch --no-color 2> /dev/null | \
    sed -e "/^[^*]/d" -e "s/* \(.*\)/ (\1)/"
}
function xd () {
  xattr -d com.apple.diskimages.fsck \$* 2> /dev/null;
  xattr -d com.apple.diskimages.recentcksum \$* 2> /dev/null;
  xattr -d com.apple.metadata:kMDItemFinderComment \$* 2> /dev/null;
  xattr -d com.apple.metadata:kMDItemDownloadedDate \$* 2> /dev/null;
  xattr -d com.apple.metadata:kMDItemWhereFroms \$* 2> /dev/null;
  xattr -d com.apple.quarantine \$* 2> /dev/null;
  find . -name .DS_Store -delete;
  find . -name 'Icon' -delete
}
function sf () {
  SetFile -P -d "\$1 12:00:00" -m "\$1 12:00:00" \$argv[2,\$]
}
function sd () {
  xd **/*;
  sf \$1 .;
  for i in **/*; do sf \$1 \$i; done;
  chown -R root:wheel .;
  chmod -R a+r,u+w,go-w .;
  find . -type d -exec chmod a+x '{}' ';';
  chgrp -R admin ./Applications;
  chmod -R g+w ./Applications;
  chgrp -R admin ./Library;
  chmod -R g+w ./Library;
  chgrp -R staff "./Library/Application Support/Adobe";
  chmod -R g-w ./Library/Keychains;
  chmod -R g-w ./Library/ScriptingAdditions;
  chgrp -R wheel ./Library/Filesystems;
  chmod -R g-w ./Library/Filesystems;
  chgrp -R wheel ./Library/LaunchAgents;
  chmod -R g-w ./Library/LaunchAgents;
  chgrp -R wheel ./Library/LaunchDaemons;
  chmod -R g-w ./Library/LaunchDaemons;
  chgrp -R wheel ./Library/PreferencePanes;
  chmod -R g-w ./Library/PreferencePanes;
  chgrp -R wheel ./Library/StartupItems;
  chmod -R g-w ./Library/StartupItems;
  chgrp -R wheel ./Library/Widgets;
  chmod -R g-w ./Library/Widgets;
  find . -name "kexts" -type d -exec chmod -R g-w '{}' ';';
  find . -name "*.kext" -exec chown -R root:wheel '{}' ';';
  find . -name "*.kext" -exec chmod -R g-w '{}' ';'
}
MAS="\$(getconf DARWIN_USER_CACHE_DIR)com.apple.appstore"
PROMPT="%B%n@%m%b:%2~%B\$(gb) %#%b "
EOF
}
#+end_src

*** Login Items

#+begin_src sh
  function config_loginitems () {
    p "Create login items"

    osascript > /dev/null << EOF
      tell app "System Events"
        make new login item with properties ¬
          { path: "/Applications/Alfred 3.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/autoping.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Caffeine.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Coffitivity.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Dropbox.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/HardwareGrowler.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/I Love Stars.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/IPMenulet.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/iTunes.app/Contents/MacOS/iTunesHelper.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Menubar Countdown.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Meteorologist.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Moom.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/NZBGet.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Plex Media Server.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Sonarr-Menu.app", hidden: true }
        make new login item with properties ¬
          { path: "/Library/PreferencePanes/SteerMouse.prefPane/Contents/MacOS/SteerMouse Manager.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Synergy Preferences.app/Contents/PreferencePanes/Synergy.prefPane/Contents/Helpers/Synergy.app", hidden: true }
      end tell
  EOF

    mkdir -m go= -p "${HOME}/Library/LaunchAgents"
    printf "%s\t%s\n" \
      "net.elasticthreads.nv" "add ':KeepAlive' bool true" \
      "net.elasticthreads.nv" "add ':Label' string 'net.elasticthreads.nv'" \
      "net.elasticthreads.nv" "add ':Program' string '/Applications/nvALT.app/Contents/MacOS/nvALT'" \
    | while IFS=$'\t' read a b; do
      /usr/libexec/PlistBuddy "${HOME}/Library/LaunchAgents/${a}.plist" -c "${b}" &> /dev/null
    done
  }
#+end_src

*** handlers

#+begin_src sh
  function config_handlers () {
    if [ -f "${HOME}/Library/Preferences/org.duti.plist" ]; then
      rm "${HOME}/Library/Preferences/org.duti.plist"
    fi

    printf "%s\t%s\t%s\n" \
      "com.apple.DiskImageMounter" "com.apple.disk-image" "all" \
      "com.apple.DiskImageMounter" "public.disk-image" "all" \
      "com.apple.DiskImageMounter" "public.iso-image" "all" \
      "com.apple.QuickTimePlayerX" "com.apple.coreaudio-format" "all" \
      "com.apple.QuickTimePlayerX" "com.apple.quicktime-movie" "all" \
      "com.apple.QuickTimePlayerX" "com.microsoft.waveform-audio" "all" \
      "com.apple.QuickTimePlayerX" "public.aifc-audio" "all" \
      "com.apple.QuickTimePlayerX" "public.aiff-audio" "all" \
      "com.apple.QuickTimePlayerX" "public.audio" "all" \
      "com.apple.QuickTimePlayerX" "public.mp3" "all" \
      "com.apple.Safari" "com.compuserve.gif" "all" \
      "com.apple.Terminal" "com.apple.terminal.shell-script" "all" \
      "com.apple.iTunes" "com.apple.iTunes.audible" "all" \
      "com.apple.iTunes" "com.apple.iTunes.ipg" "all" \
      "com.apple.iTunes" "com.apple.iTunes.ipsw" "all" \
      "com.apple.iTunes" "com.apple.iTunes.ite" "all" \
      "com.apple.iTunes" "com.apple.iTunes.itlp" "all" \
      "com.apple.iTunes" "com.apple.iTunes.itms" "all" \
      "com.apple.iTunes" "com.apple.iTunes.podcast" "all" \
      "com.apple.iTunes" "com.apple.m4a-audio" "all" \
      "com.apple.iTunes" "com.apple.mpeg-4-ringtone" "all" \
      "com.apple.iTunes" "com.apple.protected-mpeg-4-audio" "all" \
      "com.apple.iTunes" "com.apple.protected-mpeg-4-video" "all" \
      "com.apple.iTunes" "com.audible.aa-audio" "all" \
      "com.apple.iTunes" "public.mpeg-4-audio" "all" \
      "com.apple.installer" "com.apple.installer-package-archive" "all" \
      "com.github.atom" "com.apple.binary-property-list" "editor" \
      "com.github.atom" "com.apple.crashreport" "editor" \
      "com.github.atom" "com.apple.dt.document.ascii-property-list" "editor" \
      "com.github.atom" "com.apple.dt.document.script-suite-property-list" "editor" \
      "com.github.atom" "com.apple.dt.document.script-terminology-property-list" "editor" \
      "com.github.atom" "com.apple.log" "editor" \
      "com.github.atom" "com.apple.property-list" "editor" \
      "com.github.atom" "com.apple.rez-source" "editor" \
      "com.github.atom" "com.apple.symbol-export" "editor" \
      "com.github.atom" "com.apple.xcode.ada-source" "editor" \
      "com.github.atom" "com.apple.xcode.bash-script" "editor" \
      "com.github.atom" "com.apple.xcode.configsettings" "editor" \
      "com.github.atom" "com.apple.xcode.csh-script" "editor" \
      "com.github.atom" "com.apple.xcode.fortran-source" "editor" \
      "com.github.atom" "com.apple.xcode.ksh-script" "editor" \
      "com.github.atom" "com.apple.xcode.lex-source" "editor" \
      "com.github.atom" "com.apple.xcode.make-script" "editor" \
      "com.github.atom" "com.apple.xcode.mig-source" "editor" \
      "com.github.atom" "com.apple.xcode.pascal-source" "editor" \
      "com.github.atom" "com.apple.xcode.strings-text" "editor" \
      "com.github.atom" "com.apple.xcode.tcsh-script" "editor" \
      "com.github.atom" "com.apple.xcode.yacc-source" "editor" \
      "com.github.atom" "com.apple.xcode.zsh-script" "editor" \
      "com.github.atom" "com.apple.xml-property-list" "editor" \
      "com.github.atom" "com.barebones.bbedit.actionscript-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.erb-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.ini-configuration" "editor" \
      "com.github.atom" "com.barebones.bbedit.javascript-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.json-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.jsp-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.lasso-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.lua-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.setext-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.sql-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.tcl-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.tex-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.textile-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.vbscript-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.vectorscript-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.verilog-hdl-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.vhdl-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.yaml-source" "editor" \
      "com.github.atom" "com.netscape.javascript-source" "editor" \
      "com.github.atom" "com.sun.java-source" "editor" \
      "com.github.atom" "dyn.ah62d4rv4ge80255drq" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge80g55gq3w0n" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge80g55sq2" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge80y2xzrf0gk3pw" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge81e3dtqq" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge81e7k" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge81g25xsq" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge81g2pxsq" "all" \
      "com.github.atom" "net.daringfireball.markdown" "editor" \
      "com.github.atom" "public.assembly-source" "editor" \
      "com.github.atom" "public.c-header" "editor" \
      "com.github.atom" "public.c-plus-plus-source" "editor" \
      "com.github.atom" "public.c-source" "editor" \
      "com.github.atom" "public.csh-script" "editor" \
      "com.github.atom" "public.json" "editor" \
      "com.github.atom" "public.lex-source" "editor" \
      "com.github.atom" "public.log" "editor" \
      "com.github.atom" "public.mig-source" "editor" \
      "com.github.atom" "public.nasm-assembly-source" "editor" \
      "com.github.atom" "public.objective-c-plus-plus-source" "editor" \
      "com.github.atom" "public.objective-c-source" "editor" \
      "com.github.atom" "public.patch-file" "editor" \
      "com.github.atom" "public.perl-script" "editor" \
      "com.github.atom" "public.php-script" "editor" \
      "com.github.atom" "public.plain-text" "editor" \
      "com.github.atom" "public.precompiled-c-header" "editor" \
      "com.github.atom" "public.precompiled-c-plus-plus-header" "editor" \
      "com.github.atom" "public.python-script" "editor" \
      "com.github.atom" "public.ruby-script" "editor" \
      "com.github.atom" "public.script" "editor" \
      "com.github.atom" "public.shell-script" "editor" \
      "com.github.atom" "public.source-code" "editor" \
      "com.github.atom" "public.text" "editor" \
      "com.github.atom" "public.utf16-external-plain-text" "editor" \
      "com.github.atom" "public.utf16-plain-text" "editor" \
      "com.github.atom" "public.utf8-plain-text" "editor" \
      "com.github.atom" "public.xml" "editor" \
      "com.kodlian.Icon-Slate" "com.apple.icns" "all" \
      "com.kodlian.Icon-Slate" "com.microsoft.ico" "all" \
      "com.microsoft.Word" "public.rtf" "all" \
      "com.panayotis.jubler" "dyn.ah62d4rv4ge81g6xy" "all" \
      "com.sketchup.SketchUp.2017" "com.sketchup.skp" "all" \
      "com.VortexApps.NZBVortex3" "dyn.ah62d4rv4ge8068xc" "all" \
      "com.vmware.fusion" "com.microsoft.windows-executable" "all" \
      "cx.c3.theunarchiver" "com.alcohol-soft.mdf-image" "all" \
      "cx.c3.theunarchiver" "com.allume.stuffit-archive" "all" \
      "cx.c3.theunarchiver" "com.altools.alz-archive" "all" \
      "cx.c3.theunarchiver" "com.amiga.adf-archive" "all" \
      "cx.c3.theunarchiver" "com.amiga.adz-archive" "all" \
      "cx.c3.theunarchiver" "com.apple.applesingle-archive" "all" \
      "cx.c3.theunarchiver" "com.apple.binhex-archive" "all" \
      "cx.c3.theunarchiver" "com.apple.bom-compressed-cpio" "all" \
      "cx.c3.theunarchiver" "com.apple.itunes.ipa" "all" \
      "cx.c3.theunarchiver" "com.apple.macbinary-archive" "all" \
      "cx.c3.theunarchiver" "com.apple.self-extracting-archive" "all" \
      "cx.c3.theunarchiver" "com.apple.xar-archive" "all" \
      "cx.c3.theunarchiver" "com.apple.xip-archive" "all" \
      "cx.c3.theunarchiver" "com.cyclos.cpt-archive" "all" \
      "cx.c3.theunarchiver" "com.microsoft.cab-archive" "all" \
      "cx.c3.theunarchiver" "com.microsoft.msi-installer" "all" \
      "cx.c3.theunarchiver" "com.nero.nrg-image" "all" \
      "cx.c3.theunarchiver" "com.network172.pit-archive" "all" \
      "cx.c3.theunarchiver" "com.nowsoftware.now-archive" "all" \
      "cx.c3.theunarchiver" "com.nscripter.nsa-archive" "all" \
      "cx.c3.theunarchiver" "com.padus.cdi-image" "all" \
      "cx.c3.theunarchiver" "com.pkware.zip-archive" "all" \
      "cx.c3.theunarchiver" "com.rarlab.rar-archive" "all" \
      "cx.c3.theunarchiver" "com.redhat.rpm-archive" "all" \
      "cx.c3.theunarchiver" "com.stuffit.archive.sit" "all" \
      "cx.c3.theunarchiver" "com.stuffit.archive.sitx" "all" \
      "cx.c3.theunarchiver" "com.sun.java-archive" "all" \
      "cx.c3.theunarchiver" "com.symantec.dd-archive" "all" \
      "cx.c3.theunarchiver" "com.winace.ace-archive" "all" \
      "cx.c3.theunarchiver" "com.winzip.zipx-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.arc-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.arj-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.dcs-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.dms-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.ha-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.lbr-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.lha-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.lhf-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.lzx-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.packdev-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.pax-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.pma-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.pp-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.xmash-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.zoo-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.zoom-archive" "all" \
      "cx.c3.theunarchiver" "org.7-zip.7-zip-archive" "all" \
      "cx.c3.theunarchiver" "org.archive.warc-archive" "all" \
      "cx.c3.theunarchiver" "org.debian.deb-archive" "all" \
      "cx.c3.theunarchiver" "org.gnu.gnu-tar-archive" "all" \
      "cx.c3.theunarchiver" "org.gnu.gnu-zip-archive" "all" \
      "cx.c3.theunarchiver" "org.gnu.gnu-zip-tar-archive" "all" \
      "cx.c3.theunarchiver" "org.tukaani.lzma-archive" "all" \
      "cx.c3.theunarchiver" "org.tukaani.xz-archive" "all" \
      "cx.c3.theunarchiver" "public.bzip2-archive" "all" \
      "cx.c3.theunarchiver" "public.cpio-archive" "all" \
      "cx.c3.theunarchiver" "public.tar-archive" "all" \
      "cx.c3.theunarchiver" "public.tar-bzip2-archive" "all" \
      "cx.c3.theunarchiver" "public.z-archive" "all" \
      "cx.c3.theunarchiver" "public.zip-archive" "all" \
      "cx.c3.theunarchiver" "public.zip-archive.first-part" "all" \
      "org.gnu.Emacs" "dyn.ah62d4rv4ge8086xh" "all" \
      "org.inkscape.Inkscape" "public.svg-image" "editor" \
      "org.videolan.vlc" "com.apple.m4v-video" "all" \
      "org.videolan.vlc" "com.microsoft.windows-media-wmv" "all" \
      "org.videolan.vlc" "org.videolan.3gp" "all" \
      "org.videolan.vlc" "org.videolan.aac" "all" \
      "org.videolan.vlc" "org.videolan.ac3" "all" \
      "org.videolan.vlc" "org.videolan.aiff" "all" \
      "org.videolan.vlc" "org.videolan.amr" "all" \
      "org.videolan.vlc" "org.videolan.aob" "all" \
      "org.videolan.vlc" "org.videolan.ape" "all" \
      "org.videolan.vlc" "org.videolan.asf" "all" \
      "org.videolan.vlc" "org.videolan.avi" "all" \
      "org.videolan.vlc" "org.videolan.axa" "all" \
      "org.videolan.vlc" "org.videolan.axv" "all" \
      "org.videolan.vlc" "org.videolan.divx" "all" \
      "org.videolan.vlc" "org.videolan.dts" "all" \
      "org.videolan.vlc" "org.videolan.dv" "all" \
      "org.videolan.vlc" "org.videolan.flac" "all" \
      "org.videolan.vlc" "org.videolan.flash" "all" \
      "org.videolan.vlc" "org.videolan.gxf" "all" \
      "org.videolan.vlc" "org.videolan.it" "all" \
      "org.videolan.vlc" "org.videolan.mid" "all" \
      "org.videolan.vlc" "org.videolan.mka" "all" \
      "org.videolan.vlc" "org.videolan.mkv" "all" \
      "org.videolan.vlc" "org.videolan.mlp" "all" \
      "org.videolan.vlc" "org.videolan.mod" "all" \
      "org.videolan.vlc" "org.videolan.mpc" "all" \
      "org.videolan.vlc" "org.videolan.mpeg-audio" "all" \
      "org.videolan.vlc" "org.videolan.mpeg-stream" "all" \
      "org.videolan.vlc" "org.videolan.mpeg-video" "all" \
      "org.videolan.vlc" "org.videolan.mxf" "all" \
      "org.videolan.vlc" "org.videolan.nsv" "all" \
      "org.videolan.vlc" "org.videolan.nuv" "all" \
      "org.videolan.vlc" "org.videolan.ogg-audio" "all" \
      "org.videolan.vlc" "org.videolan.ogg-video" "all" \
      "org.videolan.vlc" "org.videolan.oma" "all" \
      "org.videolan.vlc" "org.videolan.opus" "all" \
      "org.videolan.vlc" "org.videolan.quicktime" "all" \
      "org.videolan.vlc" "org.videolan.realmedia" "all" \
      "org.videolan.vlc" "org.videolan.rec" "all" \
      "org.videolan.vlc" "org.videolan.rmi" "all" \
      "org.videolan.vlc" "org.videolan.s3m" "all" \
      "org.videolan.vlc" "org.videolan.spx" "all" \
      "org.videolan.vlc" "org.videolan.tod" "all" \
      "org.videolan.vlc" "org.videolan.tta" "all" \
      "org.videolan.vlc" "org.videolan.vob" "all" \
      "org.videolan.vlc" "org.videolan.voc" "all" \
      "org.videolan.vlc" "org.videolan.vqf" "all" \
      "org.videolan.vlc" "org.videolan.vro" "all" \
      "org.videolan.vlc" "org.videolan.wav" "all" \
      "org.videolan.vlc" "org.videolan.webm" "all" \
      "org.videolan.vlc" "org.videolan.wma" "all" \
      "org.videolan.vlc" "org.videolan.wmv" "all" \
      "org.videolan.vlc" "org.videolan.wtv" "all" \
      "org.videolan.vlc" "org.videolan.wv" "all" \
      "org.videolan.vlc" "org.videolan.xa" "all" \
      "org.videolan.vlc" "org.videolan.xesc" "all" \
      "org.videolan.vlc" "org.videolan.xm" "all" \
      "org.videolan.vlc" "public.ac3-audio" "all" \
      "org.videolan.vlc" "public.audiovisual-content" "all" \
      "org.videolan.vlc" "public.avi" "all" \
      "org.videolan.vlc" "public.movie" "all" \
      "org.videolan.vlc" "public.mpeg" "all" \
      "org.videolan.vlc" "public.mpeg-2-video" "all" \
      "org.videolan.vlc" "public.mpeg-4" "all" \
    | while IFS=$'\t' read a b c; do
        defaults write org.duti DUTISettings -array-add \
          "{
            DUTIBundleIdentifier = '$a';
            DUTIUniformTypeIdentifier = '$b';
            DUTIRole = '$c';
          }"
    done

    if [ -x "/usr/local/bin/duti" ]; then
      p "Set document file handlers"

      duti "${HOME}/Library/Preferences/org.duti.plist" 2> /dev/null
    fi

    /System/Library/Frameworks/CoreServices.framework/Versions/Current/Frameworks/LaunchServices.framework/Versions/Current/Support/lsregister -kill -r -domain local -domain system -domain user

    sudo rm -rf /Library/Caches/com.apple.iconservices.store
    sudo find /private/var/folders -depth \( -name com.apple.dock.iconcache -or -name com.apple.iconservices \) -exec rm -rf {} \;
    sudo touch /Applications/* /Applications/Utilities/* 2> /dev/null

    sleep 5
    osascript -e 'tell app "Dock" to quit'
    killall Finder
  }
#+end_src

#+begin_src sh
  function config_done () {
    p "To copy gpg public key, enter 'config_gpg_help'"
    p "To copy ssh public key, enter 'config_ssh_help'"
    p "Otherwise, enter 'private' (if configured) or 'reboot' now"
  }
#+end_src

*** config

#+begin_src sh
  function config () {
    config_mas
    config_atom
    config_bbedit
    config_desktop
    config_dock
    config_emacs
    config_istat
    config_vi_script
    config_terminal
    config_openssl
    config_dovecot
    config_sieve
    config_getmail
    config_gpg
    config_git
    config_shell
    config_ssh
    #config_vim
    config_zsh
    config_loginitems
    config_handlers
    config_done
  }
#+end_src

** Private

This section includes license keys, registration codes, and serial numbers.

#+begin_src sh
  function private () {
    printf "%s\n"
#+end_src

-----BEGIN PGP MESSAGE-----

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
=5r9g
-----END PGP MESSAGE-----

#+begin_src sh
    # sudo fdesetup enable
  }
#+end_src


** Commands

#+begin_src sh
  function display_help () {
    cat << EOF

    Initialize:
      $(which init)

    Install:
      $(which install)

  EOF
  }

  display_help
  fi
#+end_src
