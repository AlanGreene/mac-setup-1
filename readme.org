* Complete OS X Setup

From clean install to fully configured.

** Step 1: Init Environment
:PROPERTIES:
:tangle: step-1.command
:shebang: #!/bin/sh
:END:
*** Temporarily Disable ~sudo~ Password Timeout
The ~sudo~ password timeout is re-enabled at the end of this script.
#+BEGIN_SRC sh
sudo tee -a /etc/sudoers > /dev/null <<-EOF
Defaults  timestamp_timeout=-1
%admin ALL=(ALL) NOPASSWD:SETENV: /usr/sbin/installer
EOF
#+END_SRC

*** Disable System and Disk Sleep
#+BEGIN_SRC sh
sudo pmset -a sleep 0
sudo pmset -a disksleep 0
#+END_SRC

*** Setup Required Paths
#+BEGIN_SRC sh
if ! grep -Fq '/usr/local/sbin' /etc/paths; then
  sudo sed -i -e '/\/usr\/sbin/i\
\/usr\/local\/sbin\
' /etc/paths
fi

sudo mkdir -p '/usr/local/Caskroom' '/Library/Caches/Homebrew/'
sudo chgrp admin '/usr/local/' '/usr/local/Caskroom/' '/Library/Caches/Homebrew/' '/Library/ColorPickers/' '/Library/Screen Savers/'
sudo chmod g+w '/usr/local/' '/usr/local/Caskroom/' '/Library/Caches/Homebrew/' '/Library/ColorPickers/' '/Library/Screen Savers/'
#+END_SRC

*** Set Environment Variables Permanently (after restart)
Details: http://stackoverflow.com/a/26477515/1959421

**** Create /etc/environment
#+BEGIN_SRC sh
sudo tee /etc/environment > /dev/null <<-EOF
#!/bin/sh

set -e

syslog -s -l warn "Set environment variables for \$(whoami) - start"

CASK_OPTS="--appdir=/Applications"
CASK_OPTS="\${CASK_OPTS} --caskroom=/usr/local/Caskroom"
CASK_OPTS="\${CASK_OPTS} --colorpickerdir=/Library/ColorPickers"
CASK_OPTS="\${CASK_OPTS} --fontdir=/Library/Fonts"
CASK_OPTS="\${CASK_OPTS} --prefpanedir=/Library/PreferencePanes"
CASK_OPTS="\${CASK_OPTS} --screen_saverdir='/Library/Screen Savers'"
export HOMEBREW_CASK_OPTS=\$CASK_OPTS
launchctl setenv HOMEBREW_CASK_OPTS "\$CASK_OPTS"

if [ -x /usr/libexec/path_helper ]; then
  export PATH=""
  eval \`/usr/libexec/path_helper -s\`
  launchctl setenv PATH \$PATH
fi

osascript -e 'tell app "Dock" to quit'

syslog -s -l warn "Set environment variables for \$(whoami) - complete"
EOF

sudo chmod a+x /etc/environment
#+END_SRC

**** Create /Library/LaunchAgents/environment.user for GUI Applications
#+BEGIN_SRC sh
sudo defaults write '/Library/LaunchAgents/environment.user' 'Label' -string 'environment.user'
sudo defaults write '/Library/LaunchAgents/environment.user' 'ProgramArguments' -array-add '/etc/environment'
sudo defaults write '/Library/LaunchAgents/environment.user' 'RunAtLoad' -bool true
sudo defaults write '/Library/LaunchAgents/environment.user' 'WatchPaths' -array-add '/etc/environment'
sudo defaults write '/Library/LaunchAgents/environment.user' 'WatchPaths' -array-add '/etc/paths'
sudo defaults write '/Library/LaunchAgents/environment.user' 'WatchPaths' -array-add '/etc/paths.d'
sudo plutil -convert xml1 '/Library/LaunchAgents/environment.user.plist'
sudo chmod 644 /Library/LaunchAgents/environment.user.plist
sudo launchctl load -w /Library/LaunchAgents/environment.user.plist
#+END_SRC

**** Create /Library/LaunchDaemons/environment for Terminal Applications
#+BEGIN_SRC sh
sudo defaults write '/Library/LaunchDaemons/environment' 'Label' -string 'environment'
sudo defaults write '/Library/LaunchDaemons/environment' 'ProgramArguments' -array-add '/etc/environment'
sudo defaults write '/Library/LaunchDaemons/environment' 'RunAtLoad' -bool true
sudo defaults write '/Library/LaunchDaemons/environment' 'WatchPaths' -array-add '/etc/environment'
sudo defaults write '/Library/LaunchDaemons/environment' 'WatchPaths' -array-add '/etc/paths'
sudo defaults write '/Library/LaunchDaemons/environment' 'WatchPaths' -array-add '/etc/paths.d'
sudo plutil -convert xml1 '/Library/LaunchDaemons/environment.plist'
sudo chmod 644 /Library/LaunchDaemons/environment.plist
sudo launchctl load -w /Library/LaunchDaemons/environment.plist
#+END_SRC

*** Restart Before Continuing
#+BEGIN_SRC sh
osascript -e 'tell app "loginwindow" to «event aevtrrst»'
#+END_SRC


** Step 2: Install Software
:PROPERTIES:
:tangle: step-2.command
:shebang: #!/bin/sh
:END:
*** Open New Terminal
#+BEGIN_SRC sh
if [ -z "$1" ]; then
  osascript > /dev/null <<-END
    tell app "Terminal" to do script "source ${0} 0"
END
  clear

else
#+END_SRC

*** Initialize Variables
#+BEGIN_SRC sh
function init_install_path () {
  if [ ! -d "/Volumes/Storage" ] \
    && [ -d "/Volumes/VMware Shared Folders/Storage" ]; then
    cd "/Volumes" \
      && sudo ln -s "VMware Shared Folders/Storage" "Storage"
  fi

  if [ -d "/Volumes/Storage/Software" ]; then
    INSTALL_PATH="/Volumes/Storage/Software"
  else
    INSTALL_PATH="${HOME}/Downloads"
  fi
}
#+END_SRC

*** Install Command Line Tools
#+BEGIN_SRC sh
function install_command_line_tools () {
  init_install_path

  INSTALL_PATH_XCODE="${INSTALL_PATH}/apple.com"

  if [ ! -d "${INSTALL_PATH_XCODE}" ]; then
    mkdir -p "${INSTALL_PATH_XCODE}"
  fi

  if [ ! -f "${INSTALL_PATH_XCODE}/CLTools_Executables.pkg" ] \
    || [ ! -f "${INSTALL_PATH_XCODE}/DevSDK_OSX1011.pkg" ]; then
    cd "${INSTALL_PATH_XCODE}" \
      && curl --compressed --location --silent \
      "https://swscan.apple.com/content/catalogs/others/index-10.11-10.10-10.9-mountainlion-lion-snowleopard-leopard.merged-1.sucatalog.gz" \
      | sed -n \
        -e "s/^.*<string>\(.*CLTools_Executables.pkg\).*/\1/p" \
        -e "s/^.*<string>\(.*DevSDK_OSX1011.pkg\).*/\1/p" \
      | tail -n 2 \
      | xargs -L 1 curl --compressed --location --remote-name
  fi

  if [ -f "${INSTALL_PATH_XCODE}/CLTools_Executables.pkg" ] \
    && [ -f "${INSTALL_PATH_XCODE}/DevSDK_OSX1011.pkg" ]; then
    sudo installer -pkg "${INSTALL_PATH_XCODE}/CLTools_Executables.pkg" -target /
    sudo installer -pkg "${INSTALL_PATH_XCODE}/DevSDK_OSX1011.pkg" -target /
  fi
}
#+END_SRC

*** Install Homebrew
Details: http://brew.sh

#+BEGIN_SRC sh
function install_homebrew () {
  sudo chown $(whoami) '/usr/local' '/usr/local/Caskroom' '/Library/Caches/Homebrew/'

  ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

  brew update
  brew doctor

  brew tap "caskroom/cask"
  brew tap "homebrew/bundle"
}
#+END_SRC

*** Create Homebrew Update Script
#+BEGIN_SRC sh
function create_brew_update_script () {
  cat > /usr/local/bin/brew-update.sh <<-EOF
#!/bin/sh

brew update
brew doctor

brew cask install "caskroom/fonts/font-inconsolata-lgc" 2> /dev/null
brew cask install "ptb/custom/blankscreen" 2> /dev/null

# Details: https://github.com/caskroom/homebrew-cask/issues/13201
# Source: https://github.com/caskroom/homebrew-cask/pull/13966/files?diff=split

curl --compressed --location --show-error --silent \\
  --url https://github.com/mwean/homebrew-cask/raw/master/lib/hbc/artifact.rb \\
  --output /usr/local/Library/Taps/caskroom/homebrew-cask/lib/hbc/artifact.rb

curl --compressed --location --show-error --silent \\
  --url https://github.com/mwean/homebrew-cask/raw/master/lib/hbc/artifact/app.rb \\
  --output /usr/local/Library/Taps/caskroom/homebrew-cask/lib/hbc/artifact/app.rb

curl --compressed --location --show-error --silent \\
  --url https://github.com/mwean/homebrew-cask/raw/master/lib/hbc/artifact/moved.rb \\
  --output /usr/local/Library/Taps/caskroom/homebrew-cask/lib/hbc/artifact/moved.rb

curl --compressed --location --show-error --silent \\
  --url https://github.com/mwean/homebrew-cask/raw/master/lib/hbc/artifact/suite.rb \\
  --output /usr/local/Library/Taps/caskroom/homebrew-cask/lib/hbc/artifact/suite.rb

curl --compressed --location --show-error --silent \\
  --url https://github.com/mwean/homebrew-cask/raw/master/lib/hbc/dsl/postflight.rb \\
  --output /usr/local/Library/Taps/caskroom/homebrew-cask/lib/hbc/dsl/postflight.rb

curl --compressed --location --show-error --silent \\
  --url https://github.com/mwean/homebrew-cask/raw/master/lib/hbc/staged.rb \\
  --output /usr/local/Library/Taps/caskroom/homebrew-cask/lib/hbc/staged.rb

sed -i -e "s/@cask.staged_path/Hbc.appdir/" \\
  /usr/local/Library/Taps/caskroom/homebrew-cask/lib/hbc/artifact/symlinked.rb

cd /usr/local/ && brew bundle

brew upgrade --all
brew linkapps
EOF

  chmod +x /usr/local/bin/brew-update.sh
}
#+END_SRC

*** Create Brewfile
Details: https://github.com/Homebrew/homebrew-bundle

#+BEGIN_SRC sh
function create_brewfile () {
  cat > /usr/local/Brewfile <<-EOF
tap "caskroom/cask"
tap "homebrew/bundle"

cask "java"

brew "aspell", args: ["lang=en"]
brew "duti"
brew "railwaycat/emacsmacport/emacs-mac", args: ["with-spacemacs-icon"]
brew "ptb/custom/ffmpeg",
  args: [
  'with-faac',
  'with-fdk-aac',
  'with-ffplay',
  'with-fontconfig',
  'with-freetype',
  'with-frei0r',
  'with-lame',
  'with-libass',
  'with-libbluray',
  'with-libcaca',
  'with-libsoxr',
  'with-libssh',
  'with-libvidstab',
  'with-libvorbis',
  'with-libvpx',
  'with-opencore-amr',
  'with-openjpeg',
  'with-openssl',
  'with-opus',
  'with-rtmpdump',
  'with-schroedinger',
  'with-speex',
  'with-theora',
  'with-tools',
  'with-webp',
  'with-x264',
  'with-x265',
  'with-xvid',
  'with-zeromq' ]
brew "git"
brew "git-annex"
brew "gnu-sed", args: ["with-default-names"]
brew "gnupg"
brew "gpac", args: ["HEAD"]
brew "imagemagick"
brew "mercurial"
brew "mtr"
brew "nmap"
brew "node"
brew "openssl"
brew "homebrew/dupes/rsync"
brew "python"
brew "ruby"
brew "sqlite"
brew "stow"
brew "terminal-notifier"
brew "trash"
brew "vim"
brew "wget"
brew "youtube-dl"
brew "zsh"

cask "adium"
cask "adobe-illustrator-cc"
cask "adobe-indesign-cc"
cask "adobe-photoshop-cc"
cask "airfoil"
cask "alfred"
cask "arduino"
cask "atom"
cask "autodmg"
cask "bettertouchtool"
cask "caffeine"
cask "charles"
cask "couchpotato"
cask "dash"
cask "deluge"
cask "dockertoolbox"
cask "dropbox"
cask "expandrive"
cask "firefox"
cask "github-desktop"
cask "gitup"
cask "google-chrome"
cask "handbrake"
cask "hermes"
cask "imageoptim"
cask "integrity"
cask "istat-menus"
cask "jubler"
cask "little-snitch"
cask "machg"
cask "makemkv"
cask "menubar-countdown"
cask "meteorologist"
cask "microsoft-office"
cask "moom"
cask "mp4tools"
cask "munki"
cask "namechanger"
cask "nvalt"
cask "nzbget"
cask "nzbvortex"
cask "openemu"
cask "opera"
cask "pacifist"
cask "platypus"
cask "plex-media-server"
cask "raindrop"
cask "scrivener"
cask "sitesucker"
cask "sizeup"
cask "sketch"
cask "sketchup"
cask "skitch"
cask "skype"
cask "slack"
cask "sonarr"
cask "sonarr-menu"
cask "sourcetree"
cask "steermouse"
cask "subler"
cask "caskroom/versions/sublime-text3"
cask "the-unarchiver"
cask "torbrowser"
cask "tower"
cask "transmit"
cask "vimr"
cask "vlc"
cask "vmware-fusion"

cask "xquartz"
cask "inkscape"
cask "wireshark"

cask "ptb/custom/bbedit-10"
cask "ptb/custom/carbon-copy-cloner"
cask "ptb/custom/composer"
cask "ptb/custom/enhanced-dictation"
cask "ptb/custom/ipmenulet"
cask "ptb/custom/mas-1password"
cask "ptb/custom/mas-affinity-photo"
cask "ptb/custom/mas-autoping"
cask "ptb/custom/mas-coffitivity"
cask "ptb/custom/mas-growl"
cask "ptb/custom/mas-hardwaregrowler"
cask "ptb/custom/mas-i-love-stars"
cask "ptb/custom/mas-icon-slate"
cask "ptb/custom/mas-justnotes"
cask "ptb/custom/mas-keynote"
cask "ptb/custom/mas-numbers"
cask "ptb/custom/mas-pages"
cask "ptb/custom/mas-wifi-explorer"
cask "ptb/custom/mas-xcode"
cask "ptb/custom/pcalc-3"
cask "ptb/custom/sketchup-pro"
cask "ptb/custom/synergy"
cask "ptb/custom/text-to-speech-allison"
cask "ptb/custom/tune4mac"
EOF
}
#+END_SRC

*** Install OS X Software
#+BEGIN_SRC sh
function install_osx_software () {
  init_install_path

  INSTALL_PATH_HOMEBREW="${INSTALL_PATH}/github.com/Homebrew"

  if [ -d "${INSTALL_PATH_HOMEBREW}" ]; then
    cd "$(cd "${INSTALL_PATH_HOMEBREW}" && pwd)" \
      && cp -av * /Library/Caches/Homebrew/
  fi

  /usr/local/bin/brew-update.sh

  cd $(cd /usr/local/Caskroom/little-snitch/* && pwd) && open "Little Snitch Installer.app"
}
#+END_SRC

*** Install Node Software
#+BEGIN_SRC sh
function install_node_software () {
  npm install -g bower polyserve svgo
}
#+END_SRC

*** Install Python Software
#+BEGIN_SRC sh
function install_python_software () {
  curl -Ls https://bootstrap.pypa.io/get-pip.py | sudo -H python
  pip install --upgrade pip setuptools

  pip install psutil bottle zeroconf netifaces influxdb statsd pystache pysnmp pika yapf
  pip install glances
  pip install babelfish 'guessit<2' qtfaststart requests subliminal
  pip install 'requests[security]'
  pip install watchdog
}
#+END_SRC

*** Install Ruby Software
#+BEGIN_SRC sh
function install_ruby_software () {
  printf "%s\n" \
    "gem: --no-document" \
    >> "${HOME}/.gemrc"

  gem update --system
  gem update
  gem install nokogiri -- --use-system-libraries
  gem install web-console --version "~> 2"
  gem install rails sqlite3 sass-rails uglifier coffee-rails jquery-rails turbolinks jbuilder sdoc byebug spring tzinfo-data
  gem install em-websocket middleman middleman-autoprefixer middleman-blog middleman-compass middleman-livereload middleman-minify-html middleman-robots mime-types slim
  gem install bootstrap-sass git-cipher org-ruby thin
}
#+END_SRC

*** Create ~/usr/local/bin/vi~ Script
#+BEGIN_SRC sh
function create_vi_script () {
  cat > /usr/local/bin/vi <<-EOF
#!/bin/sh

if [ -e '/Applications/Emacs.app' ]; then
  t=()

  if [ \${#@} -ne 0 ]; then
    while IFS= read -r file; do
      [ ! -f "\$file" ] && t+=("\$file") && /usr/bin/touch "\$file"
      file=\$(echo \$(cd \$(dirname "\$file") && pwd -P)/\$(basename "\$file"))
      \$(/usr/bin/osascript <<-END
        if application "Emacs.app" is running then
          tell application id (id of application "Emacs.app") to open POSIX file "\$file"
        else
          tell application ((path to applications folder as text) & "Emacs.app")
            activate
            open POSIX file "\$file"
          end tell
        end if
END
        ) &  # Note: END on the previous line may be indented with tabs but not spaces
      done <<<"\$(printf '%s\n' "\$@")"
    fi

    if [ ! -z "\$t" ]; then
      \$(/bin/sleep 10; for file in "\${t[@]}"; do
        [ ! -s "\$file" ] && /bin/rm "\$file";
      done) &
    fi
  else
    vim -No "\$@"
  fi
EOF

  chmod a+x /usr/local/bin/vi
}
#+END_SRC

*** Link Utilities
#+BEGIN_SRC sh
function link_utilities () {
  cd /Applications/Utilities \
    && for a in /System/Library/CoreServices/Applications/*; do
      sudo ln -s "../..$a" .
    done \
    && for b in /Applications/Xcode.app/Contents/Applications/*; do
      sudo ln -s "../..$b" .
    done \
    && for c in /Applications/Xcode.app/Contents/Developer/Applications/*; do
      sudo ln -s "../..$c" .
    done
}
#+END_SRC

*** Re-enable ~sudo~ Password Timeout
#+BEGIN_SRC sh
function reenable_sudo_timeout () {
  sudo sed -i -e "/Defaults  timestamp_timeout=-1/d" /etc/sudoers
  sudo sed -i -e "/%admin ALL=(ALL) NOPASSWD:SETENV: \/usr\/sbin\/installer/d" /etc/sudoers
}
#+END_SRC

*** Install All
#+BEGIN_SRC sh
function install_all () {
  install_command_line_tools
  install_homebrew
  create_brew_update_script
  create_brewfile
  install_osx_software
  install_node_software
  install_python_software
  install_ruby_software
  create_vi_script
  link_utilities
  reenable_sudo_timeout
}
#+END_SRC

*** Display Help
#+BEGIN_SRC sh
clear
cat <<-END

Enter any of these commands:
  install_command_line_tools
  install_homebrew
  create_brew_update_script
  create_brewfile
  install_osx_software
  install_node_software
  install_python_software
  install_ruby_software
  create_vi_script
  link_utilities
  reenable_sudo_timeout

Or:
  install_all

END
fi
#+END_SRC


** Step 3: Configure Prefs
:PROPERTIES:
:tangle: step-3.command
:shebang: #!/bin/sh
:END:
*** Open New Terminal
#+BEGIN_SRC sh
if [ -z "$1" ]; then
  osascript > /dev/null <<-END
    tell app "Terminal" to do script "source ${0} 0"
END
  clear

else
#+END_SRC

*** Configure File Mappings
#+BEGIN_SRC sh
function config_file_map () {
  if [ -x "/usr/local/bin/duti" ]; then
    duti -s com.VortexApps.NZBVortex3 dyn.ah62d4rv4ge8068xc all
    duti -s com.apple.DiskImageMounter com.apple.disk-image all
    duti -s com.apple.DiskImageMounter public.disk-image all
    duti -s com.apple.DiskImageMounter public.iso-image all
    duti -s com.apple.QuickTimePlayerX com.apple.coreaudio-format all
    duti -s com.apple.QuickTimePlayerX com.apple.quicktime-movie all
    duti -s com.apple.QuickTimePlayerX com.microsoft.waveform-audio all
    duti -s com.apple.QuickTimePlayerX public.aifc-audio all
    duti -s com.apple.QuickTimePlayerX public.aiff-audio all
    duti -s com.apple.QuickTimePlayerX public.audio all
    duti -s com.apple.QuickTimePlayerX public.mp3 all
    duti -s com.apple.Safari com.compuserve.gif all
    duti -s com.apple.Terminal com.apple.terminal.shell-script all
    duti -s com.apple.iTunes com.apple.iTunes.audible all
    duti -s com.apple.iTunes com.apple.iTunes.ipg all
    duti -s com.apple.iTunes com.apple.iTunes.ipsw all
    duti -s com.apple.iTunes com.apple.iTunes.ite all
    duti -s com.apple.iTunes com.apple.iTunes.itlp all
    duti -s com.apple.iTunes com.apple.iTunes.itms all
    duti -s com.apple.iTunes com.apple.iTunes.podcast all
    duti -s com.apple.iTunes com.apple.m4a-audio all
    duti -s com.apple.iTunes com.apple.mpeg-4-ringtone all
    duti -s com.apple.iTunes com.apple.protected-mpeg-4-audio all
    duti -s com.apple.iTunes com.apple.protected-mpeg-4-video all
    duti -s com.apple.iTunes com.audible.aa-audio all
    duti -s com.apple.iTunes public.mpeg-4-audio all
    duti -s com.apple.installer com.apple.installer-package-archive all
    duti -s com.github.atom com.apple.binary-property-list editor
    duti -s com.github.atom com.apple.crashreport editor
    duti -s com.github.atom com.apple.dt.document.ascii-property-list editor
    duti -s com.github.atom com.apple.dt.document.script-suite-property-list editor
    duti -s com.github.atom com.apple.dt.document.script-terminology-property-list editor
    duti -s com.github.atom com.apple.log editor
    duti -s com.github.atom com.apple.property-list editor
    duti -s com.github.atom com.apple.rez-source editor
    duti -s com.github.atom com.apple.symbol-export editor
    duti -s com.github.atom com.apple.xcode.ada-source editor
    duti -s com.github.atom com.apple.xcode.bash-script editor
    duti -s com.github.atom com.apple.xcode.configsettings editor
    duti -s com.github.atom com.apple.xcode.csh-script editor
    duti -s com.github.atom com.apple.xcode.fortran-source editor
    duti -s com.github.atom com.apple.xcode.ksh-script editor
    duti -s com.github.atom com.apple.xcode.lex-source editor
    duti -s com.github.atom com.apple.xcode.make-script editor
    duti -s com.github.atom com.apple.xcode.mig-source editor
    duti -s com.github.atom com.apple.xcode.pascal-source editor
    duti -s com.github.atom com.apple.xcode.strings-text editor
    duti -s com.github.atom com.apple.xcode.tcsh-script editor
    duti -s com.github.atom com.apple.xcode.yacc-source editor
    duti -s com.github.atom com.apple.xcode.zsh-script editor
    duti -s com.github.atom com.apple.xml-property-list editor
    duti -s com.github.atom com.barebones.bbedit.actionscript-source editor
    duti -s com.github.atom com.barebones.bbedit.erb-source editor
    duti -s com.github.atom com.barebones.bbedit.ini-configuration editor
    duti -s com.github.atom com.barebones.bbedit.javascript-source editor
    duti -s com.github.atom com.barebones.bbedit.json-source editor
    duti -s com.github.atom com.barebones.bbedit.jsp-source editor
    duti -s com.github.atom com.barebones.bbedit.lasso-source editor
    duti -s com.github.atom com.barebones.bbedit.lua-source editor
    duti -s com.github.atom com.barebones.bbedit.setext-source editor
    duti -s com.github.atom com.barebones.bbedit.sql-source editor
    duti -s com.github.atom com.barebones.bbedit.tcl-source editor
    duti -s com.github.atom com.barebones.bbedit.tex-source editor
    duti -s com.github.atom com.barebones.bbedit.textile-source editor
    duti -s com.github.atom com.barebones.bbedit.vbscript-source editor
    duti -s com.github.atom com.barebones.bbedit.vectorscript-source editor
    duti -s com.github.atom com.barebones.bbedit.verilog-hdl-source editor
    duti -s com.github.atom com.barebones.bbedit.vhdl-source editor
    duti -s com.github.atom com.barebones.bbedit.yaml-source editor
    duti -s com.github.atom com.netscape.javascript-source editor
    duti -s com.github.atom com.sun.java-source editor
    duti -s com.github.atom dyn.ah62d4rv4ge80255drq all
    duti -s com.github.atom dyn.ah62d4rv4ge80g55gq3w0n all
    duti -s com.github.atom dyn.ah62d4rv4ge80g55sq2 all
    duti -s com.github.atom dyn.ah62d4rv4ge80y2xzrf0gk3pw all
    duti -s com.github.atom dyn.ah62d4rv4ge81e3dtqq all
    duti -s com.github.atom dyn.ah62d4rv4ge81e7k all
    duti -s com.github.atom dyn.ah62d4rv4ge81g25xsq all
    duti -s com.github.atom dyn.ah62d4rv4ge81g2pxsq all
    duti -s com.github.atom net.daringfireball.markdown editor
    duti -s com.github.atom public.assembly-source editor
    duti -s com.github.atom public.c-header editor
    duti -s com.github.atom public.c-plus-plus-source editor
    duti -s com.github.atom public.c-source editor
    duti -s com.github.atom public.csh-script editor
    duti -s com.github.atom public.json editor
    duti -s com.github.atom public.lex-source editor
    duti -s com.github.atom public.log editor
    duti -s com.github.atom public.mig-source editor
    duti -s com.github.atom public.nasm-assembly-source editor
    duti -s com.github.atom public.objective-c-plus-plus-source editor
    duti -s com.github.atom public.objective-c-source editor
    duti -s com.github.atom public.patch-file editor
    duti -s com.github.atom public.perl-script editor
    duti -s com.github.atom public.php-script editor
    duti -s com.github.atom public.plain-text editor
    duti -s com.github.atom public.precompiled-c-header editor
    duti -s com.github.atom public.precompiled-c-plus-plus-header editor
    duti -s com.github.atom public.python-script editor
    duti -s com.github.atom public.ruby-script editor
    duti -s com.github.atom public.script editor
    duti -s com.github.atom public.shell-script editor
    duti -s com.github.atom public.source-code editor
    duti -s com.github.atom public.text editor
    duti -s com.github.atom public.utf16-external-plain-text editor
    duti -s com.github.atom public.utf16-plain-text editor
    duti -s com.github.atom public.utf8-plain-text editor
    duti -s com.github.atom public.xml editor
    duti -s com.kodlian.Icon-Slate com.apple.icns all
    duti -s com.kodlian.Icon-Slate com.microsoft.ico all
    duti -s com.microsoft.Word public.rtf all
    duti -s com.panayotis.jubler dyn.ah62d4rv4ge81g6xy all
    duti -s com.sketchup.SketchUp.2016 com.sketchup.skp all
    duti -s com.vmware.fusion com.microsoft.windows-executable all
    duti -s cx.c3.theunarchiver com.alcohol-soft.mdf-image all
    duti -s cx.c3.theunarchiver com.allume.stuffit-archive all
    duti -s cx.c3.theunarchiver com.altools.alz-archive all
    duti -s cx.c3.theunarchiver com.amiga.adf-archive all
    duti -s cx.c3.theunarchiver com.amiga.adz-archive all
    duti -s cx.c3.theunarchiver com.apple.applesingle-archive all
    duti -s cx.c3.theunarchiver com.apple.binhex-archive all
    duti -s cx.c3.theunarchiver com.apple.bom-compressed-cpio all
    duti -s cx.c3.theunarchiver com.apple.itunes.ipa all
    duti -s cx.c3.theunarchiver com.apple.macbinary-archive all
    duti -s cx.c3.theunarchiver com.apple.self-extracting-archive all
    duti -s cx.c3.theunarchiver com.apple.xar-archive all
    duti -s cx.c3.theunarchiver com.apple.xip-archive all
    duti -s cx.c3.theunarchiver com.cyclos.cpt-archive all
    duti -s cx.c3.theunarchiver com.microsoft.cab-archive all
    duti -s cx.c3.theunarchiver com.microsoft.msi-installer all
    duti -s cx.c3.theunarchiver com.nero.nrg-image all
    duti -s cx.c3.theunarchiver com.network172.pit-archive all
    duti -s cx.c3.theunarchiver com.nowsoftware.now-archive all
    duti -s cx.c3.theunarchiver com.nscripter.nsa-archive all
    duti -s cx.c3.theunarchiver com.padus.cdi-image all
    duti -s cx.c3.theunarchiver com.pkware.zip-archive all
    duti -s cx.c3.theunarchiver com.rarlab.rar-archive all
    duti -s cx.c3.theunarchiver com.redhat.rpm-archive all
    duti -s cx.c3.theunarchiver com.stuffit.archive.sit all
    duti -s cx.c3.theunarchiver com.stuffit.archive.sitx all
    duti -s cx.c3.theunarchiver com.sun.java-archive all
    duti -s cx.c3.theunarchiver com.symantec.dd-archive all
    duti -s cx.c3.theunarchiver com.winace.ace-archive all
    duti -s cx.c3.theunarchiver com.winzip.zipx-archive all
    duti -s cx.c3.theunarchiver cx.c3.arc-archive all
    duti -s cx.c3.theunarchiver cx.c3.arj-archive all
    duti -s cx.c3.theunarchiver cx.c3.dcs-archive all
    duti -s cx.c3.theunarchiver cx.c3.dms-archive all
    duti -s cx.c3.theunarchiver cx.c3.ha-archive all
    duti -s cx.c3.theunarchiver cx.c3.lbr-archive all
    duti -s cx.c3.theunarchiver cx.c3.lha-archive all
    duti -s cx.c3.theunarchiver cx.c3.lhf-archive all
    duti -s cx.c3.theunarchiver cx.c3.lzx-archive all
    duti -s cx.c3.theunarchiver cx.c3.packdev-archive all
    duti -s cx.c3.theunarchiver cx.c3.pax-archive all
    duti -s cx.c3.theunarchiver cx.c3.pma-archive all
    duti -s cx.c3.theunarchiver cx.c3.pp-archive all
    duti -s cx.c3.theunarchiver cx.c3.xmash-archive all
    duti -s cx.c3.theunarchiver cx.c3.zoo-archive all
    duti -s cx.c3.theunarchiver cx.c3.zoom-archive all
    duti -s cx.c3.theunarchiver org.7-zip.7-zip-archive all
    duti -s cx.c3.theunarchiver org.archive.warc-archive all
    duti -s cx.c3.theunarchiver org.debian.deb-archive all
    duti -s cx.c3.theunarchiver org.gnu.gnu-tar-archive all
    duti -s cx.c3.theunarchiver org.gnu.gnu-zip-archive all
    duti -s cx.c3.theunarchiver org.gnu.gnu-zip-tar-archive all
    duti -s cx.c3.theunarchiver org.tukaani.lzma-archive all
    duti -s cx.c3.theunarchiver org.tukaani.xz-archive all
    duti -s cx.c3.theunarchiver public.bzip2-archive all
    duti -s cx.c3.theunarchiver public.cpio-archive all
    duti -s cx.c3.theunarchiver public.tar-archive all
    duti -s cx.c3.theunarchiver public.tar-bzip2-archive all
    duti -s cx.c3.theunarchiver public.z-archive all
    duti -s cx.c3.theunarchiver public.zip-archive all
    duti -s cx.c3.theunarchiver public.zip-archive.first-part all
    duti -s org.gnu.Emacs dyn.ah62d4rv4ge8086xh all
    duti -s org.inkscape.Inkscape public.svg-image editor
    duti -s org.videolan.vlc com.apple.m4v-video all
    duti -s org.videolan.vlc com.microsoft.windows-media-wmv all
    duti -s org.videolan.vlc org.perian.matroska all
    duti -s org.videolan.vlc org.videolan.ac3 all
    duti -s org.videolan.vlc org.videolan.ogg-audio all
    duti -s org.videolan.vlc public.ac3-audio all
    duti -s org.videolan.vlc public.audiovisual-content all
    duti -s org.videolan.vlc public.avi all
    duti -s org.videolan.vlc public.movie all
    duti -s org.videolan.vlc public.mpeg all
    duti -s org.videolan.vlc public.mpeg-2-video all
    duti -s org.videolan.vlc public.mpeg-4 all

    sudo mkdir -p /var/db/lsd
    sudo chown root:admin /var/db/lsd
    sudo chmod 775 /var/db/lsd

    /System/Library/Frameworks/CoreServices.framework/Versions/Current/Frameworks/LaunchServices.framework/Versions/Current/Support/lsregister -kill -r -domain local -domain system -domain user
  fi
}
#+END_SRC

*** Configure Finder
#+BEGIN_SRC sh
function config_finder () {
### Finder > Preferences… > General

  # Show these items on the desktop: Hard disks: on
  defaults write 'com.apple.finder' 'ShowHardDrivesOnDesktop' -bool false

  # Show these items on the desktop: External disks: on
  defaults write 'com.apple.finder' 'ShowExternalHardDrivesOnDesktop' -bool false

  # Show these items on the desktop: CDs, DVDs, and iPods: on
  defaults write 'com.apple.finder' 'ShowRemovableMediaOnDesktop' -bool false

  # Show these items on the desktop: Connected servers: on
  defaults write 'com.apple.finder' 'ShowMountedServersOnDesktop' -bool true

  # New Finder windows show: ${HOME}
  defaults write 'com.apple.finder' 'NewWindowTarget' -string 'PfHm'
  defaults write 'com.apple.finder' 'NewWindowTargetPath' -string "file://${HOME}/"

### Finder > Preferences… > Advanced

  # Show all filename extensions: on
  defaults write -g 'AppleShowAllExtensions' -bool true

  # Show warning before emptying the Trash: on
  defaults write 'com.apple.finder' 'WarnOnEmptyTrash' -bool false

### View

  # Show Path Bar
  defaults write 'com.apple.finder' 'ShowPathbar' -bool true

  # Show Status Bar
  defaults write 'com.apple.finder' 'ShowStatusBar' -bool true

  # Customize Toolbar…
  defaults write 'com.apple.finder' 'NSToolbar Configuration Browser' '{ "TB Item Identifiers" = ( "com.apple.finder.BACK", "com.apple.finder.PATH", "com.apple.finder.SWCH", "com.apple.finder.ARNG", "NSToolbarFlexibleSpaceItem", "com.apple.finder.SRCH", "com.apple.finder.ACTN" ); "TB Display Mode" = 2; }'

### View > Show View Options: [${HOME}]

  # Show Library Folder: on
  chflags nohidden "${HOME}/Library"

### Window

  # Copy
  defaults write 'com.apple.finder' 'CopyProgressWindowLocation' -string '{2160, 23}'
}
#+END_SRC

*** Configure Safari
#+BEGIN_SRC sh
function config_safari () {
### Safari > Preferences… > General

  # New windows open with: Empty Page
  defaults write 'com.apple.Safari' 'NewWindowBehavior' -int 1

  # New tabs open with: Empty Page
  defaults write 'com.apple.Safari' 'NewTabBehavior' -int 1

  # Homepage: about:blank
  defaults write 'com.apple.Safari' 'HomePage' -string 'about:blank'

### Safari > Preferences… > Tabs

  # Open pages in tabs instead of windows: Always
  defaults write 'com.apple.Safari' 'TabCreationPolicy' -int 2

### Safari > Preferences… > AutoFill

  # Using info from my Contacts card: off
  defaults write 'com.apple.Safari' 'AutoFillFromAddressBook' -bool false

  # Credit cards: off
  defaults write 'com.apple.Safari' 'AutoFillCreditCardData' -bool false

  # Other forms: off
  defaults write 'com.apple.Safari' 'AutoFillMiscellaneousForms' -bool false

### Safari > Preferences… > Search

  # Include Spotlight Suggestions: off
  defaults write 'com.apple.Safari' 'UniversalSearchEnabled' -bool false

  # Show Favorites: off
  defaults write 'com.apple.Safari' 'ShowFavoritesUnderSmartSearchField' -bool false

### Safari > Preferences… > Privacy

  # Website use of location services: Deny without prompting
  defaults write 'com.apple.Safari' 'SafariGeolocationPermissionPolicy' -int 0

  # Ask websites not to track me: on
  defaults write 'com.apple.Safari' 'SendDoNotTrackHTTPHeader' -bool true

### Safari > Preferences… > Notifications

  # Allow websites to ask for permission to send push notifications: off
  defaults write 'com.apple.Safari' 'CanPromptForPushNotifications' -bool false

### Safari > Preferences… > Advanced

  # Smart Search Field: Show full website address: on
  defaults write 'com.apple.Safari' 'ShowFullURLInSmartSearchField' -bool true

  # Default encoding: Unicode (UTF-8)
  defaults write 'com.apple.Safari' 'WebKitDefaultTextEncodingName' -string 'utf-8'
  defaults write 'com.apple.Safari' 'com.apple.Safari.ContentPageGroupIdentifier.WebKit2DefaultTextEncodingName' -string 'utf-8'

  # Show Develop menu in menu bar: on
  defaults write 'com.apple.Safari' 'IncludeDevelopMenu' -bool true
  defaults write 'com.apple.Safari' 'WebKitDeveloperExtrasEnabledPreferenceKey' -bool true
  defaults write 'com.apple.Safari' 'com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled' -bool true

### View

  # Show Favorites Bar
  defaults write 'com.apple.Safari' 'ShowFavoritesBar-v2' -bool true

  # Show Status Bar
  defaults write 'com.apple.Safari' 'ShowStatusBar' -bool true
  defaults write 'com.apple.Safari' 'ShowStatusBarInFullScreen' -bool true
}
#+END_SRC

*** Configure System Preferences
#+BEGIN_SRC sh
function config_system_prefs () {
### General

  # Appearance: Graphite
  defaults write -g 'AppleAquaColorVariant' -int 6

  # Use dark menu bar and Dock: on
  defaults write -g 'AppleInterfaceStyle' -string 'Dark'

  # Highlight color: Other… #CC99CC
  defaults write -g 'AppleHighlightColor' -string '0.600000 0.800000 0.600000'

  # Sidebar icon size: Small
  defaults write -g 'NSTableViewDefaultSizeMode' -int 1

  # Show scroll bars: Always
  defaults write -g 'AppleShowScrollBars' -string 'Always'

  # Click in the scroll bar to: Jump to the next page
  defaults write -g 'AppleScrollerPagingBehavior' -bool false

  # Ask to keep changes when closing documents: on
  defaults write -g 'NSCloseAlwaysConfirmsChanges' -bool true

  # Close windows when quitting an app: on
  defaults write -g 'NSQuitAlwaysKeepsWindows' -bool false

  # Recent items: None
  osascript <<-EOF
    tell application "System Events"
      tell appearance preferences
        set recent documents limit to 0
        set recent applications limit to 0
        set recent servers limit to 0
      end tell
    end tell
EOF

  # Use LCD font smoothing when available: on
  defaults -currentHost delete -g 'AppleFontSmoothing' 2> /dev/null

### Desktop & Screen Saver

  # Desktop: Solid Colors: Custom Color… Solid Black
  mkdir -m go= -p "${HOME}/Library/Desktop Pictures/Solid Colors/"
  base64 -D > "${HOME}/Library/Desktop Pictures/Solid Colors/Solid Black.png" <<-EOF
iVBORw0KGgoAAAANSUhEUgAAAIAAAACAAQAAAADrRVxmAAAAGElEQVR4AWOgMxgFo2AUjIJRMApG
wSgAAAiAAAH3bJXBAAAAAElFTkSuQmCC
EOF
  osascript <<-EOF
    tell application "System Events"
      set a to POSIX file "${HOME}/Library/Desktop Pictures/Solid Colors/Solid Black.png"
      set b to a reference to every desktop
      repeat with c in b
        set picture of c to a
      end repeat
    end tell
EOF

  # Screen Saver: BlankScreen
  if [ -e "/Library/Screen Savers/BlankScreen.saver" ]; then
    defaults -currentHost write 'com.apple.screensaver' 'moduleDict' '{ moduleName = BlankScreen; path = "/Library/Screen Savers/BlankScreen.saver"; type = 0; }'
  fi

  # Screen Saver: Start after: Never
  defaults -currentHost write 'com.apple.screensaver' 'idleTime' -int 0

  # Screen Saver: Hot Corners… Top Left: ⌘ Mission Control
  defaults write 'com.apple.dock' 'wvous-tl-corner' -int 2
  defaults write 'com.apple.dock' 'wvous-tl-modifier' -int 1048576

  # Screen Saver: Hot Corners… Bottom Left: Put Display to Sleep
  defaults write 'com.apple.dock' 'wvous-bl-corner' -int 10
  defaults write 'com.apple.dock' 'wvous-bl-modifier' -int 0

### Dock

  # Size: 32
  defaults write 'com.apple.dock' 'tilesize' -int 32

  # Magnification: off
  defaults write 'com.apple.dock' 'magnification' -bool false
  defaults write 'com.apple.dock' 'largesize' -int 64

  # Position on screen: Left
  defaults write 'com.apple.dock' 'orientation' -string 'right'

  # Minimize windows using: Scale effect
  defaults write 'com.apple.dock' 'mineffect' -string 'scale'

  # Animate opening applications: off
  defaults write 'com.apple.dock' 'launchanim' -bool false

### Security & Privacy

  # General: Require password: on
  defaults write 'com.apple.screensaver' 'askForPassword' -int 1

  # General: Require password: 5 seconds after sleep or screen saver begins
  defaults write 'com.apple.screensaver' 'askForPasswordDelay' -int 5

### Energy Saver

  # Power > Turn display off after: 20 min
  sudo pmset -c displaysleep 20

  # Power > Prevent computer from sleeping automatically when the display is off: enabled
  sudo pmset -c sleep 0

  # Power > Put hard disks to sleep when possible: 60 min
  sudo pmset -c disksleep 60

  # Power > Wake for Ethernet network access: enabled
  sudo pmset -c womp 1

  # Power > Start up automatically after a power failure: enabled
  sudo pmset -c autorestart 1

  # Power > Enable Power Nap: enabled
  sudo pmset -c powernap 1

### Mouse

  # Scroll direction: natural: off
  defaults write -g 'com.apple.swipescrolldirection' -bool false

### Trackpad

  # Point & Click: Tap to click: on
  defaults -currentHost write -g 'com.apple.mouse.tapBehavior' -int 1

### Sound

  # Sound Effects: Select an alert sound: Sosumi
  defaults write 'com.apple.systemsound' 'com.apple.sound.beep.sound' -string '/System/Library/Sounds/Sosumi.aiff'

  # Sound Effects: Play user interface sound effects: off
  defaults write 'com.apple.systemsound' 'com.apple.sound.uiaudio.enabled' -int 0

  # Sound Effects: Play feedback when volume is changed: off
  defaults write -g 'com.apple.sound.beep.feedback' -int 0

### Sharing

  # Computer Name
  sudo systemsetup -setcomputername $(hostname -s | perl -nE 'say ucfirst' | perl -np -e 'chomp')

  # Local Hostname
  sudo systemsetup -setlocalsubnetname $(hostname -s) &> /dev/null

### Users & Groups

  # Current User > Advanced Options… > Login shell: /usr/local/bin/zsh
  sudo sh -c 'printf "%s\n" "/usr/local/bin/zsh" >> /etc/shells'
  sudo chsh -s /usr/local/bin/zsh
  chsh -s /usr/local/bin/zsh
  sudo mkdir -p /private/var/root/Library/Caches/
  sudo touch "/private/var/root/.zshrc"
  touch "${HOME}/.zshrc"

### Dictation & Speech

  # Dictation: Dictation: On
  defaults write 'com.apple.speech.recognition.AppleSpeechRecognition.prefs' 'DictationIMMasterDictationEnabled' -bool true
  defaults write 'com.apple.speech.recognition.AppleSpeechRecognition.prefs' 'DictationIMIntroMessagePresented' -bool true

  # Dictation: Use Enhanced Dictation: on
  if [ -d '/System/Library/Speech/Recognizers/SpeechRecognitionCoreLanguages/en_US.SpeechRecognition' ]; then
    defaults write 'com.apple.speech.recognition.AppleSpeechRecognition.prefs' 'DictationIMPresentedOfflineUpgradeSuggestion' -bool true
    defaults write 'com.apple.speech.recognition.AppleSpeechRecognition.prefs' 'DictationIMSIFolderWasUpdated' -bool true
    defaults write 'com.apple.speech.recognition.AppleSpeechRecognition.prefs' 'DictationIMUseOnlyOfflineDictation' -bool true
  fi

  # Text to Speech: System Voice: Allison
  if [ -d '/System/Library/Speech/Voices/Allison.SpeechVoice' ]; then
    defaults write 'com.apple.speech.voice.prefs' 'VisibleIdentifiers' '{ "com.apple.speech.synthesis.voice.allison.premium" = 1; }'
    defaults write 'com.apple.speech.voice.prefs' 'SelectedVoiceName' -string 'Allison'
    defaults write 'com.apple.speech.voice.prefs' 'SelectedVoiceCreator' -int 1886745202
    defaults write 'com.apple.speech.voice.prefs' 'SelectedVoiceID' -int 184555197
  fi

### Date & Time

  # Clock: Display the time with seconds: on / Show date: on
  defaults write 'com.apple.menuextra.clock' 'DateFormat' -string 'EEE MMM d  h:mm:ss a'

### Accessibility

  # Display: Reduce transparency: on
  defaults write 'com.apple.universalaccess' 'reduceTransparency' -bool true

### Restart defaults server

  killall -u "$USER" cfprefsd
  osascript -e 'tell app "Finder" to quit'
  osascript -e 'tell app "Dock" to quit'
}
#+END_SRC

*** Create /etc/zshrc
#+BEGIN_SRC sh
function create_zshrc () {
  sudo tee /etc/zshrc > /dev/null <<-EOF
alias -g ...="../.."
alias -g ....="../../.."
alias -g .....="../../../.."
alias l="/bin/ls -lG"
alias ll="/bin/ls -alG"
alias lr="/bin/ls -alRG"
alias screen="/usr/bin/screen -U"
autoload -U compaudit
compaudit | xargs -L 1 sudo chown -HR root:wheel {} 2> /dev/null
compaudit | xargs -L 1 sudo chmod -HR go-w {} 2> /dev/null
autoload -U compinit
compinit -d "\${HOME}/Library/Caches/zcompdump"
bindkey "\e[3~" delete-char
bindkey "\e[A" up-line-or-search
bindkey "\e[B" down-line-or-search
export HISTFILE="\${HOME}/Library/Caches/zsh_history"
export HISTSIZE=50000
export SAVEHIST=50000
setopt APPEND_HISTORY
setopt AUTO_CD
setopt EXTENDED_HISTORY
setopt HIST_FIND_NO_DUPS
setopt INC_APPEND_HISTORY
setopt PROMPT_SUBST
setopt SHARE_HISTORY
stty erase \b
# Correctly display UTF-8 with combining characters.
if [ "\$TERM_PROGRAM" = "Apple_Terminal" ]; then
  setopt combiningchars
fi
EOF
}
#+END_SRC

*** Configure All
#+BEGIN_SRC sh
function config_all () {
  config_file_map
  config_finder
  config_safari
  config_system_prefs
  create_zshrc
}
#+END_SRC

*** Display Help
#+BEGIN_SRC sh
clear
cat <<-END

Enter any of these commands:
  config_file_map
  config_finder
  config_safari
  config_system_prefs
  create_zshrc

Or:
  config_all

END
fi
#+END_SRC


** Step 4: Register Apps
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
2jNguwyExZJRWlI3rixpqw==
