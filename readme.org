* macOS Setup
:properties:
:header-args: :tangle setup.command
:header-args:sh: :shebang #!/bin/sh :results silent
:end:
#+startup: content nohideblocks hidestars indent

From clean install to fully configured.

#+begin_example sh :tangle no
  sudo "/Applications/Install macOS Sierra.app/Contents/Resources/createinstallmedia" \
    --applicationpath "/Applications/Install macOS Sierra.app" --nointeraction \
    --volume "/Volumes/Install"
#+end_example

** Initialize

*** New Terminal

#+begin_src sh
  if [ -z "$1" ]; then
    if [[ ! $SHELL == *"zsh" ]]; then
      chsh -s /bin/zsh
    fi

    osascript << EOF
  tell app "Terminal" to do script "source ${0} 0"
  EOF
    clear
  else
#+end_src

*** Constants

#+begin_src sh
  CACHE="/Volumes/Install"
  DOMAIN="ptb2.me"
  MAIL="mail.${DOMAIN}"

  MAS="$(getconf DARWIN_USER_CACHE_DIR)com.apple.appstore"
#+end_src

*** Utility Functions

#+begin_src sh
  function p () {
    printf "\n\033[1m\033[34m%s\033[0m\n\n" "${1}"
  }
#+end_src

*** Disable Repeated Requests for Password

#+begin_src sh
  function init_sudoers () {
    p "Disable repeated requests for password"

    printf "%s\t%s\n" \
      "timeout" "Defaults:%admin timestamp_timeout=-1" \
      "installer" "%admin ALL=(ALL) NOPASSWD:SETENV: /usr/sbin/installer" \
      "tty_tickets" 'Defaults:%admin !tty_tickets' \
    | while IFS=$'\t' read a b; do
      sudo tee "/etc/sudoers.d/${a}" <<< "${b}" > /dev/null
    done
  }
#+end_src

*** Disable System and Disk Sleep

#+begin_src sh
function init_no_sleep () {
  p "Disable system and disk sleep"

  sudo pmset -a sleep 0
  sudo pmset -a disksleep 0
}
#+end_src

*** Set Computer Name and Local Hostname

#+begin_src sh
  function init_hostname () {
    p "Set computer name and local hostname"
#+end_src

*Computer Name*
#+begin_src sh
  sudo systemsetup -setcomputername $(ruby -e "print '$(hostname -s)'.capitalize") &> /dev/null
#+end_src

*Local Hostname*
#+begin_src sh
  sudo systemsetup -setlocalsubnetname $(hostname -s) &> /dev/null
#+end_src

#+begin_src sh
  }
#+end_src

*** Set Permissions on Install Destinations

#+begin_src sh
  function init_perms () {
    p "Set permissions on install destinations"

    for c in \
      "/Library/ColorPickers" \
      "/Library/Fonts" \
      "/Library/Input Methods" \
      "/Library/PreferencePanes" \
      "/Library/QuickLook" \
      "/Library/Screen Savers" \
      "/usr/local" \
    ; do
      sudo chgrp -R admin "${c}"
      sudo chmod -R g+w "${c}"
    done

    if [ ! -d "/usr/local/bin" ]; then
      mkdir -m o-w -p "/usr/local/bin"
    fi
  }
#+end_src

*** Install Developer Tools

#+begin_src sh
  function init_devtools () {
    p "Install developer tools"

    if [ -d "${CACHE}/Updates" ]; then
      sudo chown -R "${USER}" "/Library/Updates"
      rsync -a --delay-updates \
        "${CACHE}/Updates/" "/Library/Updates/"
    fi

    xcode-select --install
  }
#+end_src

*** Install macOS Updates

#+begin_src sh
  function init_updater () {
    p "Install macOS updates"

    if [ -d "${CACHE}/Updates" ]; then
      sudo chown -R "${USER}" "/Library/Updates"
      rsync -a --delay-updates \
        "${CACHE}/Updates/" "/Library/Updates/"
    fi

    sudo softwareupdate --install --all
  }
#+end_src

*** Create Primary Account

#+begin_src sh
  function init_account () {
    p "Create primary user account"

    /bin/echo -n "Real name: " && read NAME
    /bin/echo -n "Account name: " && read U
    /bin/echo -n "Email address: " && read EMAIL

    sudo chgrp admin "/Library/User Pictures"
    sudo chmod g+w "/Library/User Pictures"
    curl "https://www.gravatar.com/avatar/$(md5 -qs $EMAIL).jpg?s=512" --silent \
      --compressed --location --output "/Library/User Pictures/${EMAIL}.jpg" \

    sudo defaults write \
      "/System/Library/User Template/Non_localized/Library/Preferences/.GlobalPreferences.plist" \
      "com.apple.swipescrolldirection" -bool false

    sudo sysadminctl -addUser "${U}" -fullName "${NAME}" -password - \
      -shell "/bin/zsh" -admin -picture "/Library/User Pictures/${EMAIL}.jpg"

    p "Press any key to log out."
    /usr/bin/read -n 1 -s

    osascript -e 'tell application "loginwindow" to «event aevtrlgo»'
  }
#+end_src

*** init

#+begin_src sh
  function init () {
    init_sudoers
    init_no_sleep
    init_hostname
    init_perms
    init_devtools
    init_updater
    init_account
  }
#+end_src

** Install

*** Homebrew and App Store Caches

#+begin_src sh
  function install_caches () {
    if [ -d "${CACHE}/Homebrew" ]; then
      p "Restore Homebrew caches from backup"

      rsync -a --delay-updates \
        "${CACHE}/Homebrew/" "${HOME}/Library/Caches/Homebrew/"
    fi

    if [ -d "${CACHE}/Updates" ]; then
      p "Restore App Store caches from backup"

      sudo chown -R "${USER}" "${MAS}"
      rsync -a --delay-updates \
        "${CACHE}/App Store/" "${MAS}/"
    fi
  }
#+end_src

*** Default Paths

#+begin_src sh
  function install_paths () {
    if ! grep -Fq "/usr/local/sbin" /etc/paths; then
      p "Add '/usr/local/sbin' to default \$PATH"

      sudo sed -i -e "/\/usr\/sbin/{x;s/$/\/usr\/local\/sbin/;G;}" /etc/paths
    fi
  }
#+end_src

*** [[https://brew.sh/][Homebrew]]

#+begin_src sh
  function install_brew () {
    p "Install Homebrew"

    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

    brew analytics off

    brew update
    brew doctor

    brew tap "homebrew/bundle"
#+end_src

*** [[https://github.com/Homebrew/homebrew-bundle][Brewfile]]

#+begin_src sh
  cat > /usr/local/Brewfile << EOF
  cask_args colorpickerdir: "/Library/ColorPickers",
    fontdir: "/Library/Fonts",
    input_methoddir: "/Library/Input Methods",
    prefpanedir: "/Library/PreferencePanes",
    qlplugindir: "/Library/QuickLook",
    screen_saverdir: "/Library/Screen Savers"

  tap "homebrew/bundle"
  tap "caskroom/cask"

  brew "rsync"
  brew "mas"
  mas "autoping", id: 632347870

  cask "docker-toolbox"
  cask "java"
  cask "vmware-fusion"

  cask "xquartz"
  cask "inkscape"
  cask "wireshark"

  brew "aspell",
    args: ["lang=en"]
  brew "chromedriver"
  brew "coreutils"
  tap "homebrew/services"
  brew "dovecot",
    args: [
    "with-pam",
    "with-pigeonhole",
    "with-pigeonhole-unfinished-features"]
  brew "duti"
  brew "fdupes"
  brew "gawk"
  brew "getmail"
  brew "git"
  brew "gnu-sed",
    args: ["with-default-names"]
  brew "gnupg"
  brew "gpac"
  brew "hub"
  brew "ievms"
  brew "imagemagick"
  brew "mercurial"
  brew "mp4v2"
  brew "mtr"
  brew "nmap"
  brew "nvm"
  brew "openssl"
  brew "pinentry-mac"
  brew "pyenv"
  brew "rbenv"
  brew "selenium-server-standalone"
  brew "sqlite"
  brew "stow"
  brew "terminal-notifier"
  brew "trash"
  brew "vim"
  brew "wget"
  brew "youtube-dl"
  brew "zsh"

  cask "adium"
  cask "airfoil"
  cask "alfred"
  cask "arduino"
  cask "atom"
  cask "autodmg"
  cask "bbedit"
  cask "caffeine"
  cask "carbon-copy-cloner"
  cask "charles"
  cask "dash"
  cask "dropbox"
  cask "duet"
  cask "exifrenamer"
  cask "firefox"
  cask "flux"
  cask "github-desktop"
  cask "gitup"
  cask "google-chrome"
  cask "handbrake"
  cask "hermes"
  cask "imageoptim"
  cask "integrity"
  cask "istat-menus"
  cask "jubler"
  cask "little-snitch"
  cask "machg"
  cask "makemkv"
  cask "menubar-countdown"
  cask "meteorologist"
  cask "moom"
  cask "mp4tools"
  cask "munki"
  cask "musicbrainz-picard"
  cask "namechanger"
  cask "nvalt"
  cask "nzbget"
  cask "nzbvortex"
  cask "openemu"
  cask "opera"
  cask "pacifist"
  cask "platypus"
  cask "plex-media-server"
  cask "quitter"
  cask "rescuetime"
  cask "scrivener"
  cask "sitesucker"
  cask "sizeup"
  cask "sketch"
  cask "sketchup"
  cask "skitch"
  cask "skype"
  cask "slack"
  cask "sonarr"
  cask "sonarr-menu"
  cask "sourcetree"
  cask "steermouse"
  cask "subler"
  cask "sublime-text"
  cask "the-unarchiver"
  cask "time-sink"
  cask "torbrowser"
  cask "tower"
  cask "transmit"
  cask "unrarx"
  cask "vimr"
  cask "vlc"
  cask "xld"

  tap "railwaycat/emacsmacport"
  cask "railwaycat/emacsmacport/emacs-mac-spacemacs-icon"

  tap "caskroom/fonts"
  cask "caskroom/fonts/font-inconsolata-lgc"

  tap "caskroom/versions"
  cask "caskroom/versions/safari-technology-preview"

  tap "ptb/custom"
  cask "ptb/custom/adobe-creative-cloud-2014"
  cask "ptb/custom/blankscreen"
  cask "ptb/custom/composer"
  cask "ptb/custom/enhanced-dictation"
  cask "ptb/custom/ipmenulet"
  cask "ptb/custom/pcalc-3"
  cask "ptb/custom/sketchup-pro"
  cask "ptb/custom/synergy"

  mas "1Password", id: 443987910
  mas "Coffitivity", id: 659901392
  mas "Growl", id: 467939042
  mas "HardwareGrowler", id: 475260933
  mas "I Love Stars", id: 402642760
  mas "Icon Slate", id: 439697913
  mas "Justnotes", id: 511230166
  mas "Keynote", id: 409183694
  mas "Numbers", id: 409203825
  mas "Pages", id: 409201541
  mas "WiFi Explorer", id: 494803304

  tap "homebrew/nginx"
  brew "homebrew/nginx/nginx-full",
    args: [
    "with-dav-ext-module",
    "with-fancyindex-module",
    "with-gzip-static",
    "with-http2",
    "with-mp4-h264-module",
    "with-passenger",
    "with-push-stream-module",
    "with-secure-link",
    "with-webdav" ]

  brew "ptb/custom/ffmpeg",
    args: [
    "with-chromaprint",
    "with-fdk-aac",
    "with-fontconfig",
    "with-freetype",
    "with-frei0r",
    "with-game-music-emu",
    "with-lame",
    "with-libass",
    "with-libbluray",
    "with-libbs2b",
    "with-libcaca",
    "with-libgsm",
    "with-libmodplug",
    "with-libsoxr",
    "with-libssh",
    "with-libvidstab",
    "with-libvorbis",
    "with-libvpx",
    "with-opencore-amr",
    "with-openh264",
    "with-openjpeg",
    "with-openssl",
    "with-opus",
    "with-pkg-config",
    "with-rtmpdump",
    "with-rubberband",
    "with-schroedinger",
    "with-sdl2",
    "with-snappy",
    "with-speex",
    "with-tesseract",
    "with-texi2html",
    "with-theora",
    "with-tools",
    "with-two-lame",
    "with-wavpack",
    "with-webp",
    "with-x264",
    "with-x265",
    "with-xvid",
    "with-xz",
    "with-yasm",
    "with-zeromq",
    "with-zimg" ]

  mas "Xcode", id: 497799835
  EOF
  }
#+end_src

*** macOS Software

#+begin_src sh
  function install_macos_sw () {
    p "Install macOS software with Homebrew"

    cd /usr/local/ && brew bundle && cd "${HOME}"

    if [ -d "/Applications/Xcode.app" ]; then
      sudo xcodebuild -license accept
    fi

    brew upgrade
  }
#+end_src

*** Link Utilities

#+begin_src sh
  function install_links () {
    p "Link System and Xcode utilities to Applications"

    brew linkapps 2> /dev/null
    cd /Applications \
      && for a in /System/Library/CoreServices/Applications/*; do
        ln -s "../..$a" . 2> /dev/null
      done && \
    cd "${HOME}"

    if [ -d "/Applications/Xcode.app" ]; then
      cd /Applications \
        && for b in /Applications/Xcode.app/Contents/Applications/*; do
          ln -s "../..$b" . 2> /dev/null
        done \
        && for c in /Applications/Xcode.app/Contents/Developer/Applications/*; do
          ln -s "../..$c" . 2> /dev/null
        done && \
      cd "${HOME}"
    fi
  }
#+end_src

*** Node Software

#+begin_src sh
  function install_node_sw () {
    p "Install Node software"

    printf "%s\n" \
      'export NVM_DIR="/usr/local/node"' \
    >> "${HOME}/.zshenv"
    source "${HOME}/.zshenv"

    printf "%s\n" \
      '[ -s "$(brew --prefix)/opt/nvm/nvm.sh" ] && . "$(brew --prefix)/opt/nvm/nvm.sh"' \
    >> "${HOME}/.zshrc"
    source "${HOME}/.zshrc"

    nvm install node
  }
#+end_src

*** Python Software

[[http://akbaribrahim.com/managing-multiple-python-versions-with-pyenv/][Managing Multiple Python Versions with pyenv]]

#+begin_src sh
  function install_python_sw () {
    p "Install Python software"

    printf "%s\n" \
      'export PYENV_ROOT="/usr/local/python"' \
    >> "${HOME}/.zshenv"
    source "${HOME}/.zshenv"

    printf "%s\n" \
      'if which pyenv > /dev/null; then eval "$(pyenv init -)"; fi' \
    >> "${HOME}/.zshrc"
    source "${HOME}/.zshrc"

    pyenv install --skip-existing 2.7.13
    pyenv install --skip-existing 3.6.2
    pyenv global 2.7.13

    pip install --upgrade "pip" "setuptools"
#+end_src

[[https://github.com/mdhiggins/sickbeard_mp4_automator][Automatic MP4 Conversion/Tagging]]

#+begin_src sh
  pip install --upgrade "babelfish" "guessit<2" "qtfaststart" "requests" "subliminal<2"
  pip install --upgrade "requests-cache" "requests[security]"

  mkdir -m go= -p "${HOME}/.config/NzbDrone"
  git clone "https://github.com/mdhiggins/sickbeard_mp4_automator.git" \
    "${HOME}/.config/NzbDrone/scripts" --depth 1
  cd "${HOME}/.config/NzbDrone/scripts" && pyenv local 2.7.13 && cd "${HOME}"
#+end_src

#+begin_src sh
  pip install --upgrade "crudini"
#+end_src

#+begin_src sh
  }
#+end_src

*** Ruby Software

#+begin_src sh
  function install_ruby_sw () {
    p "Install Ruby software"

    printf "%s\n" \
      'export RBENV_ROOT="/usr/local/ruby"' \
    >> "${HOME}/.zshenv"
    source "${HOME}/.zshenv"

    printf "%s\n" \
      'if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi' \
    >> "${HOME}/.zshrc"
    source "${HOME}/.zshrc"

    rbenv install --skip-existing 2.4.1
    rbenv global 2.4.1

    printf "%s\n" \
    "gem: --no-document" \
    >> "${HOME}/.gemrc"

    gem update --system
    gem update
  }
#+end_src

*** install

#+begin_src sh
  function install () {
    install_caches
    install_paths
    install_brew
    install_macos_sw
    install_links
    install_node_sw
    install_python_sw
    install_ruby_sw

    which prefs
  }
#+end_src

** Preferences

*** Autoping

#+begin_src sh
  function prefs_autoping () {
    defaults write -app autoping Hostname -string "google.com"
    defaults write -app autoping LaunchAtLogin -bool true
    defaults write -app autoping ShowNotifications -bool true
    defaults write -app autoping ShowPacketLossText -bool true
  }
#+end_src

*** Finder

**** General

#+begin_src sh
  function prefs_finder () {
    p "Set Finder preferences"
#+end_src

*Show these items on the desktop: Hard disks:* =on=
#+begin_src sh
  defaults write com.apple.finder ShowHardDrivesOnDesktop -bool false
#+end_src

*Show these items on the desktop: External disks:* =on=
#+begin_src sh
  defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool false
#+end_src

*Show these items on the desktop: CDs, DVDs, and iPods:* =on=
#+begin_src sh
  defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool false
#+end_src

*Show these items on the desktop: Connected servers:* =on=
#+begin_src sh
  defaults write com.apple.finder ShowMountedServersOnDesktop -bool true
#+end_src

*New Finder windows show:* =${HOME}=
#+begin_src sh
  defaults write com.apple.finder NewWindowTarget -string "PfHm"
  defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}/"
#+end_src

**** Advanced

*Show all filename extensions:* =on=
#+begin_src sh
  defaults write -globalDomain AppleShowAllExtensions -bool true
#+end_src

*Show warning before changing an extension:* =off=
#+begin_src sh
  defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false
#+end_src

*Show warning before removing from iCloud Drive:* =on=
#+begin_src sh
  defaults write com.apple.finder FXEnableRemoveFromICloudDriveWarning -bool true
#+end_src

*Show warning before emptying the Trash:* =on=
#+begin_src sh
  defaults write com.apple.finder WarnOnEmptyTrash -bool false
#+end_src

**** View

*Show Path Bar*
#+begin_src sh
  defaults write com.apple.finder ShowPathbar -bool true
#+end_src

*Show Status Bar*
#+begin_src sh
  defaults write com.apple.finder ShowStatusBar -bool true
#+end_src

*Customize Toolbar…*
#+begin_src sh
  defaults write com.apple.finder "NSToolbar Configuration Browser" '{ "TB Item Identifiers" = ( "com.apple.finder.BACK", "com.apple.finder.PATH", "com.apple.finder.SWCH", "com.apple.finder.ARNG", "NSToolbarFlexibleSpaceItem", "com.apple.finder.SRCH", "com.apple.finder.ACTN" ); "TB Display Mode" = 2; }'
#+end_src

**** View Options

*Show Library Folder:* =on=
#+begin_src sh
  chflags nohidden "${HOME}/Library"
#+end_src

**** Window

*Copy*
#+begin_src sh
  defaults write com.apple.finder CopyProgressWindowLocation -string "{2160, 23}"
#+end_src

#+begin_src sh
  }
#+end_src

*** Moom

**** General

#+begin_src sh
  function prefs_moom () {
    p "Set Moom preferences"
#+end_src

*Treat drawers as part of their parent windows:* =on=
#+begin_src sh
  defaults write -app Moom "Allow For Drawers" -bool true
#+end_src

*Separate windows by* =2= *pt*
#+begin_src sh
  defaults write -app Moom "Grid Spacing" -bool true
  defaults write -app Moom "Grid Spacing: Gap" -int 2
  defaults write -app Moom "Grid Spacing: Apply To Edges" -bool false
#+end_src

*Show preferences on launch:* =off=
#+begin_src sh
  defaults write -app Moom "Stealth Mode" -bool true
#+end_src

*Run as* =faceless= *application*
#+begin_src sh
  defaults write -app Moom "Application Mode" -int 2
#+end_src

**** Mouse

=on= *Enable Move & Zoom grid with* =10= *×* =6= *cells*
#+begin_src sh
  defaults write -app Moom "Mouse Controls Grid" -bool true
  defaults write -app Moom "Mouse Controls Grid: Columns" -int 10
  defaults write -app Moom "Mouse Controls Grid: Rows" -int 6
#+end_src

=on= *Enable access to custom controls*
#+begin_src sh
  defaults write -app Moom "Mouse Controls Include Custom Controls" -bool true
#+end_src

=on= *Bring moomed windows to the front automatically*
#+begin_src sh
  defaults write -app Moom "Mouse Controls Auto-Activate Window" -bool true
#+end_src

=off= *Move & Zoom when dragging a window to a display edge or corner*
#+begin_src sh
  defaults write -app Moom "Snap" -bool false
#+end_src

**** Custom

#+begin_src sh
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0, 0.33333}, {0.5, 0.66666}}"; }'
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0, 0}, {0.3, 0.33333}}"; }'
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0.4, 0.33333}, {0.3, 0.66666}}"; }'
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0.3, 0}, {0.4, 0.33333}}"; }'
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0.7, 0.66666}, {0.3, 0.33333}}"; }'
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0.7, 0.33333}, {0.3, 0.33333}}"; }'
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0.7, 0}, {0.3, 0.33333}}"; }'
#+end_src

*Define window sizes using* =10= *×* =6= *cells*
#+begin_src sh
  defaults write -app Moom "Configuration Grid: Columns" -int 10
  defaults write -app Moom "Configuration Grid: Rows" -int 6
#+end_src

#+begin_src sh
  }
#+end_src

*** nvALT

**** General

#+begin_src sh
  function prefs_nvalt () {
    p "Set nvALT preferences"
#+end_src

*List Text Size:* =Small=
#+begin_src sh
  defaults write -app nvALT TableFontPointSize -int 11
#+end_src

*Bring-to-Front Hotkey:* =(None)=
#+begin_src sh
  defaults write -app nvALT AppActivationKeyCode -int -1
  defaults write -app nvALT AppActivationModifiers -int -1
#+end_src

*Auto-select notes by title when searching:* =on=
#+begin_src sh
  defaults write -app nvALT AutoCompleteSearches -bool true
#+end_src

*Confirm note deletion:* =on=
#+begin_src sh
  defaults write -app nvALT ConfirmNoteDeletion -bool true
#+end_src

*Quit when closing window:* =off=
#+begin_src sh
  defaults write -app nvALT QuitWhenClosingMainWindow -bool false
#+end_src

*Show menu bar icon:* =on=
#+begin_src sh
  defaults write -app nvALT StatusBarItem -bool true
#+end_src

*Hide Dock Icon*
#+begin_src sh
  defaults write -app nvALT ShowDockIcon -bool false
#+end_src

**** Editing

*Styled Text: Copy basic styles from other apps:* =off=
#+begin_src sh
  defaults write -app nvALT PastePreservesStyle -bool false
#+end_src

*Spelling: Check as you type:* =off=
#+begin_src sh
  defaults write -app nvALT CheckSpellingInNoteBody -bool false
#+end_src

*Tab Key:* =Indent lines=
#+begin_src sh
  defaults write -app nvALT TabKeyIndents -bool true
#+end_src

*Soft tabs (spaces):* =on=
#+begin_src sh
  defaults write -app nvALT UseSoftTabs -bool true
#+end_src

*Links: Make URLs clickable links:* =on=
#+begin_src sh
  defaults write -app nvALT MakeURLsClickable -bool true
#+end_src

*Links: Suggest titles for note-links:* =off=
#+begin_src sh
  defaults write -app nvALT AutoSuggestLinks -bool false
#+end_src

*URL Import: Convert imported URLs to Markdown:* =off=
#+begin_src sh
  defaults write -app nvALT UseMarkdownImport -bool false
#+end_src

*URL Import: Process with Readability:* =off=
#+begin_src sh
  defaults write -app nvALT UseReadability -bool false
#+end_src

*Direction: Right-To-Left (RTL):* =off=
#+begin_src sh
  defaults write -app nvALT rtl -bool false
#+end_src

*Auto-pair:* =on=
#+begin_src sh
  defaults write -app nvALT UseAutoPairing -bool true
#+end_src

*External editor:* =Emacs.app=
#+begin_src sh
  defaults write -app nvALT DefaultEEIdentifier -string "org.gnu.Emacs"
  defaults write -app nvALT UserEEIdentifiers -array "com.apple.TextEdit" "org.gnu.Emacs"
#+end_src

**** Fonts & Colors

*Body Font:* =InconsolataLGC 13=
#+begin_src sh
  defaults write -app nvALT NoteBodyFont -data 040b73747265616d747970656481e803840140848484064e53466f6e741e8484084e534f626a65637400858401692884055b3430635d060000001e000000fffe49006e0063006f006e0073006f006c006100740061004c004700430000008401660d8401630098019800980086
#+end_src

*Search Highlight:* =on=
#+begin_src sh
  defaults write -app nvALT HighlightSearchTerms -bool true
#+end_src

*Search Highlight:* =#CCFFCC=
#+begin_src sh
  defaults write -app nvALT SearchTermHighlightColor -data 040b73747265616d747970656481e803840140848484074e53436f6c6f72008484084e534f626a65637400858401630184046666666683cdcc4c3f0183cdcc4c3f0186
#+end_src

*Foreground Text:* =#CCCCCC=
#+begin_src sh
  defaults write -app nvALT ForegroundTextColor -data 040b73747265616d747970656481e803840140848484074e53436f6c6f72008484084e534f626a65637400858401630184046666666683cdcc4c3f83cdcc4c3f83cdcc4c3f0186
#+end_src

*Background:* =#1A1A1A=
#+begin_src sh
  defaults write -app nvALT BackgroundTextColor -data 040b73747265616d747970656481e803840140848484074e53436f6c6f72008484084e534f626a65637400858401630184046666666683d1d0d03d83d1d0d03d83d1d0d03d0186
#+end_src

*Always Show Grid Lines in Notes List:* =on=
#+begin_src sh
  defaults write -app nvALT ShowGrid -bool true
#+end_src

*Alternating Row Colors:* =on=
#+begin_src sh
  defaults write -app nvALT AlternatingRows -bool true
#+end_src

*Use nvALT Scrollbars:* =off=
#+begin_src sh
  defaults write -app nvALT UseETScrollbarsOnLion -bool false
#+end_src

*Keep Note Body Width Readable:* =on=
#+begin_src sh
  defaults write -app nvALT KeepsMaxTextWidth -bool true
#+end_src

*Max. Note Body Width:* =650= *pixels*
#+begin_src sh
  defaults write -app nvALT NoteBodyMaxWidth -int 650
#+end_src

**** View

*Switch to Vertical Layout*
#+begin_src sh
  defaults write -app nvALT HorizontalLayout -bool false
#+end_src

*Columns* > =Title= =Tags=
#+begin_src sh
  defaults write -app nvALT NoteAttributesVisible -array "Title" "Tags"
#+end_src

*Sort By* > =Date Modified=
#+begin_src sh
  defaults write -app nvALT TableIsReverseSorted -bool true
  defaults write -app nvALT TableSortColumn -string "Date Modified"
#+end_src

*Show Note Previews in Title*
#+begin_src sh
  defaults write -app nvALT TableColumnsHaveBodyPreview -bool true
#+end_src

#+begin_src sh
  }
#+end_src

*** Safari

**** General

#+begin_src sh
  function prefs_safari () {
    p "Set Safari preferences"
#+end_src

*Safari opens with:* =A new window=
#+begin_src sh
  defaults write -app Safari AlwaysRestoreSessionAtLaunch -bool false
  defaults write -app Safari OpenPrivateWindowWhenNotRestoringSessionAtLaunch -bool false
#+end_src

*New windows open with:* =Empty Page=
#+begin_src sh
  defaults write -app Safari NewWindowBehavior -int 1
#+end_src

*New tabs open with:* =Empty Page=
#+begin_src sh
  defaults write -app Safari NewTabBehavior -int 1
#+end_src

=off= *Open “safe” files after downloading*
#+begin_src sh
  defaults write -app Safari AutoOpenSafeDownloads -bool false
#+end_src

**** Tabs

*Open pages in tabs instead of windows:* =Always=
#+begin_src sh
  defaults write -app Safari TabCreationPolicy -int 2
#+end_src

**** AutoFill

=off= *Using info from my contacts*
#+begin_src sh
  defaults write -app Safari AutoFillFromAddressBook -bool false
#+end_src

=on= *User names and passwords*
#+begin_src sh
  defaults write -app Safari AutoFillPasswords -bool true
#+end_src

=off= *Credit cards*
#+begin_src sh
  defaults write -app Safari AutoFillCreditCardData -bool false
#+end_src

=off= *Other forms*
#+begin_src sh
  defaults write -app Safari AutoFillMiscellaneousForms -bool false
#+end_src

**** Search

=on= *Include search engine suggestions*
#+begin_src sh
  defaults write -app Safari SuppressSearchSuggestions -bool false
#+end_src

*Smart Search Field:* =off= *Include Safari Suggestions*
#+begin_src sh
  defaults write -app Safari UniversalSearchEnabled -bool false
#+end_src

*Smart Search Field:* =on= *Enable Quick Website Search*
#+begin_src sh
  defaults write -app Safari WebsiteSpecificSearchEnabled -bool true
#+end_src

*Smart Search Field:* =on= *Preload Top Hit in the background*
#+begin_src sh
  defaults write -app Safari PreloadTopHit -bool true
#+end_src

=off= *Show Favorites*
#+begin_src sh
  defaults write -app Safari ShowFavoritesUnderSmartSearchField -bool false
#+end_src

**** Privacy

*Website use of location services:* =Deny without prompting=
#+begin_src sh
  defaults write -app Safari SafariGeolocationPermissionPolicy -int 0
#+end_src

*Website tracking:* =on= *Ask websites not to track me*
#+begin_src sh
  defaults write -app Safari SendDoNotTrackHTTPHeader -bool true
#+end_src

*Apple Pay:* =on= *Allow websites to check if Apple Pay is set up*
#+begin_src sh
  defaults write -app Safari "com.apple.Safari.ContentPageGroupIdentifier.WebKit2ApplePayCapabilityDisclosureAllowed" -bool true
#+end_src

**** Notifications

=off= *Allow websites to ask for permission to send push notifications*
#+begin_src sh
  defaults write -app Safari CanPromptForPushNotifications -bool false
#+end_src

**** Advanced

*Smart Search Field:* =on= *Show full website address*
#+begin_src sh
  defaults write -app Safari ShowFullURLInSmartSearchField -bool true
#+end_src

*Default encoding:* =Unicode (UTF-8)=
#+begin_src sh
  defaults write -app Safari WebKitDefaultTextEncodingName -string "utf-8"
  defaults write -app Safari "com.apple.Safari.ContentPageGroupIdentifier.WebKit2DefaultTextEncodingName" -string "utf-8"
#+end_src

=on= *Show Develop menu in menu bar*
#+begin_src sh
  defaults write -app Safari IncludeDevelopMenu -bool true
  defaults write -app Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true
  defaults write -app Safari "com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled" -bool true
#+end_src

**** View

*Show Favorites Bar*
#+begin_src sh
  defaults write -app Safari "ShowFavoritesBar-v2" -bool true
#+end_src

*Show Tab Bar*
#+begin_src sh
  defaults write -app Safari AlwaysShowTabBar -bool true
#+end_src

*Show Status Bar*
#+begin_src sh
  defaults write -app Safari ShowStatusBar -bool true
  defaults write -app Safari ShowStatusBarInFullScreen -bool true
#+end_src

#+begin_src sh
  }
#+end_src

*** System

**** General

#+begin_src sh
  function prefs_general () {
    p "Set System preferences"
#+end_src

*Appearance:* =Graphite= *For Buttons, Menus, and Windows*
#+begin_src sh
  defaults write -globalDomain "AppleAquaColorVariant" -int 6
#+end_src

=on= *Use dark menu bar and Dock*
#+begin_src sh
  defaults write -globalDomain "AppleInterfaceStyle" -string "Dark"
#+end_src

=off= *Automatically hide and show the menu bar*
#+begin_src sh
  defaults write -globalDomain "_HIHideMenuBar" -bool false
#+end_src

*Highlight color:* =#99CC99= =Other…=
#+begin_src sh
  defaults write -globalDomain "AppleHighlightColor" -string "0.600000 0.800000 0.600000"
#+end_src

*Sidebar icon size:* =Small=
#+begin_src sh
  defaults write -globalDomain "NSTableViewDefaultSizeMode" -int 1
#+end_src

*Show scroll bars:* =Always=
#+begin_src sh
  defaults write -globalDomain "AppleShowScrollBars" -string "Always"
#+end_src

*Click in the scroll bar to:* =Jump to the next page=
#+begin_src sh
  defaults write -globalDomain "AppleScrollerPagingBehavior" -bool false
#+end_src

=on= *Ask to keep changes when closing documents*
#+begin_src sh
  defaults write -globalDomain "NSCloseAlwaysConfirmsChanges" -bool true
#+end_src

=on= *Close windows when quitting an app*
#+begin_src sh
  defaults write -globalDomain "NSQuitAlwaysKeepsWindows" -bool false
#+end_src

*Recent items:* =None= *Documents, Apps, and Servers*
#+begin_src sh
  osascript << EOF
    tell application "System Events"
      tell appearance preferences
        set recent documents limit to 0
        set recent applications limit to 0
        set recent servers limit to 0
      end tell
    end tell
  EOF
#+end_src

=on= *Allow Handoff between this Mac and your iCloud devices*
#+begin_src sh
  defaults -currentHost write com.apple.coreservices.useractivityd "ActivityAdvertisingAllowed" -bool true
  defaults -currentHost write com.apple.coreservices.useractivityd "ActivityReceivingAllowed" -bool true
#+end_src

=on= *Use LCD font smoothing when available*
#+begin_src sh
  defaults -currentHost delete -globalDomain "AppleFontSmoothing" 2> /dev/null
#+end_src

#+begin_src sh
  }
#+end_src

**** Desktop & Screen Saver: Screen Saver

#+begin_src sh
  function prefs_screensaver () {
#+end_src

*Start after:* =Never=
#+begin_src sh
  defaults -currentHost write com.apple.screensaver "idleTime" -int 0
#+end_src

*Hot Corners…: Top Left:* =⌘ Mission Control=
#+begin_src sh
  defaults write com.apple.dock "wvous-tl-corner" -int 2
  defaults write com.apple.dock "wvous-tl-modifier" -int 1048576
#+end_src

*Hot Corners…: Bottom Left:* =Put Display to Sleep=
#+begin_src sh
  defaults write com.apple.dock "wvous-bl-corner" -int 10
  defaults write com.apple.dock "wvous-bl-modifier" -int 0
#+end_src

#+begin_src sh
  }
#+end_src

**** Dock

#+begin_src sh
  function prefs_dock () {
#+end_src

*Size:* =32=
#+begin_src sh
  defaults write com.apple.dock "tilesize" -int 32
#+end_src

=off= *Magnification*
#+begin_src sh
  defaults write com.apple.dock "magnification" -bool false
  defaults write com.apple.dock "largesize" -int 64
#+end_src

*Position on screen:* =Right=
#+begin_src sh
  defaults write com.apple.dock "orientation" -string "right"
#+end_src

*Minimize windows using:* =Scale effect=
#+begin_src sh
  defaults write com.apple.dock "mineffect" -string "scale"
#+end_src

*Prefer tabs when opening documents:* =Always=
#+begin_src sh
  defaults write -globalDomain "AppleWindowTabbingMode" -string "always"
#+end_src

=off= *Double-click a window’s title bar to* =None=
#+begin_src sh
  defaults write -globalDomain "AppleActionOnDoubleClick" -string "None"
#+end_src

=on= *Minimize windows into application icon*
#+begin_src sh
  defaults write com.apple.dock "minimize-to-application" -bool true
#+end_src

=off= *Animate opening applications*
#+begin_src sh
  defaults write com.apple.dock "launchanim" -bool false
#+end_src

=on= *Automatically hide and show the Dock*
#+begin_src sh
  defaults write com.apple.dock "autohide" -bool true
#+end_src

=on= *Show indicators for open applications*
#+begin_src sh
  defaults write com.apple.dock "show-process-indicators" -bool true
#+end_src

#+begin_src sh
  }
#+end_src

**** Security & Privacy: General

#+begin_src sh
  function prefs_security () {
#+end_src

=on= *Require password* =5 seconds= *after sleep or screen saver begins*
#+begin_src sh
  defaults write com.apple.screensaver "askForPassword" -int 1
  defaults write com.apple.screensaver "askForPasswordDelay" -int 5
#+end_src

#+begin_src sh
  }
#+end_src

**** Energy Saver: Power

#+begin_src sh
  function prefs_power () {
#+end_src

*Turn display off after:* =20 min=
#+begin_src sh
  sudo pmset -c displaysleep 20
#+end_src

=on= *Prevent computer from sleeping automatically when the display is off*
#+begin_src sh
  sudo pmset -c sleep 0
#+end_src

=60 min= *Put hard disks to sleep when possible*
#+begin_src sh
  sudo pmset -c disksleep 60
#+end_src

=on= *Wake for network access*
#+begin_src sh
  sudo pmset -c womp 1
#+end_src

=on= *Start up automatically after a power failure*
#+begin_src sh
  sudo pmset -c autorestart 1
#+end_src

=on= *Enable Power Nap*
#+begin_src sh
  sudo pmset -c powernap 1
#+end_src

#+begin_src sh
  }
#+end_src

**** Energy Saver: UPS

#+begin_src sh
  function prefs_ups () {
#+end_src

*Turn display off after:* =2 min=
#+begin_src sh
  sudo pmset -u displaysleep 2
#+end_src

=on= *Slightly dim the display when using this power source*
#+begin_src sh
  sudo pmset -u lessbright 1
#+end_src

=on= *Shut down the computer after using the UPS battery for:* =5 min=
#+begin_src sh
  sudo pmset -u haltafter 5
#+end_src

=off= *Shut down the computer when the time remaining on the UPS battery is:*
#+begin_src sh
  sudo pmset -u haltremain -1
#+end_src

=off= *Shut down the computer when the UPS battery level is below:*
#+begin_src sh
  sudo pmset -u haltlevel -1
#+end_src

#+begin_src sh
  }
#+end_src

**** Keyboard: Text

#+begin_src sh
  function prefs_text () {
#+end_src

=off= *Capitalize words automatically*
#+begin_src sh
  defaults write -globalDomain NSAutomaticCapitalizationEnabled -bool false
#+end_src

=off= *Add period with double-space*
#+begin_src sh
  defaults write -globalDomain NSAutomaticPeriodSubstitutionEnabled -bool false
#+end_src

=off= *Use smart quotes and dashes*
#+begin_src sh
  defaults write -globalDomain NSAutomaticQuoteSubstitutionEnabled -bool false
#+end_src

#+begin_src sh
  }
#+end_src

**** Mouse

#+begin_src sh
  function prefs_mouse () {
#+end_src

=off= *Scroll direction: Natural*
#+begin_src sh
  defaults write -globalDomain com.apple.swipescrolldirection -bool false
#+end_src

#+begin_src sh
  }
#+end_src

**** Trackpad: Point & Click

#+begin_src sh
  function prefs_trackpad () {
#+end_src

=on= *Tap to click*
#+begin_src sh
  defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
  defaults -currentHost write -globalDomain com.apple.mouse.tapBehavior -int 1
#+end_src

#+begin_src sh
  }
#+end_src

**** Sound: Sound Effects

#+begin_src sh
  function prefs_sound () {
#+end_src

*Select an alert sound:* =Sosumi=
#+begin_src sh
  defaults write -globalDomain "com.apple.sound.beep.sound" -string "/System/Library/Sounds/Sosumi.aiff"
#+end_src

=off= *Play user interface sound effects*
#+begin_src sh
  defaults write -globalDomain "com.apple.sound.uiaudio.enabled" -int 0
#+end_src

=off= *Play feedback when volume is changed*
#+begin_src sh
  defaults write -globalDomain "com.apple.sound.beep.feedback" -int 0
#+end_src

#+begin_src sh
  }
#+end_src

**** Date & Time: Clock

=on= *Show date and time in menu bar*

=on= *Time options: Display the time with seconds*

=on= *Time options: Show AM/PM*

=on= *Date options: Show the day of the week*

=on= *Date options: Show date*
#+begin_src sh
  function prefs_clock () {
    defaults write com.apple.menuextra.clock "DateFormat" -string "EEE MMM d  h:mm:ss a"
  }
#+end_src

**** Accessibility: Display

=on= *Reduce transparency*
#+begin_src sh
  function prefs_accessibility () {
    defaults write com.apple.universalaccess "reduceTransparency" -bool true
  }
#+end_src

#+begin_src sh
  function prefs_restart () {
    killall -u "$(whoami)" cfprefsd
    osascript -e 'tell app "Finder" to quit'
    killall Finder
  }
#+end_src

*** VLC

#+begin_src sh
  function prefs_vlc () {
    p "Set VLC preferences"

    if [ ! -d "${HOME}/Library/Preferences/org.videolan.vlc" ]; then
      mkdir -m o-w -p "${HOME}/Library/Preferences/org.videolan.vlc"
    fi

    cat > "${HOME}/Library/Preferences/org.videolan.vlc/vlcrc" << EOF
  avcodec-hw=vda
  macosx-appleremote=0
  macosx-continue-playback=1
  macosx-nativefullscreenmode=1
  macosx-pause-minimized=1
  macosx-video-autoresize=0
  spdif=1
  sub-language=English
  subsdec-encoding=UTF-8
  volume-save=0
  EOF
  }
#+end_src

*** prefs

#+begin_src sh
  function prefs () {
    prefs_autoping
    prefs_finder
    prefs_moom
    prefs_nvalt
    prefs_safari

    prefs_general
    prefs_screensaver
    prefs_dock
    prefs_security
    prefs_power
    prefs_ups
    prefs_text
    prefs_mouse
    prefs_trackpad
    prefs_sound
    prefs_clock
    prefs_accessibility

    prefs_restart

    prefs_vlc

    which config
  }
#+end_src

** Configuration

*** App Store

#+begin_src sh
  function config_mas () {
    p "Save App Store packages"

    cat > "/usr/local/bin/mas_save.sh" << EOF
  #!/bin/sh
  DIR="\${HOME}/Downloads/App Store"
  MAS="\$(getconf DARWIN_USER_CACHE_DIR)com.apple.appstore"

  mkdir -m go= -p "\${DIR}"
  for a in \$(find "\${MAS}" -iname "[0-9]*" -type d); do
    b="\${DIR}/\$(basename \$a)"
    mkdir -m go= -p "\${b}"
    end=\$(( \$(date +%s) + 5 ))
    while [ \$(date +%s) -lt \$end ]; do
      for c in \${a}/*; do
        d="\$(basename \$c)"
        if [ ! -e "\${b}/\${d}" ]; then
          ln "\${a}/\${d}" "\${b}/\${d}"
        fi
      done
    done
  done
  EOF

    chmod a+x "/usr/local/bin/mas_save.sh"
    rehash
#+end_src

#+begin_src sh
  mkdir -m go= -p "${HOME}/Library/LaunchAgents"
  launchctl unload "${HOME}/Library/LaunchAgents/com.github.ptb.mas_save.plist" 2> /dev/null
  printf "%s\n" \
    "add ':KeepAlive' bool false" \
    "add ':Label' string 'com.github.ptb.mas_save'" \
    "add ':Program' string '/usr/local/bin/mas_save.sh'" \
    "add ':RunAtLoad' bool true" \
    "add ':WatchPaths' array" \
    "add ':WatchPaths:0' string '$(getconf DARWIN_USER_CACHE_DIR)com.apple.appstore'" \
  | while IFS=$'\t' read a; do
    /usr/libexec/PlistBuddy "${HOME}/Library/LaunchAgents/com.github.ptb.mas_save.plist" -c "${a}" &> /dev/null
  done
  launchctl load "${HOME}/Library/LaunchAgents/com.github.ptb.mas_save.plist"
#+end_src

#+begin_src sh
  }
#+end_src

*** Atom

Inspiration: [[https://evanhahn.com/atom-apm-install-list/][@EvanHahn]]

#+begin_src sh
  function config_atom () {
    p "Install Atom packages"

    for a in \
      "MagicPython" \
      "atom-beautify" \
      "atom-css-comb" \
      "atom-jade" \
      "atom-wallaby" \
      "autoclose-html" \
      "autocomplete-python" \
      "busy-signal" \
      "double-tag" \
      "editorconfig" \
      "ex-mode" \
      "file-icons" \
      "git-plus" \
      "git-time-machine" \
      "highlight-selected" \
      "intentions" \
      "language-docker" \
      "language-jade" \
      "language-javascript-jsx" \
      "language-lisp" \
      "language-slim" \
      "linter" \
      "linter-eslint" \
      "linter-rubocop" \
      "linter-ui-default" \
      "python-yapf" \
      "react" \
      "riot" \
      "sort-lines" \
      "term3" \
      "tomorrow-night-eighties-syntax" \
      "tree-view-open-files" \
      "vim-mode" \
      "vim-mode-zz" \
      "vim-surround" \
    ; do
      apm install "${a}"
    done

  cat > "${HOME}/.atom/packages/tomorrow-night-eighties-syntax/styles/colors.less" \
    << EOF
  @background: #191919;
  @current-line: #333333;
  @selection: #4c4c4c;
  @foreground: #cccccc;
  @comment: #999999;
  @red: #f27f7f;
  @orange: #ff994c;
  @yellow: #ffcc66;
  @green: #99cc99;
  @aqua: #66cccc;
  @blue: #6699cc;
  @purple: #cc99cc;
  EOF
  }
#+end_src

*** BBEdit

#+begin_src sh
  function config_bbedit () {
    if [ -d "/Applications/BBEdit.app" ]; then
      p "Install BBEdit tools"

      cd /usr/local/bin && \
      ln ../../../Applications/BBEdit.app/Contents/Helpers/bbdiff bbdiff && \
      ln ../../../Applications/BBEdit.app/Contents/Helpers/bbedit_tool bbedit && \
      ln ../../../Applications/BBEdit.app/Contents/Helpers/bbfind bbfind && \
      ln ../../../Applications/BBEdit.app/Contents/Helpers/bbresults bbresults && \
      cd "${HOME}"
    fi
  }
#+end_src

*** Desktop

#+begin_src sh
  function config_desktop () {
    p "Set Desktop preferences"
#+end_src

*Desktop: Solid Colors: Custom Color…* =Solid Black=
#+begin_src sh
  sudo rm "/Library/Caches/com.apple.desktop.admin.png"
  base64 -D > "/Library/Caches/com.apple.desktop.admin.png" <<< "iVBORw0KGgoAAAANSUhEUgAAAIAAAACAAQAAAADrRVxmAAAAGElEQVR4AWOgMxgFo2AUjIJRMApGwSgAAAiAAAH3bJXBAAAAAElFTkSuQmCC"

  osascript << EOF
    tell application "System Events"
      set a to POSIX file "/Library/Caches/com.apple.desktop.admin.png"
      set b to a reference to every desktop
      repeat with c in b
        set picture of c to a
      end repeat
    end tell
  EOF
#+end_src

*Screen Saver:* =BlankScreen=
#+begin_src sh
  if [ -e "/Library/Screen Savers/BlankScreen.saver" ]; then
    p "Set Screen Saver preferences"

    defaults -currentHost write com.apple.screensaver moduleDict \
      '{ moduleName = "BlankScreen"; path = "/Library/Screen Savers/BlankScreen.saver"; type = 0; }'
  fi
#+end_src

#+begin_src sh
  }
#+end_src

*** Dock

#+begin_src sh
  function config_dock () {
    p "Set Dock preferences"

    defaults write com.apple.dock "autohide-delay" -float 0
    defaults write com.apple.dock "autohide-time-modifier" -float 0.5

    defaults delete com.apple.dock "persistent-apps"

    for app in \
      "nvALT" \
      "Mail" \
      "Safari" \
      "Messages" \
      "Emacs" \
      "Atom" \
      "Utilities/Terminal" \
      "System Preferences" \
      "PCalc" \
      "iTunes" \
      "VLC" \
    ; do
      defaults write com.apple.dock "persistent-apps" -array-add \
        "<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/${app}.app/</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>"
    done

    defaults delete com.apple.dock "persistent-others"

    osascript -e 'tell app "Dock" to quit'
  }
#+end_src

*** Emacs

**** Download [[http://spacemacs.org/][Spacemacs]]

#+begin_src sh
function config_emacs () {
  p "Configure Emacs"

  mkdir -m go= -p "${HOME}/.emacs.d" \
    && curl --compressed --location --silent \
      "https://github.com/syl20bnr/spacemacs/archive/master.tar.gz" \
    | tar -C "${HOME}/.emacs.d" --strip-components 1 -xf -
  mkdir -m go= -p "${HOME}/.emacs.d/private/ptb"
#+end_src

**** Create =~/.spacemacs=

#+begin_src sh
  cat > "${HOME}/.spacemacs" << EOF
  (defun dotspacemacs/layers ()
    (setq-default
      dotspacemacs-configuration-layers '(
        auto-completion
        (colors :variables
          colors-colorize-identifiers 'variables)
        dash
        deft
        docker
        emacs-lisp
        evil-cleverparens
        git
        github
        helm
        html
        ibuffer
        imenu-list
        javascript
        markdown
        nginx
        (org :variables
          org-enable-github-support t)
        (osx :variables
          osx-use-option-as-meta nil)
        ptb
        react
        ruby
        ruby-on-rails
        search-engine
        semantic
        shell-scripts
        (spell-checking :variables
          spell-checking-enable-by-default nil)
        syntax-checking
        (version-control :variables
          version-control-diff-side 'left)
        vim-empty-lines
      )
      dotspacemacs-excluded-packages '(org-bullets)
    )
  )

  (defun dotspacemacs/init ()
    (setq-default
      dotspacemacs-startup-banner nil
      dotspacemacs-startup-lists nil
      dotspacemacs-scratch-mode 'org-mode
      dotspacemacs-themes '(sanityinc-tomorrow-eighties)
      dotspacemacs-default-font '(
        "Inconsolata LGC"
        :size 13
        :weight normal
        :width normal
        :powerline-scale 1.1)
      dotspacemacs-loading-progress-bar nil
      dotspacemacs-active-transparency 100
      dotspacemacs-inactive-transparency 100
      dotspacemacs-line-numbers t
      dotspacemacs-whitespace-cleanup 'all
    )
  )

  (defun dotspacemacs/user-init ())
  (defun dotspacemacs/user-config ())
  EOF
#+end_src

**** Create =~/.emacs.d/private/ptb/config.el=

#+begin_src sh
  cat > "${HOME}/.emacs.d/private/ptb/config.el" << EOF
  (setq
    default-frame-alist '(
      (top . 22)
      (left . 1790)
      (height . 40)
      (width . 91)
      (vertical-scroll-bars . right))
    initial-frame-alist (copy-alist default-frame-alist)

    deft-directory "~/Dropbox/Notes"
    focus-follows-mouse t
    mouse-wheel-follow-mouse t
    mouse-wheel-scroll-amount '(1 ((shift) . 1))
    purpose-display-at-right 20
    recentf-max-saved-items 5
    scroll-step 1
    system-uses-terminfo nil

    ibuffer-formats '(
      (mark modified read-only " "
      (name 18 18 :left :elide)))

    ibuffer-shrink-to-minimum-size t
    ibuffer-always-show-last-buffer nil
    ibuffer-sorting-mode 'recency
    ibuffer-use-header-line nil
    x-select-enable-clipboard nil)

  (global-linum-mode t)
  (recentf-mode t)
  (x-focus-frame nil)
  (with-eval-after-load 'org
    (org-babel-do-load-languages
      'org-babel-load-languages '(
        (ruby . t)
        (shell . t)
      )
    )
  )
  EOF
#+end_src

**** Create =~/.emacs.d/private/ptb/funcs.el=

#+begin_src sh
  cat > "${HOME}/.emacs.d/private/ptb/funcs.el" << EOF
  (defun is-useless-buffer (buffer)
    (let ((name (buffer-name buffer)))
      (and (= ?* (aref name 0))
          (string-match "^\\**" name))))

  (defun kill-useless-buffers ()
    (interactive)
    (loop for buffer being the buffers
          do (and (is-useless-buffer buffer) (kill-buffer buffer))))

  (defun org-babel-tangle-hook ()
    (add-hook 'after-save-hook 'org-babel-tangle))

  (add-hook 'org-mode-hook #'org-babel-tangle-hook)

  (defun ptb/new-untitled-buffer ()
    "Create a new untitled buffer in the current frame."
    (interactive)
    (let
      ((buffer "Untitled-") (count 1))
      (while
        (get-buffer (concat buffer (number-to-string count)))
        (setq count (1+ count)))
      (switch-to-buffer
      (concat buffer (number-to-string count))))
    (org-mode))

  (defun ptb/previous-buffer ()
    (interactive)
    (kill-useless-buffers)
    (previous-buffer))

  (defun ptb/next-buffer ()
    (interactive)
    (kill-useless-buffers)
    (next-buffer))

  (defun ptb/kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer))
    (kill-useless-buffers))
  EOF
#+end_src

**** Create =~/.emacs.d/private/ptb/keybindings.el=

#+begin_src sh
  cat > "${HOME}/.emacs.d/private/ptb/keybindings.el" << EOF
  (define-key evil-normal-state-map (kbd "s-c") 'clipboard-kill-ring-save)
  (define-key evil-insert-state-map (kbd "s-c") 'clipboard-kill-ring-save)
  (define-key evil-visual-state-map (kbd "s-c") 'clipboard-kill-ring-save)

  (define-key evil-ex-completion-map (kbd "s-v") 'clipboard-yank)
  (define-key evil-ex-search-keymap (kbd "s-v") 'clipboard-yank)
  (define-key evil-insert-state-map (kbd "s-v") 'clipboard-yank)

  (define-key evil-normal-state-map (kbd "s-x") 'clipboard-kill-region)
  (define-key evil-insert-state-map (kbd "s-x") 'clipboard-kill-region)
  (define-key evil-visual-state-map (kbd "s-x") 'clipboard-kill-region)

  (define-key evil-normal-state-map (kbd "<S-up>") 'evil-previous-visual-line)
  (define-key evil-insert-state-map (kbd "<S-up>") 'evil-previous-visual-line)
  (define-key evil-visual-state-map (kbd "<S-up>") 'evil-previous-visual-line)

  (define-key evil-normal-state-map (kbd "<S-down>") 'evil-next-visual-line)
  (define-key evil-insert-state-map (kbd "<S-down>") 'evil-next-visual-line)
  (define-key evil-visual-state-map (kbd "<S-down>") 'evil-next-visual-line)

  (global-set-key (kbd "C-l") 'evil-search-highlight-persist-remove-all)

  (global-set-key (kbd "s-t") 'make-frame)
  (global-set-key (kbd "s-n") 'ptb/new-untitled-buffer)
  (global-set-key (kbd "s-w") 'ptb/kill-this-buffer)
  (global-set-key (kbd "s-{") 'ptb/previous-buffer)
  (global-set-key (kbd "s-}") 'ptb/next-buffer)
  EOF
#+end_src

**** Create =~/.emacs.d/private/ptb/packages.el=

#+begin_src sh
  cat > "${HOME}/.emacs.d/private/ptb/packages.el" << EOF
  (setq ptb-packages '(auto-indent-mode inline-crypt))

  (defun ptb/init-auto-indent-mode ()
    (use-package auto-indent-mode
      :init
      (setq
        auto-indent-delete-backward-char t
        auto-indent-fix-org-auto-fill t
        auto-indent-fix-org-move-beginning-of-line t
        auto-indent-fix-org-return t
        auto-indent-fix-org-yank t
        auto-indent-start-org-indent t
      )
    )
  )

  (defun ptb/init-inline-crypt ()
    (use-package inline-crypt :init))
  EOF
#+end_src

#+begin_src sh
  }
#+end_src

**** Create =/usr/local/bin/vi=

#+begin_src sh
  function config_vi_script () {
    p "Create vi script"

    cat > /usr/local/bin/vi <<-EOF
  #!/bin/sh

  if [ -e "/Applications/Emacs.app" ]; then
    t=()

    if [ \${#@} -ne 0 ]; then
      while IFS= read -r file; do
        [ ! -f "\$file" ] && t+=("\$file") && /usr/bin/touch "\$file"
        file=\$(echo \$(cd \$(dirname "\$file") && pwd -P)/\$(basename "\$file"))
        \$(/usr/bin/osascript <<-END
          if application "Emacs.app" is running then
            tell application id (id of application "Emacs.app") to open POSIX file "\$file"
          else
            tell application ((path to applications folder as text) & "Emacs.app")
              activate
              open POSIX file "\$file"
            end tell
          end if
  END
          ) &  # Note: END on the previous line may be indented with tabs but not spaces
        done <<<"\$(printf '%s\n' "\$@")"
      fi

      if [ ! -z "\$t" ]; then
        \$(/bin/sleep 10; for file in "\${t[@]}"; do
          [ ! -s "\$file" ] && /bin/rm "\$file";
        done) &
      fi
    else
      vim -No "\$@"
    fi
  EOF

    chmod a+x /usr/local/bin/vi
    rehash
  }
#+end_src

*** Terminal
:properties:
:header-args+: :padline no
:end:

Inspiration: [[https://github.com/ChrisKempson/Tomorrow-Theme#tomorrow-night-eighties][@chriskempson]], [[https://apple.stackexchange.com/a/98843][@user495470]], & [[https://github.com/reitermarkus/dotfiles/blob/master/include/settings/terminal.sh][@reitermarkus]]

**** General

#+begin_src sh
  function config_terminal () {
    p "Set Terminal preferences"
#+end_src

*On startup, open: New window with profile:* =ptb=
#+begin_src sh
  defaults write -app Terminal "Startup Window Settings" -string "$(whoami)"
#+end_src

**** Profiles

#+begin_src sh
  defaults write -app Terminal "Default Window Settings" -string "$(whoami)"

  /usr/libexec/PlistBuddy -c "delete ':Window Settings:$(whoami)'" \
    "${HOME}/Library/Preferences/com.apple.Terminal.plist" &> /dev/null

  for terminal_prop in \
#+end_src

#+begin_src sh
  " dict" \
  ":name string '$(whoami)'" \
  ":type string 'Window Settings'" \
  ":ProfileCurrentVersion real 2.05" \
#+end_src

**** Text

#+begin_src sh
  ':BackgroundColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC4xIDAuMSAwLjE=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ":BackgroundBlur real 0" \
  ":BackgroundSettingsForInactiveWindows bool false" \
  ":BackgroundAlphaInactive real 1" \
  ":BackgroundBlurInactive real 0" \
  ':Font data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>3</integer></dict><key>NSName</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSSize</key><real>13</real><key>NSfFlags</key><integer>16</integer></dict><string>InconsolataLGC</string><dict><key>$classes</key><array><string>NSFont</string><string>NSObject</string></array><key>$classname</key><string>NSFont</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ":FontWidthSpacing real 1" \
  ":FontHeightSpacing real 1" \
  ":FontAntialias bool true" \
  ":UseBoldFonts bool true" \
  ":BlinkText bool false" \
  ":DisableANSIColor bool false" \
  ":UseBrightBold bool false" \
  ':TextColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDAuOCAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':TextBoldColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDAuOCAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':SelectionColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC4zIDAuMyAwLjM=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBlackColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC4zIDAuMyAwLjM=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIRedColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC45NSAwLjUgMC41</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIGreenColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC42IDAuOCAwLjY=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIYellowColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MSAwLjggMC40</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBlueColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC40IDAuNiAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIMagentaColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDAuNiAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSICyanColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC40IDAuOCAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIWhiteColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDAuOCAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightBlackColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC41IDAuNSAwLjU=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightRedColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MSAwLjcgMC43</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightGreenColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDEgMC44</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightYellowColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MSAxIDAuNg==</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightBlueColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC42IDAuOCAx</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightMagentaColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MSAwLjggMQ==</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightCyanColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC42IDEgMQ==</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightWhiteColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC45IDAuOSAwLjk=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ":CursorType integer 0" \
  ":CursorBlink bool false" \
  ':CursorColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC43IDAuNyAwLjc=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
#+end_src

**** Window

#+begin_src sh
  ":ShowRepresentedURLInTitle bool true" \
  ":ShowRepresentedURLPathInTitle bool true" \
  ":ShowActiveProcessInTitle bool true" \
  ":ShowActiveProcessArgumentsInTitle bool false" \
  ":ShowShellCommandInTitle bool false" \
  ":ShowWindowSettingsNameInTitle bool false" \
  ":ShowTTYNameInTitle bool false" \
  ":ShowDimensionsInTitle bool false" \
  ":ShowCommandKeyInTitle bool false" \
  ":columnCount integer 124" \
  ":rowCount integer 20" \
  ":ShouldLimitScrollback integer 0" \
  ":ScrollbackLines integer 0" \
  ":ShouldRestoreContent bool false" \
#+end_src

**** Tab

#+begin_src sh
  ":ShowRepresentedURLInTabTitle bool false" \
  ":ShowRepresentedURLPathInTabTitle bool false" \
  ":ShowActiveProcessInTabTitle bool true" \
  ":ShowActiveProcessArgumentsInTabTitle bool false" \
  ":ShowTTYNameInTabTitle bool false" \
  ":ShowComponentsWhenTabHasCustomTitle bool true" \
  ":ShowActivityIndicatorInTab bool true" \
#+end_src

**** Shell

#+begin_src sh
  ":shellExitAction integer 1" \
  ":warnOnShellCloseAction integer 1" \
#+end_src

**** Keyboard

#+begin_src sh
  ":useOptionAsMetaKey bool false" \
  ":ScrollAlternateScreen bool true" \
#+end_src

**** Advanced

#+begin_src sh
  ":TerminalType string 'xterm-256color'" \
  ":deleteSendsBackspace bool false" \
  ":EscapeNonASCIICharacters bool true" \
  ":ConvertNewlinesOnPaste bool true" \
  ":StrictVTKeypad bool true" \
  ":scrollOnInput bool true" \
  ":Bell bool false" \
  ":VisualBell bool false" \
  ":VisualBellOnlyWhenMuted bool false" \
  ":BellBadge bool false" \
  ":BellBounce bool false" \
  ":BellBounceCritical bool false" \
  ":CharacterEncoding integer 4" \
  ":SetLanguageEnvironmentVariables bool true" \
  ":EastAsianAmbiguousWide bool false" \
#+end_src

#+begin_src sh
  ; do
    /usr/libexec/PlistBuddy "$HOME/Library/Preferences/com.apple.Terminal.plist" \
      -c "add ':Window Settings:$(whoami)'${terminal_prop}"
  done
#+end_src

#+begin_src sh
  }
#+end_src

*** dovecot

#+begin_example sh :tangle no
  doveadm sync -u $(whoami) maildir:~/.email:INBOX=~/.email/Inbox:LAYOUT=fs
#+end_example

#+begin_src sh
  function config_dovecot () {
    p "Enable email authentication with macOS accounts"

    sudo tee "/etc/pam.d/dovecot" > /dev/null << EOF
  auth		required	pam_opendirectory.so try_first_pass
  account		required	pam_nologin.so
  account		required	pam_opendirectory.so
  password	required	pam_opendirectory.so
  EOF

    p "Configure Dovecot email server"

    cat > "/usr/local/etc/dovecot/dovecot.conf" << EOF
  auth_mechanisms = cram-md5
  default_internal_user = _dovecot
  default_login_user = _dovenull
  log_path = /dev/stderr
  mail_location = maildir:~/.mail:INBOX=~/.mail/Inbox:LAYOUT=fs
  mail_plugins = zlib
  maildir_copy_with_hardlinks = no
  namespace {
    inbox = yes
    mailbox Drafts {
      auto = subscribe
      special_use = \Drafts
    }
    mailbox Junk {
      auto = subscribe
      special_use = \Junk
    }
    mailbox Sent {
      auto = subscribe
      special_use = \Sent
    }
    mailbox "Sent Messages" {
      special_use = \Sent
    }
    mailbox Trash {
      auto = subscribe
      special_use = \Trash
    }
    separator = .
    type = private
  }
  passdb {
    args = scheme=cram-md5 /usr/local/etc/dovecot/cram-md5.pwd
    driver = passwd-file

    # driver = pam

    # args = nopassword=y
    # driver = static
  }
  plugin {
    sieve = file:/Users/%u/.sieve
    zlib_save = bz2
    zlib_save_level = 9
  }
  postmaster_address = ${USER}@${DOMAIN}
  protocols = imap
  service imap-login {
    inet_listener imap {
      port = 0
    }
  }
  ssl = required
  ssl_cert = <${SSL}/certs/${MAIL}/${MAIL}.crt
  ssl_cipher_list = AES128+EECDH:AES128+EDH
  ssl_dh_parameters_length = 4096
  ssl_key = <${SSL}/certs/${MAIL}/${MAIL}.key
  ssl_prefer_server_ciphers = yes
  ssl_protocols = !SSLv2 !SSLv3
  userdb {
    driver = passwd
  }
  protocol lda {
    mail_plugins = sieve
  }

  # auth_debug = yes
  # auth_debug_passwords = yes
  # auth_verbose = yes
  # auth_verbose_passwords = plain
  # mail_debug = yes
  # verbose_ssl = yes
  EOF

    if [ ! -f "/usr/local/etc/dovecot/cram-md5.pwd" ]; then
      p "Create email account for '${USER}' with 'CRAM-MD5' authentication: "
      doveadm pw | sed -e "s/^/${USER}:/" > "/usr/local/etc/dovecot/cram-md5.pwd"
      sudo chown _dovecot "/usr/local/etc/dovecot/cram-md5.pwd"
      sudo chmod go= "/usr/local/etc/dovecot/cram-md5.pwd"
    fi

    if ! /usr/bin/grep -Fq ${MAIL} "/etc/hosts"; then
      printf "127.0.0.1\t${MAIL}\n" | sudo tee -a /etc/hosts > /dev/null
    fi

    sudo brew services start dovecot
  }
#+end_src

*** getmail

#+begin_src sh
  function config_getmail () {
    p "Configure getmail"

    mkdir -m go= -p "${HOME}/.getmail" "${HOME}/Library/LaunchAgents"

    printf "%s\n" \
      "add ':KeepAlive' bool false" \
      "add ':Label' string 'ca.pyropus.getmail'" \
      "add ':ProgramArguments' array" \
      "add ':ProgramArguments:0' string '/usr/local/bin/getmail'" \
      "add ':RunAtLoad' bool true" \
      "add ':StandardOutPath' string '${HOME}/.getmail/getmail.log'" \
      "add ':StandardErrorPath' string '${HOME}/.getmail/getmail.err'" \
      "add ':StartInterval' integer 300" \
    | while read a; do
      /usr/libexec/PlistBuddy "${HOME}/Library/LaunchAgents/ca.pyropus.getmail.plist" -c "${a}" &> /dev/null
    done

    for email in \
      "pbosse@gmail.com" \
      "ptb@ioutime.com" \
    ; do
      p "Add password for '${email}' to Keychain"

      security add-internet-password -a "${email}" -s "imap.gmail.com" -r "imap" \
        -l "${email}" -D "getmail password" -P 993 -w

      cat > "${HOME}/.getmail/${email}" << EOF
  [retriever]
  type = SimpleIMAPSSLRetriever
  server = imap.gmail.com
  port = 993
  username = ${email}
  mailboxes = ("[Gmail]/All Mail",)

  [destination]
  type = MDA_external
  path = /usr/local/Cellar/dovecot/2.2.31/libexec/dovecot/dovecot-lda
  arguments = ("-c","/usr/local/etc/dovecot/dovecot.conf","-d","$(whoami)",)
  ignore_stderr = true

  [options]
  # delete = true
  delete_after = 30
  delivered_to = false
  read_all = false
  received = false
  verbose = 1
  EOF

    defaults write "${HOME}/Library/LaunchAgents/ca.pyropus.getmail" \
      ProgramArguments -array-add "--rcfile"
    defaults write "${HOME}/Library/LaunchAgents/ca.pyropus.getmail" \
      ProgramArguments -array-add "${email}"
    done

    plutil -convert xml1 "${HOME}/Library/LaunchAgents/ca.pyropus.getmail.plist"
    launchctl load "${HOME}/Library/LaunchAgents/ca.pyropus.getmail.plist"

    # http://shadow-file.blogspot.com/2012/06/parsing-email-and-fixing-timestamps-in.html
    curl -L https://pastebin.com/raw/ZBq7euid | tr -d '\015' > /usr/local/bin/timestamp.py
    chmod +x /usr/local/bin/timestamp.py
  }
#+end_src

for file in $(ls -1); do ~/bin/timestamp.py $file; done

find "${HOME}/.mail" -type f -name "[0123456789]*" -exec /usr/local/bin/timestamp.py '{}' ';'

*** git

#+begin_src sh
  function config_git () {
    p "Configure git"

    KEY="$(gpg -K --with-colons | awk -F: '/^sec/ { a=$5 } END { print a }')"

    git config --global user.name "Peter T Bosse II"
    git config --global user.email "ptb@ioutime.com"

    git config --global alias.cm "commit --allow-empty-message --message="
    git config --global alias.co "checkout"
    git config --global alias.st "status"

    git config --global push.default "simple"

    if [ ! -z ${KEY} ]; then
      git config --global user.signingkey "${KEY}"
      git config --global gpg.program "$(which gpg)"
      git config --global commit.gpgsign "true"
      git config --global tag.gpgsign "true"
      git config --global log.showSignature "true"
    fi
  }
#+end_src

*** gnupg

#+begin_src sh
  function config_gpg () {
    p "Create GPG keys"

    mkdir -m go= -p "${HOME}/.gnupg"

    echo "keyid-format long" \
      > "${HOME}/.gnupg/gpg.conf"
    echo "pinentry-program $(which pinentry-mac)" \
      > "${HOME}/.gnupg/gpg-agent.conf"

    gpg --faked-system-time '20170701T120000!' \
      --quick-generate-key "Peter T Bosse II <ptb@ioutime.com>" \
      future-default default never
  }
#+end_src

#+begin_src sh
  function config_gpg_help () {
    KEY="$(gpg -K --with-colons | awk -F: '/^sec/ { a=$5 } END { print a }')"
    gpg --armor --export "${KEY}" | pbcopy
    open "https://github.com/settings/keys"
  }
#+end_src

*** openssl

#+begin_src sh
  function config_openssl () {
    p "Create OpenSSL certificates"

    SSL="/usr/local/etc/openssl"
    DOMAIN="ptb2.me"
    MAIL="mail.${DOMAIN}"
    FAKE="0701080017"
    DAYS=3652
#+end_src

#+begin_src sh
  mkdir -p "${SSL}/certs/${DOMAIN}"
  cat > "${SSL}/certs/${DOMAIN}/${DOMAIN}.cnf" << EOF
  [ req ]
  default_bits = 4096
  default_keyfile = ${SSL}/certs/${DOMAIN}/${DOMAIN}.key
  default_md = sha256
  distinguished_name = dn
  encrypt_key = no
  prompt = no
  utf8 = yes
  x509_extensions = v3_ca

  [ dn ]
  CN = ${DOMAIN}

  [ v3_ca ]
  subjectKeyIdentifier = hash
  authorityKeyIdentifier = keyid:always,issuer
  basicConstraints = CA:true
  EOF
#+end_src

#+begin_src sh
  openssl genrsa -out "${SSL}/certs/${DOMAIN}/${DOMAIN}.key" 4096

  p "Set fake '${DOMAIN}' certificate creation date"
  sudo date "${FAKE}" && \
  openssl req -days ${DAYS} -new -x509 \
    -config "${SSL}/certs/${DOMAIN}/${DOMAIN}.cnf" \
    -key "${SSL}/certs/${DOMAIN}/${DOMAIN}.key" \
    -out "${SSL}/certs/${DOMAIN}/${DOMAIN}.crt" && \
  sudo ntpdate -u time.apple.com

  p "Password for adding certificate to Keychain Access"
  openssl pkcs12 -aes256 -clcerts -export \
    -in "${SSL}/certs/${DOMAIN}/${DOMAIN}.crt" \
    -inkey "${SSL}/certs/${DOMAIN}/${DOMAIN}.key" \
    -out "${SSL}/certs/${DOMAIN}/${DOMAIN}.p12"

  open -g "${SSL}/certs/${DOMAIN}/${DOMAIN}.p12"
#+end_src

#+begin_src sh
  mkdir -p "${SSL}/certs/${MAIL}"
  cat > "${SSL}/certs/${MAIL}/${MAIL}.cnf" << EOF
  [ req ]
  default_bits = 4096
  default_keyfile = ${SSL}/certs/${DOMAIN}/${DOMAIN}.key
  default_md = sha256
  distinguished_name = dn
  encrypt_key = no
  prompt = no
  utf8 = yes
  x509_extensions = v3_ca

  [ dn ]
  CN = ${MAIL}

  [ v3_ca ]
  subjectKeyIdentifier = hash
  authorityKeyIdentifier = keyid:always,issuer
  basicConstraints = CA:true
  EOF
#+end_src

#+begin_src sh
  openssl genrsa -out "${SSL}/certs/${MAIL}/${MAIL}.key" 4096

  openssl req -new \
    -config "${SSL}/certs/${MAIL}/${MAIL}.cnf" \
    -key "${SSL}/certs/${MAIL}/${MAIL}.key" \
    -out "${SSL}/certs/${MAIL}/${MAIL}.csr"

  p "Set fake '${MAIL}' certificate creation date"
  sudo date "${FAKE}" && \
  openssl x509 -days ${DAYS} -req -set_serial 01 -sha256 \
    -CA "${SSL}/certs/${DOMAIN}/${DOMAIN}.crt" \
    -CAkey "${SSL}/certs/${DOMAIN}/${DOMAIN}.key" \
    -in "${SSL}/certs/${MAIL}/${MAIL}.csr" \
    -out "${SSL}/certs/${MAIL}/${MAIL}.crt" && \
  sudo ntpdate -u time.apple.com
}
#+end_src

*** shell

#+begin_src sh
function config_shell () {
  if [ -x "/usr/local/bin/zsh" ]; then
    # Current User > Advanced Options… > Login shell: /usr/local/bin/zsh
    p "Set '/usr/local/bin/zsh' as the default shell"

    sudo sh -c "printf '%s\n' '/usr/local/bin/zsh' >> /etc/shells" && \
    sudo chsh -s /usr/local/bin/zsh && \
    sudo mkdir -m go= -p /private/var/root/Library/Caches/ && \
    sudo touch "/private/var/root/.zshrc"
    chsh -s /usr/local/bin/zsh
    touch "${HOME}/.zshrc"
  fi
}
#+end_src

*** sieve

#+begin_src sh
  function config_sieve () {
    p "Configure sieve"

    cat > "${HOME}/.sieve" << EOF
  require ["date", "fileinto", "imap4flags", "mailbox", "relational", "variables"];

  setflag "\\Seen";

  if date :is "date" "year" "1995" { fileinto :create "Archives.1995"; }
  if date :is "date" "year" "1996" { fileinto :create "Archives.1996"; }
  if date :is "date" "year" "1997" { fileinto :create "Archives.1997"; }
  if date :is "date" "year" "1998" { fileinto :create "Archives.1998"; }
  if date :is "date" "year" "1999" { fileinto :create "Archives.1999"; }
  if date :is "date" "year" "2000" { fileinto :create "Archives.2000"; }
  if date :is "date" "year" "2001" { fileinto :create "Archives.2001"; }
  if date :is "date" "year" "2002" { fileinto :create "Archives.2002"; }
  if date :is "date" "year" "2003" { fileinto :create "Archives.2003"; }
  if date :is "date" "year" "2004" { fileinto :create "Archives.2004"; }
  if date :is "date" "year" "2005" { fileinto :create "Archives.2005"; }
  if date :is "date" "year" "2006" { fileinto :create "Archives.2006"; }
  if date :is "date" "year" "2007" { fileinto :create "Archives.2007"; }
  if date :is "date" "year" "2008" { fileinto :create "Archives.2008"; }
  if date :is "date" "year" "2009" { fileinto :create "Archives.2009"; }
  if date :is "date" "year" "2010" { fileinto :create "Archives.2010"; }
  if date :is "date" "year" "2011" { fileinto :create "Archives.2011"; }
  if date :is "date" "year" "2012" { fileinto :create "Archives.2012"; }
  if date :is "date" "year" "2013" { fileinto :create "Archives.2013"; }
  if date :is "date" "year" "2014" { fileinto :create "Archives.2014"; }
  if date :is "date" "year" "2015" { fileinto :create "Archives.2015"; }
  if date :is "date" "year" "2016" { fileinto :create "Archives.2016"; }
  if date :is "date" "year" "2017" { fileinto :create "Archives.2017"; }
  if date :is "date" "year" "2018" { fileinto :create "Archives.2018"; }
  if date :is "date" "year" "2019" { fileinto :create "Archives.2019"; }
  if date :is "date" "year" "2020" { fileinto :create "Archives.2020"; }
  EOF
  }
#+end_src

*** ssh

#+begin_src sh
  function config_ssh () {
    p "Create ssh keys"

    mkdir -m go= -p "${HOME}/.ssh"

    ssh-keygen -t ed25519 -a 100 -C "ptb@ioutime.com"

    cat > "${HOME}/.ssh/config" <<-EOF
  Host *
    AddKeysToAgent yes
    IdentityFile ~/.ssh/id_ed25519
  EOF

    p "Adding ssh key to macOS keychain"

    ssh-add -K
    echo "ssh-add -A &> /dev/null" >> "${HOME}/.zshrc"
  }
#+end_src

#+begin_src sh
  function config_ssh_help () {
    pbcopy < "${HOME}/.ssh/id_ed25519.pub"
    open "https://github.com/settings/keys"
  }
#+end_src

#+begin_example sh :tangle no
  ssh-copy-id username@example.com
#+end_example

*** TODO: vim

#+begin_src sh :tangle no
  function config_vim () {
    p "Configure vim"
  }
#+end_src

*** zsh

#+begin_src sh
function config_zsh () {
  p "Create system default '/etc/zshrc'"

  sudo tee /etc/zshrc > /dev/null <<-EOF
alias -g ...="../.."
alias -g ....="../../.."
alias -g .....="../../../.."
alias l="/bin/ls -lG"
alias ll="/bin/ls -alG"
alias lr="/bin/ls -alRG"
alias screen="/usr/bin/screen -U"
autoload -U compaudit
compaudit | xargs -L 1 sudo chown -HR root:wheel {} 2> /dev/null
compaudit | xargs -L 1 sudo chmod -HR go-w {} 2> /dev/null
autoload -U compinit
compinit -d "\${HOME}/Library/Caches/zcompdump"
bindkey "\e[3~" delete-char
bindkey "\e[A" up-line-or-search
bindkey "\e[B" down-line-or-search
export HISTFILE="\${HOME}/Library/Caches/zsh_history"
export HISTSIZE=50000
export SAVEHIST=50000
setopt APPEND_HISTORY
setopt AUTO_CD
setopt EXTENDED_HISTORY
setopt HIST_FIND_NO_DUPS
setopt INC_APPEND_HISTORY
setopt PROMPT_SUBST
setopt SHARE_HISTORY
stty erase 
# Correctly display UTF-8 with combining characters.
if [ "\$TERM_PROGRAM" = "Apple_Terminal" ]; then
  setopt combiningchars
fi
function precmd () {
  print -Pn "\\e]7;file://%M\${PWD// /%%20}\a";
  print -Pn "\\e]2;%n@%m\a";
  print -Pn "\\e]1;%~\a";
}
function gb () {
  git branch --no-color 2> /dev/null | \
    sed -e "/^[^*]/d" -e "s/* \(.*\)/ (\1)/"
}
function xd () {
  xattr -d com.apple.diskimages.fsck \$* 2> /dev/null;
  xattr -d com.apple.diskimages.recentcksum \$* 2> /dev/null;
  xattr -d com.apple.metadata:kMDItemFinderComment \$* 2> /dev/null;
  xattr -d com.apple.metadata:kMDItemDownloadedDate \$* 2> /dev/null;
  xattr -d com.apple.metadata:kMDItemWhereFroms \$* 2> /dev/null;
  xattr -d com.apple.quarantine \$* 2> /dev/null;
  find . -name .DS_Store -delete;
  find . -name 'Icon' -delete
}
function sf () {
  SetFile -P -d "\$1 12:00:00" -m "\$1 12:00:00" \$argv[2,\$]
}
function sd () {
  xd **/*;
  sf \$1 .;
  for i in **/*; do sf \$1 \$i; done;
  chown -R root:wheel .;
  chmod -R a+r,u+w,go-w .;
  find . -type d -exec chmod a+x '{}' ';';
  chgrp -R admin ./Applications;
  chmod -R g+w ./Applications;
  chgrp -R admin ./Library;
  chmod -R g+w ./Library;
  chgrp -R staff "./Library/Application Support/Adobe";
  chmod -R g-w ./Library/Keychains;
  chmod -R g-w ./Library/ScriptingAdditions;
  chgrp -R wheel ./Library/Filesystems;
  chmod -R g-w ./Library/Filesystems;
  chgrp -R wheel ./Library/LaunchAgents;
  chmod -R g-w ./Library/LaunchAgents;
  chgrp -R wheel ./Library/LaunchDaemons;
  chmod -R g-w ./Library/LaunchDaemons;
  chgrp -R wheel ./Library/PreferencePanes;
  chmod -R g-w ./Library/PreferencePanes;
  chgrp -R wheel ./Library/StartupItems;
  chmod -R g-w ./Library/StartupItems;
  chgrp -R wheel ./Library/Widgets;
  chmod -R g-w ./Library/Widgets;
  find . -name "kexts" -type d -exec chmod -R g-w '{}' ';';
  find . -name "*.kext" -exec chown -R root:wheel '{}' ';';
  find . -name "*.kext" -exec chmod -R g-w '{}' ';'
}
MAS="\$(getconf DARWIN_USER_CACHE_DIR)com.apple.appstore"
PROMPT="%B%n@%m%b:%2~%B\$(gb) %#%b "
EOF
}
#+end_src

*** Login Items

#+begin_src sh
  function config_loginitems () {
    p "Create login items"

    osascript > /dev/null << EOF
      tell app "System Events"
        make new login item with properties ¬
          { path: "/Applications/Alfred 3.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/autoping.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Caffeine.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Coffitivity.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Dropbox.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/HardwareGrowler.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/I Love Stars.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/IPMenulet.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/iTunes.app/Contents/MacOS/iTunesHelper.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Menubar Countdown.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Meteorologist.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Moom.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Plex Media Server.app", hidden: true }
        make new login item with properties ¬
          { path: "/Library/PreferencePanes/SteerMouse.prefPane/Contents/MacOS/SteerMouse Manager.app", hidden: true }
      end tell
  EOF

    mkdir -m go= -p "${HOME}/Library/LaunchAgents"
    printf "%s\t%s\n" \
      "net.elasticthreads.nv" "add ':KeepAlive' bool true" \
      "net.elasticthreads.nv" "add ':Label' string 'net.elasticthreads.nv'" \
      "net.elasticthreads.nv" "add ':Program' string '/Applications/nvALT.app/Contents/MacOS/nvALT'" \
    | while IFS=$'\t' read a b; do
      /usr/libexec/PlistBuddy "${HOME}/Library/LaunchAgents/${a}.plist" -c "${b}" &> /dev/null
    done
  }
#+end_src

*** handlers

#+begin_src sh
  function config_handlers () {
    if [ -f "${HOME}/Library/Preferences/org.duti.plist" ]; then
      rm "${HOME}/Library/Preferences/org.duti.plist"
    fi

    printf "%s\t%s\t%s\n" \
      "com.apple.DiskImageMounter" "com.apple.disk-image" "all" \
      "com.apple.DiskImageMounter" "public.disk-image" "all" \
      "com.apple.DiskImageMounter" "public.iso-image" "all" \
      "com.apple.QuickTimePlayerX" "com.apple.coreaudio-format" "all" \
      "com.apple.QuickTimePlayerX" "com.apple.quicktime-movie" "all" \
      "com.apple.QuickTimePlayerX" "com.microsoft.waveform-audio" "all" \
      "com.apple.QuickTimePlayerX" "public.aifc-audio" "all" \
      "com.apple.QuickTimePlayerX" "public.aiff-audio" "all" \
      "com.apple.QuickTimePlayerX" "public.audio" "all" \
      "com.apple.QuickTimePlayerX" "public.mp3" "all" \
      "com.apple.Safari" "com.compuserve.gif" "all" \
      "com.apple.Terminal" "com.apple.terminal.shell-script" "all" \
      "com.apple.iTunes" "com.apple.iTunes.audible" "all" \
      "com.apple.iTunes" "com.apple.iTunes.ipg" "all" \
      "com.apple.iTunes" "com.apple.iTunes.ipsw" "all" \
      "com.apple.iTunes" "com.apple.iTunes.ite" "all" \
      "com.apple.iTunes" "com.apple.iTunes.itlp" "all" \
      "com.apple.iTunes" "com.apple.iTunes.itms" "all" \
      "com.apple.iTunes" "com.apple.iTunes.podcast" "all" \
      "com.apple.iTunes" "com.apple.m4a-audio" "all" \
      "com.apple.iTunes" "com.apple.mpeg-4-ringtone" "all" \
      "com.apple.iTunes" "com.apple.protected-mpeg-4-audio" "all" \
      "com.apple.iTunes" "com.apple.protected-mpeg-4-video" "all" \
      "com.apple.iTunes" "com.audible.aa-audio" "all" \
      "com.apple.iTunes" "public.mpeg-4-audio" "all" \
      "com.apple.installer" "com.apple.installer-package-archive" "all" \
      "com.github.atom" "com.apple.binary-property-list" "editor" \
      "com.github.atom" "com.apple.crashreport" "editor" \
      "com.github.atom" "com.apple.dt.document.ascii-property-list" "editor" \
      "com.github.atom" "com.apple.dt.document.script-suite-property-list" "editor" \
      "com.github.atom" "com.apple.dt.document.script-terminology-property-list" "editor" \
      "com.github.atom" "com.apple.log" "editor" \
      "com.github.atom" "com.apple.property-list" "editor" \
      "com.github.atom" "com.apple.rez-source" "editor" \
      "com.github.atom" "com.apple.symbol-export" "editor" \
      "com.github.atom" "com.apple.xcode.ada-source" "editor" \
      "com.github.atom" "com.apple.xcode.bash-script" "editor" \
      "com.github.atom" "com.apple.xcode.configsettings" "editor" \
      "com.github.atom" "com.apple.xcode.csh-script" "editor" \
      "com.github.atom" "com.apple.xcode.fortran-source" "editor" \
      "com.github.atom" "com.apple.xcode.ksh-script" "editor" \
      "com.github.atom" "com.apple.xcode.lex-source" "editor" \
      "com.github.atom" "com.apple.xcode.make-script" "editor" \
      "com.github.atom" "com.apple.xcode.mig-source" "editor" \
      "com.github.atom" "com.apple.xcode.pascal-source" "editor" \
      "com.github.atom" "com.apple.xcode.strings-text" "editor" \
      "com.github.atom" "com.apple.xcode.tcsh-script" "editor" \
      "com.github.atom" "com.apple.xcode.yacc-source" "editor" \
      "com.github.atom" "com.apple.xcode.zsh-script" "editor" \
      "com.github.atom" "com.apple.xml-property-list" "editor" \
      "com.github.atom" "com.barebones.bbedit.actionscript-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.erb-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.ini-configuration" "editor" \
      "com.github.atom" "com.barebones.bbedit.javascript-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.json-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.jsp-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.lasso-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.lua-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.setext-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.sql-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.tcl-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.tex-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.textile-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.vbscript-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.vectorscript-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.verilog-hdl-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.vhdl-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.yaml-source" "editor" \
      "com.github.atom" "com.netscape.javascript-source" "editor" \
      "com.github.atom" "com.sun.java-source" "editor" \
      "com.github.atom" "dyn.ah62d4rv4ge80255drq" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge80g55gq3w0n" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge80g55sq2" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge80y2xzrf0gk3pw" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge81e3dtqq" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge81e7k" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge81g25xsq" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge81g2pxsq" "all" \
      "com.github.atom" "net.daringfireball.markdown" "editor" \
      "com.github.atom" "public.assembly-source" "editor" \
      "com.github.atom" "public.c-header" "editor" \
      "com.github.atom" "public.c-plus-plus-source" "editor" \
      "com.github.atom" "public.c-source" "editor" \
      "com.github.atom" "public.csh-script" "editor" \
      "com.github.atom" "public.json" "editor" \
      "com.github.atom" "public.lex-source" "editor" \
      "com.github.atom" "public.log" "editor" \
      "com.github.atom" "public.mig-source" "editor" \
      "com.github.atom" "public.nasm-assembly-source" "editor" \
      "com.github.atom" "public.objective-c-plus-plus-source" "editor" \
      "com.github.atom" "public.objective-c-source" "editor" \
      "com.github.atom" "public.patch-file" "editor" \
      "com.github.atom" "public.perl-script" "editor" \
      "com.github.atom" "public.php-script" "editor" \
      "com.github.atom" "public.plain-text" "editor" \
      "com.github.atom" "public.precompiled-c-header" "editor" \
      "com.github.atom" "public.precompiled-c-plus-plus-header" "editor" \
      "com.github.atom" "public.python-script" "editor" \
      "com.github.atom" "public.ruby-script" "editor" \
      "com.github.atom" "public.script" "editor" \
      "com.github.atom" "public.shell-script" "editor" \
      "com.github.atom" "public.source-code" "editor" \
      "com.github.atom" "public.text" "editor" \
      "com.github.atom" "public.utf16-external-plain-text" "editor" \
      "com.github.atom" "public.utf16-plain-text" "editor" \
      "com.github.atom" "public.utf8-plain-text" "editor" \
      "com.github.atom" "public.xml" "editor" \
      "com.kodlian.Icon-Slate" "com.apple.icns" "all" \
      "com.kodlian.Icon-Slate" "com.microsoft.ico" "all" \
      "com.microsoft.Word" "public.rtf" "all" \
      "com.panayotis.jubler" "dyn.ah62d4rv4ge81g6xy" "all" \
      "com.sketchup.SketchUp.2017" "com.sketchup.skp" "all" \
      "com.VortexApps.NZBVortex3" "dyn.ah62d4rv4ge8068xc" "all" \
      "com.vmware.fusion" "com.microsoft.windows-executable" "all" \
      "cx.c3.theunarchiver" "com.alcohol-soft.mdf-image" "all" \
      "cx.c3.theunarchiver" "com.allume.stuffit-archive" "all" \
      "cx.c3.theunarchiver" "com.altools.alz-archive" "all" \
      "cx.c3.theunarchiver" "com.amiga.adf-archive" "all" \
      "cx.c3.theunarchiver" "com.amiga.adz-archive" "all" \
      "cx.c3.theunarchiver" "com.apple.applesingle-archive" "all" \
      "cx.c3.theunarchiver" "com.apple.binhex-archive" "all" \
      "cx.c3.theunarchiver" "com.apple.bom-compressed-cpio" "all" \
      "cx.c3.theunarchiver" "com.apple.itunes.ipa" "all" \
      "cx.c3.theunarchiver" "com.apple.macbinary-archive" "all" \
      "cx.c3.theunarchiver" "com.apple.self-extracting-archive" "all" \
      "cx.c3.theunarchiver" "com.apple.xar-archive" "all" \
      "cx.c3.theunarchiver" "com.apple.xip-archive" "all" \
      "cx.c3.theunarchiver" "com.cyclos.cpt-archive" "all" \
      "cx.c3.theunarchiver" "com.microsoft.cab-archive" "all" \
      "cx.c3.theunarchiver" "com.microsoft.msi-installer" "all" \
      "cx.c3.theunarchiver" "com.nero.nrg-image" "all" \
      "cx.c3.theunarchiver" "com.network172.pit-archive" "all" \
      "cx.c3.theunarchiver" "com.nowsoftware.now-archive" "all" \
      "cx.c3.theunarchiver" "com.nscripter.nsa-archive" "all" \
      "cx.c3.theunarchiver" "com.padus.cdi-image" "all" \
      "cx.c3.theunarchiver" "com.pkware.zip-archive" "all" \
      "cx.c3.theunarchiver" "com.rarlab.rar-archive" "all" \
      "cx.c3.theunarchiver" "com.redhat.rpm-archive" "all" \
      "cx.c3.theunarchiver" "com.stuffit.archive.sit" "all" \
      "cx.c3.theunarchiver" "com.stuffit.archive.sitx" "all" \
      "cx.c3.theunarchiver" "com.sun.java-archive" "all" \
      "cx.c3.theunarchiver" "com.symantec.dd-archive" "all" \
      "cx.c3.theunarchiver" "com.winace.ace-archive" "all" \
      "cx.c3.theunarchiver" "com.winzip.zipx-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.arc-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.arj-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.dcs-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.dms-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.ha-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.lbr-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.lha-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.lhf-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.lzx-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.packdev-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.pax-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.pma-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.pp-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.xmash-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.zoo-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.zoom-archive" "all" \
      "cx.c3.theunarchiver" "org.7-zip.7-zip-archive" "all" \
      "cx.c3.theunarchiver" "org.archive.warc-archive" "all" \
      "cx.c3.theunarchiver" "org.debian.deb-archive" "all" \
      "cx.c3.theunarchiver" "org.gnu.gnu-tar-archive" "all" \
      "cx.c3.theunarchiver" "org.gnu.gnu-zip-archive" "all" \
      "cx.c3.theunarchiver" "org.gnu.gnu-zip-tar-archive" "all" \
      "cx.c3.theunarchiver" "org.tukaani.lzma-archive" "all" \
      "cx.c3.theunarchiver" "org.tukaani.xz-archive" "all" \
      "cx.c3.theunarchiver" "public.bzip2-archive" "all" \
      "cx.c3.theunarchiver" "public.cpio-archive" "all" \
      "cx.c3.theunarchiver" "public.tar-archive" "all" \
      "cx.c3.theunarchiver" "public.tar-bzip2-archive" "all" \
      "cx.c3.theunarchiver" "public.z-archive" "all" \
      "cx.c3.theunarchiver" "public.zip-archive" "all" \
      "cx.c3.theunarchiver" "public.zip-archive.first-part" "all" \
      "org.gnu.Emacs" "dyn.ah62d4rv4ge8086xh" "all" \
      "org.inkscape.Inkscape" "public.svg-image" "editor" \
      "org.videolan.vlc" "com.apple.m4v-video" "all" \
      "org.videolan.vlc" "com.microsoft.windows-media-wmv" "all" \
      "org.videolan.vlc" "org.videolan.3gp" "all" \
      "org.videolan.vlc" "org.videolan.aac" "all" \
      "org.videolan.vlc" "org.videolan.ac3" "all" \
      "org.videolan.vlc" "org.videolan.aiff" "all" \
      "org.videolan.vlc" "org.videolan.amr" "all" \
      "org.videolan.vlc" "org.videolan.aob" "all" \
      "org.videolan.vlc" "org.videolan.ape" "all" \
      "org.videolan.vlc" "org.videolan.asf" "all" \
      "org.videolan.vlc" "org.videolan.avi" "all" \
      "org.videolan.vlc" "org.videolan.axa" "all" \
      "org.videolan.vlc" "org.videolan.axv" "all" \
      "org.videolan.vlc" "org.videolan.divx" "all" \
      "org.videolan.vlc" "org.videolan.dts" "all" \
      "org.videolan.vlc" "org.videolan.dv" "all" \
      "org.videolan.vlc" "org.videolan.flac" "all" \
      "org.videolan.vlc" "org.videolan.flash" "all" \
      "org.videolan.vlc" "org.videolan.gxf" "all" \
      "org.videolan.vlc" "org.videolan.it" "all" \
      "org.videolan.vlc" "org.videolan.mid" "all" \
      "org.videolan.vlc" "org.videolan.mka" "all" \
      "org.videolan.vlc" "org.videolan.mkv" "all" \
      "org.videolan.vlc" "org.videolan.mlp" "all" \
      "org.videolan.vlc" "org.videolan.mod" "all" \
      "org.videolan.vlc" "org.videolan.mpc" "all" \
      "org.videolan.vlc" "org.videolan.mpeg-audio" "all" \
      "org.videolan.vlc" "org.videolan.mpeg-stream" "all" \
      "org.videolan.vlc" "org.videolan.mpeg-video" "all" \
      "org.videolan.vlc" "org.videolan.mxf" "all" \
      "org.videolan.vlc" "org.videolan.nsv" "all" \
      "org.videolan.vlc" "org.videolan.nuv" "all" \
      "org.videolan.vlc" "org.videolan.ogg-audio" "all" \
      "org.videolan.vlc" "org.videolan.ogg-video" "all" \
      "org.videolan.vlc" "org.videolan.oma" "all" \
      "org.videolan.vlc" "org.videolan.opus" "all" \
      "org.videolan.vlc" "org.videolan.quicktime" "all" \
      "org.videolan.vlc" "org.videolan.realmedia" "all" \
      "org.videolan.vlc" "org.videolan.rec" "all" \
      "org.videolan.vlc" "org.videolan.rmi" "all" \
      "org.videolan.vlc" "org.videolan.s3m" "all" \
      "org.videolan.vlc" "org.videolan.spx" "all" \
      "org.videolan.vlc" "org.videolan.tod" "all" \
      "org.videolan.vlc" "org.videolan.tta" "all" \
      "org.videolan.vlc" "org.videolan.vob" "all" \
      "org.videolan.vlc" "org.videolan.voc" "all" \
      "org.videolan.vlc" "org.videolan.vqf" "all" \
      "org.videolan.vlc" "org.videolan.vro" "all" \
      "org.videolan.vlc" "org.videolan.wav" "all" \
      "org.videolan.vlc" "org.videolan.webm" "all" \
      "org.videolan.vlc" "org.videolan.wma" "all" \
      "org.videolan.vlc" "org.videolan.wmv" "all" \
      "org.videolan.vlc" "org.videolan.wtv" "all" \
      "org.videolan.vlc" "org.videolan.wv" "all" \
      "org.videolan.vlc" "org.videolan.xa" "all" \
      "org.videolan.vlc" "org.videolan.xesc" "all" \
      "org.videolan.vlc" "org.videolan.xm" "all" \
      "org.videolan.vlc" "public.ac3-audio" "all" \
      "org.videolan.vlc" "public.audiovisual-content" "all" \
      "org.videolan.vlc" "public.avi" "all" \
      "org.videolan.vlc" "public.movie" "all" \
      "org.videolan.vlc" "public.mpeg" "all" \
      "org.videolan.vlc" "public.mpeg-2-video" "all" \
      "org.videolan.vlc" "public.mpeg-4" "all" \
    | while IFS=$'\t' read a b c; do
        defaults write org.duti DUTISettings -array-add \
          "{
            DUTIBundleIdentifier = '$a';
            DUTIUniformTypeIdentifier = '$b';
            DUTIRole = '$c';
          }"
    done

    if [ -x "/usr/local/bin/duti" ]; then
      p "Set document file handlers"

      duti "${HOME}/Library/Preferences/org.duti.plist" 2> /dev/null
    fi

    /System/Library/Frameworks/CoreServices.framework/Versions/Current/Frameworks/LaunchServices.framework/Versions/Current/Support/lsregister -kill -r -domain local -domain system -domain user

    sudo rm -rf /Library/Caches/com.apple.iconservices.store
    sudo find /private/var/folders -depth \( -name com.apple.dock.iconcache -or -name com.apple.iconservices \) -exec rm -rf {} \;
    sudo touch /Applications/* /Applications/Utilities/* 2> /dev/null

    sleep 5
    osascript -e 'tell app "Dock" to quit'
    killall Finder
  }
#+end_src

#+begin_src sh
  function config_done () {
    p "To copy gpg public key, enter 'config_gpg_help'"
    p "To copy ssh public key, enter 'config_ssh_help'"
    p "Otherwise, enter 'private' (if configured) or 'reboot' now"
  }
#+end_src

*** config

#+begin_src sh
  function config () {
    config_mas
    config_atom
    config_bbedit
    config_desktop
    config_dock
    config_emacs
    config_vi_script
    config_terminal
    config_openssl
    config_dovecot
    config_sieve
    config_getmail
    config_gpg
    config_git
    config_shell
    config_ssh
    #config_vim
    config_zsh
    config_loginitems
    config_handlers
    config_done
  }
#+end_src

** Private

This section includes license keys, registration codes, and serial numbers.

#+begin_src sh
  function private () {
    printf "%s\n"
#+end_src

-----BEGIN PGP MESSAGE-----

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
=Sl6j
-----END PGP MESSAGE-----

#+begin_src sh
  }
#+end_src

** Commands

#+begin_src sh
  function display_help () {
    cat << EOF

    Initialize:
      $(which init)

    Install:
      $(which install)

  EOF
  }

  display_help
  fi
#+end_src
