* macOS Setup
:properties:
:header-args: :tangle setup.command
:header-args:sh: :shebang #!/bin/sh :results silent
:end:
#+startup: content nohideblocks hidestars indent

From clean install to fully configured.

#+begin_example sh :tangle no
  sudo "/Applications/Install macOS Sierra.app/Contents/Resources/createinstallmedia" \
    --applicationpath "/Applications/Install macOS Sierra.app" --nointeraction \
    --volume "/Volumes/Install"
#+end_example

** Initialize

*** New Terminal

#+begin_src sh
  if [ -z "$1" ]; then
    if [[ ! $SHELL == *"zsh" ]]; then
      chsh -s /bin/zsh
    fi

    osascript << EOF
  tell app "Terminal" to do script "source ${0} 0"
  EOF
    clear
  else
#+end_src

*** Constants

#+begin_src sh
  CACHE="/Volumes/Install"
  DOMAIN="ptb2.me"
  MAIL="mail.${DOMAIN}"

  MAS="$(getconf DARWIN_USER_CACHE_DIR)com.apple.appstore"
#+end_src

*** Utility Functions

#+begin_src sh
  function p () {
    printf "\n\033[1m\033[34m%s\033[0m\n\n" "${1}"
  }
#+end_src

*** Disable Repeated Requests for Password

#+begin_src sh
  function init_sudoers () {
    p "Disable repeated requests for password"

    printf "%s\t%s\n" \
      "timeout" "Defaults:%admin timestamp_timeout=-1" \
      "installer" "%admin ALL=(ALL) NOPASSWD:SETENV: /usr/sbin/installer" \
      "tty_tickets" 'Defaults:%admin !tty_tickets' \
    | while IFS=$'\t' read a b; do
      sudo tee "/etc/sudoers.d/${a}" <<< "${b}" > /dev/null
    done
  }
#+end_src

*** Disable System and Disk Sleep

#+begin_src sh
  function init_no_sleep () {
    p "Disable system and disk sleep"

    sudo pmset -a sleep 0
    sudo pmset -a disksleep 0
 }
#+end_src

*** Set Computer Name and Local Hostname

#+begin_src sh
  function init_hostname () {
    p "Set computer name and local hostname"
#+end_src

*Computer Name*
#+begin_src sh
  sudo systemsetup -setcomputername \
    $(ruby -e "print '$(hostname -s)'.capitalize") &> /dev/null
#+end_src

*Local Hostname*
#+begin_src sh
  sudo systemsetup -setlocalsubnetname $(hostname -s) &> /dev/null
#+end_src

#+begin_src sh
  }
#+end_src

*** Set Permissions on Install Destinations

#+begin_src sh
  function init_perms () {
    p "Set permissions on install destinations"

    for c in \
      "/Library/ColorPickers" \
      "/Library/Fonts" \
      "/Library/Input Methods" \
      "/Library/PreferencePanes" \
      "/Library/QuickLook" \
      "/Library/Screen Savers" \
      "/usr/local" \
    ; do
      sudo chgrp -R admin "${c}"
      sudo chmod -R g+w "${c}"
    done

    if [ ! -d "/usr/local/bin" ]; then
      mkdir -m o-w -p "/usr/local/bin"
    fi
  }
#+end_src

*** Install Developer Tools

#+begin_src sh
  function init_devtools () {
    p "Install developer tools"

    if [ -d "${CACHE}/Updates" ]; then
      sudo chown -R "${USER}" "/Library/Updates"
      rsync -a --delay-updates \
        "${CACHE}/Updates/" "/Library/Updates/"
    fi

    xcode-select --install
  }
#+end_src

*** Install macOS Updates

#+begin_src sh
  function init_updater () {
    p "Install macOS updates"

    if [ -d "${CACHE}/Updates" ]; then
      sudo chown -R "${USER}" "/Library/Updates"
      rsync -a --delay-updates \
        "${CACHE}/Updates/" "/Library/Updates/"
    fi

    sudo softwareupdate --install --all
  }
#+end_src

*** Create Primary Account

#+begin_src sh
  function init_account () {
    p "Create primary user account"

    /bin/echo -n "Real name: " && read NAME
    /bin/echo -n "Account name: " && read U
    /bin/echo -n "Email address: " && read EMAIL

    sudo chgrp admin "/Library/User Pictures"
    sudo chmod g+w "/Library/User Pictures"
    curl "https://www.gravatar.com/avatar/$(md5 -qs $EMAIL).jpg?s=512" --silent \
      --compressed --location --output "/Library/User Pictures/${EMAIL}.jpg" \

    sudo defaults write \
      "/System/Library/User Template/Non_localized/Library/Preferences/.GlobalPreferences.plist" \
      "com.apple.swipescrolldirection" -bool false

    sudo sysadminctl -addUser "${U}" -fullName "${NAME}" -password - \
      -shell "/bin/zsh" -admin -picture "/Library/User Pictures/${EMAIL}.jpg"

    p "Press any key to log out."
    /usr/bin/read -n 1 -s

    osascript -e 'tell application "loginwindow" to «event aevtrlgo»'
  }
#+end_src

*** init

#+begin_src sh
  function init () {
    init_sudoers
    init_no_sleep
    init_hostname
    init_perms
    init_devtools
    init_updater
    init_account
  }
#+end_src

** Install

*** Homebrew and App Store Caches

#+begin_src sh
  function install_caches () {
    if [ -d "${CACHE}/Homebrew" ]; then
      p "Restore Homebrew caches from backup"

      rsync -a --delay-updates \
        "${CACHE}/Homebrew/" "${HOME}/Library/Caches/Homebrew/"
    fi

    if [ -d "${CACHE}/Updates" ]; then
      p "Restore App Store caches from backup"

      sudo chown -R "${USER}" "${MAS}"
      rsync -a --delay-updates \
        "${CACHE}/App Store/" "${MAS}/"
    fi
  }
#+end_src

*** Default Paths

#+begin_src sh
  function install_paths () {
    if ! grep -Fq "/usr/local/sbin" /etc/paths; then
      p "Add '/usr/local/sbin' to default \$PATH"

      sudo sed -i -e "/\/usr\/sbin/{x;s/$/\/usr\/local\/sbin/;G;}" /etc/paths
    fi
  }
#+end_src

*** [[https://brew.sh/][Homebrew]]

#+begin_src sh
  function install_brew () {
    p "Install Homebrew"

    ruby -e "$(curl -Ls https://github.com/Homebrew/install/raw/master/install)"

    brew analytics off

    brew update
    brew doctor

    brew tap "homebrew/bundle"
#+end_src

*** [[https://github.com/Homebrew/homebrew-bundle][Brewfile]]

#+begin_src sh
  cat > /usr/local/Brewfile << EOF
  cask_args colorpickerdir: "/Library/ColorPickers",
    fontdir: "/Library/Fonts",
    input_methoddir: "/Library/Input Methods",
    prefpanedir: "/Library/PreferencePanes",
    qlplugindir: "/Library/QuickLook",
    screen_saverdir: "/Library/Screen Savers"

  tap "homebrew/bundle"
  tap "caskroom/cask"

  brew "rsync"
  brew "mas"
  mas "autoping", id: 632347870

  cask "docker-toolbox"
  cask "java"
  cask "vmware-fusion"

  cask "xquartz"
  cask "inkscape"
  cask "wireshark"

  brew "aspell",
    args: ["lang=en"]
  brew "chromedriver"
  brew "coreutils"
  tap "homebrew/services"
  brew "dovecot",
    args: [
    "with-pam",
    "with-pigeonhole" ]
  brew "duti"
  brew "fdupes"
  brew "gawk"
  brew "getmail"
  brew "git"
  brew "gnu-sed",
    args: ["with-default-names"]
  brew "gnupg"
  brew "gpac"
  brew "hub"
  brew "ievms"
  brew "imagemagick"
  brew "mercurial"
  brew "mp4v2"
  brew "mtr"
  brew "nmap"
  brew "nvm"
  brew "openssl"
  brew "pinentry-mac"
  brew "pyenv"
  brew "rbenv"
  brew "selenium-server-standalone"
  brew "sqlite"
  brew "stow"
  brew "terminal-notifier"
  brew "trash"
  brew "vim"
  brew "wget"
  brew "yarn",
    args: ["ignore-dependencies"]
  brew "youtube-dl"
  brew "zsh"

  cask "adium"
  cask "airfoil"
  cask "alfred"
  cask "arduino"
  cask "atom"
  cask "autodmg"
  cask "bbedit"
  cask "caffeine"
  cask "carbon-copy-cloner"
  cask "charles"
  cask "dash"
  cask "dropbox"
  cask "duet"
  cask "exifrenamer"
  cask "firefox"
  cask "flux"
  cask "github-desktop"
  cask "gitup"
  cask "google-chrome"
  cask "handbrake"
  cask "hermes"
  cask "imageoptim"
  cask "integrity"
  cask "istat-menus"
  cask "jubler"
  cask "little-snitch"
  cask "machg"
  cask "makemkv"
  cask "menubar-countdown"
  cask "meteorologist"
  cask "moom"
  cask "mp4tools"
  cask "munki"
  cask "musicbrainz-picard"
  cask "namechanger"
  cask "nvalt"
  cask "nzbget"
  cask "nzbvortex"
  cask "openemu"
  cask "opera"
  cask "pacifist"
  cask "platypus"
  cask "plex-media-server"
  cask "quitter"
  cask "rescuetime"
  cask "scrivener"
  cask "sitesucker"
  cask "sizeup"
  cask "sketch"
  cask "sketchup"
  cask "skitch"
  cask "skype"
  cask "slack"
  cask "sonarr"
  cask "sonarr-menu"
  cask "sourcetree"
  cask "steermouse"
  cask "subler"
  cask "sublime-text"
  cask "the-unarchiver"
  cask "time-sink"
  cask "torbrowser"
  cask "tower"
  cask "transmit"
  cask "unrarx"
  cask "vimr"
  cask "vlc"
  cask "xld"

  tap "railwaycat/emacsmacport"
  cask "railwaycat/emacsmacport/emacs-mac-spacemacs-icon"

  tap "caskroom/fonts"
  cask "caskroom/fonts/font-inconsolata-lgc"

  # tap "caskroom/versions"
  # cask "caskroom/versions/safari-technology-preview"

  tap "ptb/custom"
  cask "ptb/custom/adobe-creative-cloud-2014"
  cask "ptb/custom/blankscreen"
  cask "ptb/custom/composer"
  cask "ptb/custom/enhanced-dictation"
  cask "ptb/custom/ipmenulet"
  cask "ptb/custom/pcalc-3"
  cask "ptb/custom/sketchup-pro"
  cask "ptb/custom/synergy"
  cask "ptb/custom/text-to-speech-allison"

  mas "1Password", id: 443987910
  mas "Coffitivity", id: 659901392
  mas "Growl", id: 467939042
  mas "HardwareGrowler", id: 475260933
  mas "I Love Stars", id: 402642760
  mas "Icon Slate", id: 439697913
  mas "Justnotes", id: 511230166
  mas "Keynote", id: 409183694
  mas "Numbers", id: 409203825
  mas "Pages", id: 409201541
  mas "WiFi Explorer", id: 494803304

  tap "homebrew/nginx"
  brew "homebrew/nginx/nginx-full",
    args: [
    "with-dav-ext-module",
    "with-fancyindex-module",
    "with-gzip-static",
    "with-http2",
    "with-mp4-h264-module",
    "with-passenger",
    "with-push-stream-module",
    "with-secure-link",
    "with-webdav" ]

  brew "ptb/custom/ffmpeg",
    args: [
    "with-chromaprint",
    "with-fdk-aac",
    "with-fontconfig",
    "with-freetype",
    "with-frei0r",
    "with-game-music-emu",
    "with-lame",
    "with-libass",
    "with-libbluray",
    "with-libbs2b",
    "with-libcaca",
    "with-libgsm",
    "with-libmodplug",
    "with-libsoxr",
    "with-libssh",
    "with-libvidstab",
    "with-libvorbis",
    "with-libvpx",
    "with-opencore-amr",
    "with-openh264",
    "with-openjpeg",
    "with-openssl",
    "with-opus",
    "with-pkg-config",
    "with-rtmpdump",
    "with-rubberband",
    "with-schroedinger",
    "with-sdl2",
    "with-snappy",
    "with-speex",
    "with-tesseract",
    "with-texi2html",
    "with-theora",
    "with-tools",
    "with-two-lame",
    "with-wavpack",
    "with-webp",
    "with-x264",
    "with-x265",
    "with-xvid",
    "with-xz",
    "with-yasm",
    "with-zeromq",
    "with-zimg" ]

  mas "Xcode", id: 497799835
  EOF
  }
#+end_src

*** macOS Software

#+begin_src sh
  function install_macos_sw () {
    p "Install macOS software with Homebrew"

    cd /usr/local/ && brew bundle && cd "${HOME}"

    if [ -d "/Applications/Xcode.app" ]; then
      sudo xcodebuild -license accept
    fi

    brew upgrade
  }
#+end_src

*** Link Utilities

#+begin_src sh
  function install_links () {
    p "Link System and Xcode utilities to Applications"

    brew linkapps 2> /dev/null

    cd /Applications && \
    for a in /System/Library/CoreServices/Applications/*; do
      ln -s "../..$a" . 2> /dev/null
    done

    if [ -d "/Applications/Xcode.app" ]; then
      cd /Applications && \
      for b in /Applications/Xcode.app/Contents/Applications/*; do
        ln -s "../..$b" . 2> /dev/null
      done && \
      for c in /Applications/Xcode.app/Contents/Developer/Applications/*; do
        ln -s "../..$c" . 2> /dev/null
      done
    fi

    cd "${HOME}"
  }
#+end_src

*** Node Software

#+begin_src sh
  function install_node_sw () {
    p "Install Node software"

    printf "%s\n" \
      'export NVM_DIR="/usr/local/node"' \
    >> "${HOME}/.zshenv"
    source "${HOME}/.zshenv"

    printf "%s\n" \
      '[ -s "$(brew --prefix)/opt/nvm/nvm.sh" ] && . "$(brew --prefix)/opt/nvm/nvm.sh"' \
    >> "${HOME}/.zshrc"
    source "${HOME}/.zshrc"

    nvm install node
  }
#+end_src

*** Python Software

[[http://akbaribrahim.com/managing-multiple-python-versions-with-pyenv/][Managing Multiple Python Versions with pyenv]]

#+begin_src sh
  function install_python_sw () {
    p "Install Python software"

    printf "%s\n" \
      'export PYENV_ROOT="/usr/local/python"' \
    >> "${HOME}/.zshenv"
    source "${HOME}/.zshenv"

    printf "%s\n" \
      'if which pyenv > /dev/null; then eval "$(pyenv init -)"; fi' \
    >> "${HOME}/.zshrc"
    source "${HOME}/.zshrc"

    pyenv install --skip-existing 2.7.13
    pyenv install --skip-existing 3.6.2
    pyenv global 2.7.13

    pip install --upgrade "pip" "setuptools"
#+end_src

[[https://github.com/mdhiggins/sickbeard_mp4_automator][Automatic MP4 Conversion/Tagging]]

#+begin_src sh
  pip install --upgrade "babelfish" "guessit<2" "qtfaststart" "requests" "stevedore==1.19.1" "subliminal<2"
  pip install --upgrade "requests-cache" "requests[security]"

  mkdir -m go= -p "${HOME}/.config/NzbDrone"
  git clone "https://github.com/mdhiggins/sickbeard_mp4_automator.git" \
    "${HOME}/.config/NzbDrone/scripts" --depth 1
  cd "${HOME}/.config/NzbDrone/scripts" && pyenv local 2.7.13 && cd "${HOME}"
#+end_src

#+begin_src sh
  pip install --upgrade "crudini"
#+end_src

#+begin_src sh
  }
#+end_src

*** Ruby Software

#+begin_src sh
  function install_ruby_sw () {
    p "Install Ruby software"

    printf "%s\n" \
      'export RBENV_ROOT="/usr/local/ruby"' \
    >> "${HOME}/.zshenv"
    source "${HOME}/.zshenv"

    printf "%s\n" \
      'if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi' \
    >> "${HOME}/.zshrc"
    source "${HOME}/.zshrc"

    rbenv install --skip-existing 2.4.1
    rbenv global 2.4.1

    printf "%s\n" \
      "gem: --no-document" \
    >> "${HOME}/.gemrc"

    gem update --system
    gem update
    gem install bundler
  }
#+end_src

*** install

#+begin_src sh
  function install () {
    install_caches
    install_paths
    install_brew
    install_macos_sw
    install_links
    install_node_sw
    install_python_sw
    install_ruby_sw

    which prefs
  }
#+end_src

** Preferences

*** autoping

#+begin_src sh
  function prefs_autoping () {
    p "Set autoping defaults (com.memset.autoping)"

    defaults write -app autoping Hostname -string "google.com"
    defaults write -app autoping LaunchAtLogin -bool true
    defaults write -app autoping ShowNotifications -bool true
    defaults write -app autoping ShowPacketLossText -bool true
  }
#+end_src

*** Finder

**** General

#+begin_src sh
  function prefs_finder () {
    p "Set Finder defaults (com.apple.finder)"
#+end_src

*Show these items on the desktop: Hard disks:* =on=
#+begin_src sh
  defaults write com.apple.finder ShowHardDrivesOnDesktop -bool false
#+end_src

*Show these items on the desktop: External disks:* =on=
#+begin_src sh
  defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool false
#+end_src

*Show these items on the desktop: CDs, DVDs, and iPods:* =on=
#+begin_src sh
  defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool false
#+end_src

*Show these items on the desktop: Connected servers:* =on=
#+begin_src sh
  defaults write com.apple.finder ShowMountedServersOnDesktop -bool true
#+end_src

*New Finder windows show:* =${HOME}=
#+begin_src sh
  defaults write com.apple.finder NewWindowTarget -string PfHm
  defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}/"
#+end_src

**** Advanced

*Show all filename extensions:* =on=
#+begin_src sh
  defaults write -globalDomain AppleShowAllExtensions -bool true
#+end_src

*Show warning before changing an extension:* =off=
#+begin_src sh
  defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false
#+end_src

*Show warning before removing from iCloud Drive:* =on=
#+begin_src sh
  defaults write com.apple.finder FXEnableRemoveFromICloudDriveWarning -bool true
#+end_src

*Show warning before emptying the Trash:* =on=
#+begin_src sh
  defaults write com.apple.finder WarnOnEmptyTrash -bool false
#+end_src

**** View

*Show Path Bar*
#+begin_src sh
  defaults write com.apple.finder ShowPathbar -bool true
#+end_src

*Show Status Bar*
#+begin_src sh
  defaults write com.apple.finder ShowStatusBar -bool true
#+end_src

*Customize Toolbar…*
#+begin_src sh
  defaults write com.apple.finder "NSToolbar Configuration Browser" \
    '{ "TB Display Mode" = 2;
       "TB Item Identifiers" = (
         "com.apple.finder.BACK",
         "com.apple.finder.PATH",
         "com.apple.finder.SWCH",
         "com.apple.finder.ARNG",
         "NSToolbarFlexibleSpaceItem",
         "com.apple.finder.SRCH",
         "com.apple.finder.ACTN" );
    }'
#+end_src

**** View Options

*Show Library Folder:* =on=
#+begin_src sh
  chflags nohidden "${HOME}/Library"
#+end_src

#+begin_src sh
  }
#+end_src

*** Moom

**** General

#+begin_src sh
  function prefs_moom () {
    p "Set Moom defaults (com.manytricks.Moom)"
#+end_src

*Treat drawers as part of their parent windows:* =on=
#+begin_src sh
  defaults write -app Moom "Allow For Drawers" -bool true
#+end_src

*Separate windows by* =2= *pt*
#+begin_src sh
  defaults write -app Moom "Grid Spacing" -bool true
  defaults write -app Moom "Grid Spacing: Gap" -int 2
  defaults write -app Moom "Grid Spacing: Apply To Edges" -bool false
#+end_src

*Show preferences on launch:* =off=
#+begin_src sh
  defaults write -app Moom "Stealth Mode" -bool true
#+end_src

*Run as* =faceless= *application*
#+begin_src sh
  defaults write -app Moom "Application Mode" -int 2
#+end_src

**** Mouse

=on= *Enable Move & Zoom grid with* =10= *×* =6= *cells*
#+begin_src sh
  defaults write -app Moom "Mouse Controls Grid" -bool true
  defaults write -app Moom "Mouse Controls Grid: Columns" -int 10
  defaults write -app Moom "Mouse Controls Grid: Rows" -int 6
#+end_src

=on= *Enable access to custom controls*
#+begin_src sh
  defaults write -app Moom "Mouse Controls Include Custom Controls" -bool true
#+end_src

=on= *Bring moomed windows to the front automatically*
#+begin_src sh
  defaults write -app Moom "Mouse Controls Auto-Activate Window" -bool true
#+end_src

=off= *Move & Zoom when dragging a window to a display edge or corner*
#+begin_src sh
  defaults write -app Moom "Snap" -bool false
#+end_src

**** Custom

#+begin_src sh
  defaults write -app Moom "Custom Controls" -array-add \
    '{ Action = 19; "Relative Frame" = "{{0, 0.33333}, {0.5, 0.66666}}"; }'
  defaults write -app Moom "Custom Controls" -array-add \
    '{ Action = 19; "Relative Frame" = "{{0, 0}, {0.3, 0.33333}}"; }'
  defaults write -app Moom "Custom Controls" -array-add \
    '{ Action = 19; "Relative Frame" = "{{0.4, 0.33333}, {0.3, 0.66666}}"; }'
  defaults write -app Moom "Custom Controls" -array-add \
    '{ Action = 19; "Relative Frame" = "{{0.3, 0}, {0.4, 0.33333}}"; }'
  defaults write -app Moom "Custom Controls" -array-add \
    '{ Action = 19; "Relative Frame" = "{{0.7, 0.66666}, {0.3, 0.33333}}"; }'
  defaults write -app Moom "Custom Controls" -array-add \
    '{ Action = 19; "Relative Frame" = "{{0.7, 0.33333}, {0.3, 0.33333}}"; }'
  defaults write -app Moom "Custom Controls" -array-add \
    '{ Action = 19; "Relative Frame" = "{{0.7, 0}, {0.3, 0.33333}}"; }'
#+end_src

*Define window sizes using* =10= *×* =6= *cells*
#+begin_src sh
  defaults write -app Moom "Configuration Grid: Columns" -int 10
  defaults write -app Moom "Configuration Grid: Rows" -int 6
#+end_src

#+begin_src sh
  }
#+end_src

*** nvALT

**** General

#+begin_src sh
  function prefs_nvalt () {
    p "Set nvALT defaults (net.elasticthreads.nv)"
#+end_src

*List Text Size:* =Small=
#+begin_src sh
  defaults write -app nvALT TableFontPointSize -int 11
#+end_src

*Bring-to-Front Hotkey:* =(None)=
#+begin_src sh
  defaults write -app nvALT AppActivationKeyCode -int -1
  defaults write -app nvALT AppActivationModifiers -int -1
#+end_src

*Auto-select notes by title when searching:* =on=
#+begin_src sh
  defaults write -app nvALT AutoCompleteSearches -bool true
#+end_src

*Confirm note deletion:* =on=
#+begin_src sh
  defaults write -app nvALT ConfirmNoteDeletion -bool true
#+end_src

*Quit when closing window:* =off=
#+begin_src sh
  defaults write -app nvALT QuitWhenClosingMainWindow -bool false
#+end_src

*Show menu bar icon:* =on=
#+begin_src sh
  defaults write -app nvALT StatusBarItem -bool true
#+end_src

*Hide Dock Icon*
#+begin_src sh
  defaults write -app nvALT ShowDockIcon -bool false
#+end_src

**** Editing

*Styled Text: Copy basic styles from other apps:* =off=
#+begin_src sh
  defaults write -app nvALT PastePreservesStyle -bool false
#+end_src

*Spelling: Check as you type:* =off=
#+begin_src sh
  defaults write -app nvALT CheckSpellingInNoteBody -bool false
#+end_src

*Tab Key:* =Indent lines=
#+begin_src sh
  defaults write -app nvALT TabKeyIndents -bool true
#+end_src

*Soft tabs (spaces):* =on=
#+begin_src sh
  defaults write -app nvALT UseSoftTabs -bool true
#+end_src

*Links: Make URLs clickable links:* =on=
#+begin_src sh
  defaults write -app nvALT MakeURLsClickable -bool true
#+end_src

*Links: Suggest titles for note-links:* =off=
#+begin_src sh
  defaults write -app nvALT AutoSuggestLinks -bool false
#+end_src

*URL Import: Convert imported URLs to Markdown:* =off=
#+begin_src sh
  defaults write -app nvALT UseMarkdownImport -bool false
#+end_src

*URL Import: Process with Readability:* =off=
#+begin_src sh
  defaults write -app nvALT UseReadability -bool false
#+end_src

*Direction: Right-To-Left (RTL):* =off=
#+begin_src sh
  defaults write -app nvALT rtl -bool false
#+end_src

*Auto-pair:* =on=
#+begin_src sh
  defaults write -app nvALT UseAutoPairing -bool true
#+end_src

*External editor:* =Emacs.app=
#+begin_src sh
  defaults write -app nvALT DefaultEEIdentifier -string "org.gnu.Emacs"
  defaults write -app nvALT UserEEIdentifiers -array "com.apple.TextEdit" "org.gnu.Emacs"
#+end_src

**** Fonts & Colors

*Body Font:* =InconsolataLGC 13=
#+begin_src sh
  defaults write -app nvALT NoteBodyFont \
    -data 040b73747265616d747970656481e803840140848484064e53466f6e741e8484084e534f626a65637400858401692884055b3430635d060000001e000000fffe49006e0063006f006e0073006f006c006100740061004c004700430000008401660d8401630098019800980086
#+end_src

*Search Highlight:* =on=
#+begin_src sh
  defaults write -app nvALT HighlightSearchTerms -bool true
#+end_src

*Search Highlight:* =#CCFFCC=
#+begin_src sh
  defaults write -app nvALT SearchTermHighlightColor \
    -data 040b73747265616d747970656481e803840140848484074e53436f6c6f72008484084e534f626a65637400858401630184046666666683cdcc4c3f0183cdcc4c3f0186
#+end_src

*Foreground Text:* =#CCCCCC=
#+begin_src sh
  defaults write -app nvALT ForegroundTextColor \
    -data 040b73747265616d747970656481e803840140848484074e53436f6c6f72008484084e534f626a65637400858401630184046666666683cdcc4c3f83cdcc4c3f83cdcc4c3f0186
#+end_src

*Background:* =#1A1A1A=
#+begin_src sh
  defaults write -app nvALT BackgroundTextColor \
    -data 040b73747265616d747970656481e803840140848484074e53436f6c6f72008484084e534f626a65637400858401630184046666666683d1d0d03d83d1d0d03d83d1d0d03d0186
#+end_src

*Always Show Grid Lines in Notes List:* =on=
#+begin_src sh
  defaults write -app nvALT ShowGrid -bool true
#+end_src

*Alternating Row Colors:* =on=
#+begin_src sh
  defaults write -app nvALT AlternatingRows -bool true
#+end_src

*Use nvALT Scrollbars:* =off=
#+begin_src sh
  defaults write -app nvALT UseETScrollbarsOnLion -bool false
#+end_src

*Keep Note Body Width Readable:* =on=
#+begin_src sh
  defaults write -app nvALT KeepsMaxTextWidth -bool true
#+end_src

*Max. Note Body Width:* =650= *pixels*
#+begin_src sh
  defaults write -app nvALT NoteBodyMaxWidth -int 650
#+end_src

**** View

*Switch to Vertical Layout*
#+begin_src sh
  defaults write -app nvALT HorizontalLayout -bool false
#+end_src

*Columns* > =Title= =Tags=
#+begin_src sh
  defaults write -app nvALT NoteAttributesVisible -array "Title" "Tags"
#+end_src

*Sort By* > =Date Modified=
#+begin_src sh
  defaults write -app nvALT TableIsReverseSorted -bool true
  defaults write -app nvALT TableSortColumn -string "Date Modified"
#+end_src

*Show Note Previews in Title*
#+begin_src sh
  defaults write -app nvALT TableColumnsHaveBodyPreview -bool true
#+end_src

#+begin_src sh
  }
#+end_src

*** Safari

**** General

#+begin_src sh
  function prefs_safari () {
    p "Set Safari defaults (com.apple.Safari)"
#+end_src

*Safari opens with:* =A new window=
#+begin_src sh
  defaults write -app Safari AlwaysRestoreSessionAtLaunch -bool false
  defaults write -app Safari OpenPrivateWindowWhenNotRestoringSessionAtLaunch -bool false
#+end_src

*New windows open with:* =Empty Page=
#+begin_src sh
  defaults write -app Safari NewWindowBehavior -int 1
#+end_src

*New tabs open with:* =Empty Page=
#+begin_src sh
  defaults write -app Safari NewTabBehavior -int 1
#+end_src

=off= *Open “safe” files after downloading*
#+begin_src sh
  defaults write -app Safari AutoOpenSafeDownloads -bool false
#+end_src

**** Tabs

*Open pages in tabs instead of windows:* =Always=
#+begin_src sh
  defaults write -app Safari TabCreationPolicy -int 2
#+end_src

**** AutoFill

=off= *Using info from my contacts*
#+begin_src sh
  defaults write -app Safari AutoFillFromAddressBook -bool false
#+end_src

=on= *User names and passwords*
#+begin_src sh
  defaults write -app Safari AutoFillPasswords -bool true
#+end_src

=off= *Credit cards*
#+begin_src sh
  defaults write -app Safari AutoFillCreditCardData -bool false
#+end_src

=off= *Other forms*
#+begin_src sh
  defaults write -app Safari AutoFillMiscellaneousForms -bool false
#+end_src

**** Search

=on= *Include search engine suggestions*
#+begin_src sh
  defaults write -app Safari SuppressSearchSuggestions -bool false
#+end_src

*Smart Search Field:* =off= *Include Safari Suggestions*
#+begin_src sh
  defaults write -app Safari UniversalSearchEnabled -bool false
#+end_src

*Smart Search Field:* =on= *Enable Quick Website Search*
#+begin_src sh
  defaults write -app Safari WebsiteSpecificSearchEnabled -bool true
#+end_src

*Smart Search Field:* =on= *Preload Top Hit in the background*
#+begin_src sh
  defaults write -app Safari PreloadTopHit -bool true
#+end_src

=off= *Show Favorites*
#+begin_src sh
  defaults write -app Safari ShowFavoritesUnderSmartSearchField -bool false
#+end_src

**** Privacy

*Website use of location services:* =Deny without prompting=
#+begin_src sh
  defaults write -app Safari SafariGeolocationPermissionPolicy -int 0
#+end_src

*Website tracking:* =on= *Ask websites not to track me*
#+begin_src sh
  defaults write -app Safari SendDoNotTrackHTTPHeader -bool true
#+end_src

*Apple Pay:* =on= *Allow websites to check if Apple Pay is set up*
#+begin_src sh
  defaults write -app Safari "com.apple.Safari.ContentPageGroupIdentifier.WebKit2ApplePayCapabilityDisclosureAllowed" -bool true
#+end_src

**** Notifications

=off= *Allow websites to ask for permission to send push notifications*
#+begin_src sh
  defaults write -app Safari CanPromptForPushNotifications -bool false
#+end_src

**** Advanced

*Smart Search Field:* =on= *Show full website address*
#+begin_src sh
  defaults write -app Safari ShowFullURLInSmartSearchField -bool true
#+end_src

*Default encoding:* =Unicode (UTF-8)=
#+begin_src sh
  defaults write -app Safari WebKitDefaultTextEncodingName -string "utf-8"
  defaults write -app Safari "com.apple.Safari.ContentPageGroupIdentifier.WebKit2DefaultTextEncodingName" -string "utf-8"
#+end_src

=on= *Show Develop menu in menu bar*
#+begin_src sh
  defaults write -app Safari IncludeDevelopMenu -bool true
  defaults write -app Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true
  defaults write -app Safari "com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled" -bool true
#+end_src

**** View

*Show Favorites Bar*
#+begin_src sh
  defaults write -app Safari "ShowFavoritesBar-v2" -bool true
#+end_src

*Show Tab Bar*
#+begin_src sh
  defaults write -app Safari AlwaysShowTabBar -bool true
#+end_src

*Show Status Bar*
#+begin_src sh
  defaults write -app Safari ShowStatusBar -bool true
  defaults write -app Safari ShowStatusBarInFullScreen -bool true
#+end_src

#+begin_src sh
  }
#+end_src

*** System

**** General

#+begin_src sh
  function prefs_general () {
    p "Set System defaults"
#+end_src

*Appearance:* =Graphite= *For Buttons, Menus, and Windows*
#+begin_src sh
  defaults write -globalDomain AppleAquaColorVariant -int 6
#+end_src

=on= *Use dark menu bar and Dock*
#+begin_src sh
  defaults write -globalDomain AppleInterfaceStyle -string Dark
#+end_src

=off= *Automatically hide and show the menu bar*
#+begin_src sh
  defaults write -globalDomain "_HIHideMenuBar" -bool false
#+end_src

*Highlight color:* =#99CC99= =Other…=
#+begin_src sh
  defaults write -globalDomain AppleHighlightColor -string "0.600000 0.800000 0.600000"
#+end_src

*Sidebar icon size:* =Small=
#+begin_src sh
  defaults write -globalDomain NSTableViewDefaultSizeMode -int 1
#+end_src

*Show scroll bars:* =Always=
#+begin_src sh
  defaults write -globalDomain AppleShowScrollBars -string Always
#+end_src

*Click in the scroll bar to:* =Jump to the next page=
#+begin_src sh
  defaults write -globalDomain AppleScrollerPagingBehavior -bool false
#+end_src

=on= *Ask to keep changes when closing documents*
#+begin_src sh
  defaults write -globalDomain NSCloseAlwaysConfirmsChanges -bool true
#+end_src

=on= *Close windows when quitting an app*
#+begin_src sh
  defaults write -globalDomain NSQuitAlwaysKeepsWindows -bool false
#+end_src

*Recent items:* =None= *Documents, Apps, and Servers*
#+begin_src sh
  osascript << EOF
    tell application "System Events"
      tell appearance preferences
        set recent documents limit to 0
        set recent applications limit to 0
        set recent servers limit to 0
      end tell
    end tell
  EOF
#+end_src

=on= *Allow Handoff between this Mac and your iCloud devices*
#+begin_src sh
  defaults -currentHost write com.apple.coreservices.useractivityd ActivityAdvertisingAllowed -bool true
  defaults -currentHost write com.apple.coreservices.useractivityd ActivityReceivingAllowed -bool true
#+end_src

=on= *Use LCD font smoothing when available*
#+begin_src sh
  defaults -currentHost delete -globalDomain AppleFontSmoothing 2> /dev/null
#+end_src

#+begin_src sh
  }
#+end_src

**** Desktop & Screen Saver: Screen Saver

#+begin_src sh
  function prefs_screensaver () {
#+end_src

*Start after:* =Never=
#+begin_src sh
  defaults -currentHost write com.apple.screensaver idleTime -int 0
#+end_src

*Hot Corners…: Top Left:* =⌘ Mission Control=
#+begin_src sh
  defaults write com.apple.dock "wvous-tl-corner" -int 2
  defaults write com.apple.dock "wvous-tl-modifier" -int 1048576
#+end_src

*Hot Corners…: Bottom Left:* =Put Display to Sleep=
#+begin_src sh
  defaults write com.apple.dock "wvous-bl-corner" -int 10
  defaults write com.apple.dock "wvous-bl-modifier" -int 0
#+end_src

#+begin_src sh
  }
#+end_src

**** Dock

#+begin_src sh
  function prefs_dock () {
#+end_src

*Size:* =32=
#+begin_src sh
  defaults write com.apple.dock tilesize -int 32
#+end_src

=off= *Magnification*
#+begin_src sh
  defaults write com.apple.dock magnification -bool false
  defaults write com.apple.dock largesize -int 64
#+end_src

*Position on screen:* =Right=
#+begin_src sh
  defaults write com.apple.dock orientation -string right
#+end_src

*Minimize windows using:* =Scale effect=
#+begin_src sh
  defaults write com.apple.dock mineffect -string scale
#+end_src

*Prefer tabs when opening documents:* =Always=
#+begin_src sh
  defaults write -globalDomain AppleWindowTabbingMode -string always
#+end_src

=off= *Double-click a window’s title bar to* =None=
#+begin_src sh
  defaults write -globalDomain AppleActionOnDoubleClick -string None
#+end_src

=on= *Minimize windows into application icon*
#+begin_src sh
  defaults write com.apple.dock "minimize-to-application" -bool true
#+end_src

=off= *Animate opening applications*
#+begin_src sh
  defaults write com.apple.dock launchanim -bool false
#+end_src

=on= *Automatically hide and show the Dock*
#+begin_src sh
  defaults write com.apple.dock autohide -bool true
#+end_src

=on= *Show indicators for open applications*
#+begin_src sh
  defaults write com.apple.dock "show-process-indicators" -bool true
#+end_src

#+begin_src sh
  }
#+end_src

**** Security & Privacy

#+begin_src sh
  function prefs_security () {
#+end_src

General: =on= *Require password* =5 seconds= *after sleep or screen saver begins*
#+begin_src sh
  defaults write com.apple.screensaver askForPassword -int 1
  defaults write com.apple.screensaver askForPasswordDelay -int 5
#+end_src

FileVault: =Turn On FileVault=
#+begin_src sh
  p "Enable FileVault"

  sudo fdesetup enable
#+end_src

#+begin_src sh
  }
#+end_src

**** Energy Saver: Power

#+begin_src sh
  function prefs_power () {
#+end_src

*Turn display off after:* =20 min=
#+begin_src sh
  sudo pmset -c displaysleep 20
#+end_src

=on= *Prevent computer from sleeping automatically when the display is off*
#+begin_src sh
  sudo pmset -c sleep 0
#+end_src

=60 min= *Put hard disks to sleep when possible*
#+begin_src sh
  sudo pmset -c disksleep 60
#+end_src

=on= *Wake for network access*
#+begin_src sh
  sudo pmset -c womp 1
#+end_src

=on= *Start up automatically after a power failure*
#+begin_src sh
  sudo pmset -c autorestart 1
#+end_src

=on= *Enable Power Nap*
#+begin_src sh
  sudo pmset -c powernap 1
#+end_src

#+begin_src sh
  }
#+end_src

**** Energy Saver: UPS

#+begin_src sh
  function prefs_ups () {
#+end_src

*Turn display off after:* =2 min=
#+begin_src sh
  sudo pmset -u displaysleep 2
#+end_src

=on= *Slightly dim the display when using this power source*
#+begin_src sh
  sudo pmset -u lessbright 1
#+end_src

=on= *Shut down the computer after using the UPS battery for:* =5 min=
#+begin_src sh
  sudo pmset -u haltafter 5
#+end_src

=off= *Shut down the computer when the time remaining on the UPS battery is:*
#+begin_src sh
  sudo pmset -u haltremain -1
#+end_src

=off= *Shut down the computer when the UPS battery level is below:*
#+begin_src sh
  sudo pmset -u haltlevel -1
#+end_src

#+begin_src sh
  }
#+end_src

**** Keyboard: Keyboard

#+begin_src sh
  function prefs_modkeys () {
    defaults -currentHost write -globalDomain \
      "com.apple.keyboard.modifiermapping.1452-591-0" -array-add \
        '{ HIDKeyboardModifierMappingDst = 0;
          HIDKeyboardModifierMappingSrc = 30064771129;
        }'
  }
#+end_src

**** Keyboard: Text

#+begin_src sh
  function prefs_text () {
#+end_src

#+begin_src sh
  defaults write -globalDomain \
    NSUserDictionaryReplacementItems -array-add \
      '{ on = 1;
         replace = "**";
         with = "\\Ud83d\\Ude18\\Ud83d\\Ude18\\Ud83d\\Ude18\\Ud83d\\Ude0d";
      }'
#+end_src

=off= *Capitalize words automatically*
#+begin_src sh
  defaults write -globalDomain NSAutomaticCapitalizationEnabled -bool false
#+end_src

=off= *Add period with double-space*
#+begin_src sh
  defaults write -globalDomain NSAutomaticPeriodSubstitutionEnabled -bool false
#+end_src

=off= *Use smart quotes and dashes*
#+begin_src sh
  defaults write -globalDomain NSAutomaticQuoteSubstitutionEnabled -bool false
#+end_src

#+begin_src sh
  }
#+end_src

**** Keyboard: Shortcuts

#+begin_src sh
  function prefs_shortcuts () {
#+end_src

*Spotlight:* =off= *Show Spotlight search*
#+begin_src sh
  /usr/libexec/PlistBuddy -c "set ':AppleSymbolicHotKeys:64:enabled' false" \
    "${HOME}/Library/Preferences/com.apple.symbolichotkeys.plist"
#+end_src

*Spotlight:* =off= *Show Finder search window*
#+begin_src sh
  /usr/libexec/PlistBuddy -c "set ':AppleSymbolicHotKeys:65:enabled' false" \
    "${HOME}/Library/Preferences/com.apple.symbolichotkeys.plist"
#+end_src

#+begin_src sh
  }
#+end_src

**** Keyboard: Dictation

#+begin_src sh
  function prefs_dictation () {
#+end_src

*Dictation:* =On=
#+begin_src sh
  defaults read com.apple.speech.recognition.AppleSpeechRecognition.prefs \
    DictationIMMasterDictationEnabled -bool true
#+end_src

*Shortcut:* =Press Either Command Key Twice=
#+begin_src sh
  defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys \
    -dict-add 164 '{ enabled = 1; value = { parameters = ( 1048576, 18446744073708503039 ); type = modifier; }; }'
#+end_src

#+begin_src sh
  }
#+end_src

**** Mouse

#+begin_src sh
  function prefs_mouse () {
#+end_src

=off= *Scroll direction: Natural*
#+begin_src sh
  defaults write -globalDomain com.apple.swipescrolldirection -bool false
#+end_src

#+begin_src sh
  }
#+end_src

**** Trackpad: Point & Click

#+begin_src sh
  function prefs_trackpad () {
#+end_src

=on= *Tap to click*
#+begin_src sh
  defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
  defaults -currentHost write -globalDomain com.apple.mouse.tapBehavior -int 1
#+end_src

#+begin_src sh
  }
#+end_src

**** Sound: Sound Effects

#+begin_src sh
  function prefs_sound () {
#+end_src

*Select an alert sound:* =Sosumi=
#+begin_src sh
  defaults write -globalDomain "com.apple.sound.beep.sound" -string "/System/Library/Sounds/Sosumi.aiff"
#+end_src

=off= *Play user interface sound effects*
#+begin_src sh
  defaults write -globalDomain "com.apple.sound.uiaudio.enabled" -int 0
#+end_src

=off= *Play feedback when volume is changed*
#+begin_src sh
  defaults write -globalDomain "com.apple.sound.beep.feedback" -int 0
#+end_src

#+begin_src sh
  }
#+end_src

**** App Store

#+begin_src sh
  function prefs_mas () {
#+end_src

=on= *Install app updates*
#+begin_src sh
  sudo defaults write /Library/Preferences/com.apple.commerce AutoUpdate -bool true
#+end_src

=on= *Install macOS updates*
#+begin_src sh
  sudo defaults write /Library/Preferences/com.apple.commerce AutoUpdateRestartRequired -bool true
#+end_src

#+begin_src sh
  }
#+end_src

**** Network: Wi-Fi

=off= Show Wi-Fi status in menu bar
#+begin_src sh
  function prefs_wifi () {
    defaults -currentHost write com.apple.systemuiserver dontAutoLoad -array-add "/System/Library/CoreServices/Menu Extras/AirPort.menu"
  }
#+end_src

**** Sharing: File Sharing

*Shared Folders:* =None=
#+begin_src sh
  function prefs_sharing () {
    sudo dscl . -delete "/SharePoints"
  }
#+end_src

**** Users & Groups: Guest User

=off= Allow guests to log in to this computer
#+begin_src sh
  function prefs_guest () {
    sudo sysadminctl -guestAccount off
  }
#+end_src

**** Users & Groups: Login Options

*Display login window as:* =Name and password=
#+begin_src sh
  function prefs_login () {
    sudo defaults write /Library/Preferences/com.apple.loginwindow SHOWFULLNAME -bool true
  }
#+end_src

**** Siri

#+begin_src sh
  function prefs_siri () {
#+end_src

*Siri Voice:* =American (Male)=
#+begin_src sh
  defaults write com.apple.assistant.backedup "Output Voice" \
    '{ Custom = 1;
       Footprint = 0;
       Gender = 1;
       Language = "en-US";
    }'
#+end_src

=off= Show Siri in menu bar
#+begin_src sh
  defaults write com.apple.Siri StatusMenuVisible -bool false
#+end_src

#+begin_src sh
  }
#+end_src

**** Date & Time: Clock

=off= *Show date and time in menu bar*

=on= *Time options: Display the time with seconds*

=on= *Time options: Show AM/PM*

=on= *Date options: Show the day of the week*

=on= *Date options: Show date*
#+begin_src sh
  function prefs_clock () {
    defaults -currentHost write com.apple.systemuiserver dontAutoLoad -array-add "/System/Library/CoreServices/Menu Extras/Clock.menu"
    defaults write com.apple.menuextra.clock DateFormat -string "EEE MMM d  h:mm:ss a"
  }
#+end_src

**** Accessibility: Display

=on= *Reduce transparency*
#+begin_src sh
  function prefs_accessibility () {
    defaults write com.apple.universalaccess reduceTransparency -bool true
  }
#+end_src

**** Accessibility: Speech

# System Voice: Allison
#+begin_src sh
  function prefs_speech () {
    if [ -d "/System/Library/Speech/Voices/Allison.SpeechVoice" ]; then
      defaults write com.apple.speech.voice.prefs VisibleIdentifiers '{ "com.apple.speech.synthesis.voice.allison.premium" = 1; }'
      defaults write com.apple.speech.voice.prefs SelectedVoiceName -string Allison
      defaults write com.apple.speech.voice.prefs SelectedVoiceCreator -int 1886745202
      defaults write com.apple.speech.voice.prefs SelectedVoiceID -int 184555197
    fi
  }
#+end_src

#+begin_src sh
  function prefs_restart () {
    killall cfprefsd
    osascript -e 'tell app "Finder" to quit'
    killall Finder
  }
#+end_src

*** VLC

#+begin_src sh
  function prefs_vlc () {
    p "Set VLC defaults (org.videolan.vlc)"

    defaults write -app VLC SUEnableAutomaticChecks -bool true
    defaults write -app VLC SUHasLaunchedBefore -bool true
    defaults write -app VLC SUSendProfileInfo -bool true

    if [ ! -d "${HOME}/Library/Preferences/org.videolan.vlc" ]; then
      mkdir -m go= -p "${HOME}/Library/Preferences/org.videolan.vlc"
    fi

    cat > "${HOME}/Library/Preferences/org.videolan.vlc/vlcrc" << EOF
  avcodec-hw=vda
  macosx-appleremote=0
  macosx-continue-playback=1
  macosx-nativefullscreenmode=1
  macosx-pause-minimized=1
  macosx-video-autoresize=0
  metadata-network-access=1
  spdif=1
  sub-language=English
  subsdec-encoding=UTF-8
  volume-save=0
  EOF
  }
#+end_src

*** prefs

#+begin_src sh
  function prefs () {
    prefs_autoping
    prefs_finder
    prefs_moom
    prefs_nvalt
    prefs_safari

    prefs_general
    prefs_screensaver
    prefs_dock
    prefs_security
    prefs_power
    prefs_ups
    prefs_modkeys
    prefs_text
    prefs_shortcuts
    prefs_dictation
    prefs_mouse
    prefs_trackpad
    prefs_sound
    prefs_mas
    prefs_wifi
    prefs_sharing
    prefs_guest
    prefs_login
    prefs_siri
    prefs_clock
    prefs_accessibility
    prefs_speech

    prefs_restart

    prefs_vlc

    which config
  }
#+end_src

** Configuration

*** App Store

#+begin_src sh
  function config_mas () {
    p "Save App Store packages"

    cat > "/usr/local/bin/mas_save" << EOF
  #!/bin/sh
  DIR="/Users/Shared/App Store"
  MAS="\$(getconf DARWIN_USER_CACHE_DIR)com.apple.appstore"

  mkdir -m go= -p "\${DIR}"
  for a in \$(find "\${MAS}" -iname "[0-9]*" -type d); do
    b="\${DIR}/\$(basename \$a)"
    mkdir -m go= -p "\${b}"
    end=\$(( \$(date +%s) + 5 ))
    while [ \$(date +%s) -lt \$end ]; do
      for c in \${a}/*; do
        d="\$(basename \$c)"
        if [ ! -e "\${b}/\${d}" ]; then
          ln "\${a}/\${d}" "\${b}/\${d}"
        fi
      done
    done
  done
  EOF

    chmod a+x "/usr/local/bin/mas_save"
    rehash
#+end_src

#+begin_src sh
  mkdir -m go= -p "${HOME}/Library/LaunchAgents"
  launchctl unload "${HOME}/Library/LaunchAgents/com.github.ptb.mas_save.plist" 2> /dev/null
  printf "%s\n" \
    "add ':KeepAlive' bool false" \
    "add ':Label' string 'com.github.ptb.mas_save'" \
    "add ':Program' string '/usr/local/bin/mas_save'" \
    "add ':RunAtLoad' bool true" \
    "add ':WatchPaths' array" \
    "add ':WatchPaths:0' string '$(getconf DARWIN_USER_CACHE_DIR)com.apple.appstore'" \
  | while IFS=$'\t' read a; do
    /usr/libexec/PlistBuddy "${HOME}/Library/LaunchAgents/com.github.ptb.mas_save.plist" -c "${a}" &> /dev/null
  done
#+end_src

#+begin_src sh
  }
#+end_src

*** Atom

Inspiration: [[https://evanhahn.com/atom-apm-install-list/][@EvanHahn]]

#+begin_src sh
  function config_atom () {
    p "Install Atom packages"

    for a in \
      "MagicPython" \
      "atom-beautify" \
      "atom-css-comb" \
      "atom-jade" \
      "atom-wallaby" \
      "autoclose-html" \
      "autocomplete-python" \
      "busy-signal" \
      "double-tag" \
      "editorconfig" \
      "ex-mode" \
      "file-icons" \
      "git-plus" \
      "git-time-machine" \
      "highlight-selected" \
      "intentions" \
      "language-docker" \
      "language-jade" \
      "language-javascript-jsx" \
      "language-lisp" \
      "language-slim" \
      "linter" \
      "linter-eslint" \
      "linter-rubocop" \
      "linter-ui-default" \
      "python-yapf" \
      "react" \
      "riot" \
      "sort-lines" \
      "term3" \
      "tomorrow-night-eighties-syntax" \
      "tree-view-open-files" \
      "vim-mode" \
      "vim-mode-zz" \
      "vim-surround" \
    ; do
      apm install "${a}"
    done

  cat > "${HOME}/.atom/packages/tomorrow-night-eighties-syntax/styles/colors.less" \
    << EOF
  @background: #191919;
  @current-line: #333333;
  @selection: #4c4c4c;
  @foreground: #cccccc;
  @comment: #999999;
  @red: #f27f7f;
  @orange: #ff994c;
  @yellow: #ffcc66;
  @green: #99cc99;
  @aqua: #66cccc;
  @blue: #6699cc;
  @purple: #cc99cc;
  EOF
  }
#+end_src

*** BBEdit

#+begin_src sh
  function config_bbedit () {
    if [ -d "/Applications/BBEdit.app" ]; then
      p "Install BBEdit tools"

      cd /usr/local/bin && \
      ln ../../../Applications/BBEdit.app/Contents/Helpers/bbdiff bbdiff && \
      ln ../../../Applications/BBEdit.app/Contents/Helpers/bbedit_tool bbedit && \
      ln ../../../Applications/BBEdit.app/Contents/Helpers/bbfind bbfind && \
      ln ../../../Applications/BBEdit.app/Contents/Helpers/bbresults bbresults && \
      cd "${HOME}"
    fi
  }
#+end_src

*** Desktop

#+begin_src sh
  function config_desktop () {
    p "Set Desktop preferences"
#+end_src

*Desktop: Solid Colors: Custom Color…* =Solid Black=
#+begin_src sh
  sudo rm "/Library/Caches/com.apple.desktop.admin.png"
  base64 -D > "/Library/Caches/com.apple.desktop.admin.png" <<< "iVBORw0KGgoAAAANSUhEUgAAAIAAAACAAQAAAADrRVxmAAAAGElEQVR4AWOgMxgFo2AUjIJRMApGwSgAAAiAAAH3bJXBAAAAAElFTkSuQmCC"

  osascript << EOF
    tell application "System Events"
      set a to POSIX file "/Library/Caches/com.apple.desktop.admin.png"
      set b to a reference to every desktop
      repeat with c in b
        set picture of c to a
      end repeat
    end tell
  EOF
#+end_src

*Screen Saver:* =BlankScreen=
#+begin_src sh
  if [ -e "/Library/Screen Savers/BlankScreen.saver" ]; then
    p "Set Screen Saver preferences"

    defaults -currentHost write com.apple.screensaver moduleDict \
      '{ moduleName = "BlankScreen"; path = "/Library/Screen Savers/BlankScreen.saver"; type = 0; }'
  fi
#+end_src

#+begin_src sh
  }
#+end_src

*** Dock

#+begin_src sh
  function config_dock () {
    p "Set Dock preferences"

    defaults write com.apple.dock "autohide-delay" -float 0
    defaults write com.apple.dock "autohide-time-modifier" -float 0.5

    defaults delete com.apple.dock "persistent-apps"

    for app in \
      "nvALT" \
      "Mail" \
      "Safari" \
      "Messages" \
      "Emacs" \
      "Atom" \
      "Utilities/Terminal" \
      "System Preferences" \
      "PCalc" \
      "iTunes" \
      "VLC" \
    ; do
      defaults write com.apple.dock "persistent-apps" -array-add \
        "<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/${app}.app/</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>"
    done

    defaults delete com.apple.dock "persistent-others"

    osascript -e 'tell app "Dock" to quit'
  }
#+end_src

*** Emacs

**** Download [[http://spacemacs.org/][Spacemacs]]

#+begin_src sh
function config_emacs () {
  p "Configure Emacs"

  mkdir -m go= -p "${HOME}/.emacs.d" \
    && curl --compressed --location --silent \
      "https://github.com/syl20bnr/spacemacs/archive/master.tar.gz" \
    | tar -C "${HOME}/.emacs.d" --strip-components 1 -xf -
  mkdir -m go= -p "${HOME}/.emacs.d/private/ptb"
#+end_src

**** Create =~/.spacemacs=

#+begin_src sh
  cat > "${HOME}/.spacemacs" << EOF
  (defun dotspacemacs/layers ()
    (setq-default
      dotspacemacs-configuration-layers '(
        auto-completion
        (colors :variables
          colors-colorize-identifiers 'variables)
        dash
        deft
        docker
        emacs-lisp
        evil-cleverparens
        git
        github
        helm
        html
        ibuffer
        imenu-list
        javascript
        markdown
        nginx
        (org :variables
          org-enable-github-support t)
        (osx :variables
          osx-use-option-as-meta nil)
        ptb
        react
        ruby
        ruby-on-rails
        search-engine
        semantic
        shell-scripts
        (spell-checking :variables
          spell-checking-enable-by-default nil)
        syntax-checking
        (version-control :variables
          version-control-diff-side 'left)
        vim-empty-lines
      )
      dotspacemacs-excluded-packages '(org-bullets)
    )
  )

  (defun dotspacemacs/init ()
    (setq-default
      dotspacemacs-startup-banner nil
      dotspacemacs-startup-lists nil
      dotspacemacs-scratch-mode 'org-mode
      dotspacemacs-themes '(sanityinc-tomorrow-eighties)
      dotspacemacs-default-font '(
        "Inconsolata LGC"
        :size 13
        :weight normal
        :width normal
        :powerline-scale 1.1)
      dotspacemacs-loading-progress-bar nil
      dotspacemacs-active-transparency 100
      dotspacemacs-inactive-transparency 100
      dotspacemacs-line-numbers t
      dotspacemacs-whitespace-cleanup 'all
    )
  )

  (defun dotspacemacs/user-init ())
  (defun dotspacemacs/user-config ())
  EOF
#+end_src

**** Create =~/.emacs.d/private/ptb/config.el=

#+begin_src sh
  cat > "${HOME}/.emacs.d/private/ptb/config.el" << EOF
  (setq
    default-frame-alist '(
      (top . 22)
      (left . 1790)
      (height . 40)
      (width . 91)
      (vertical-scroll-bars . right))
    initial-frame-alist (copy-alist default-frame-alist)

    deft-directory "~/Dropbox/Notes"
    focus-follows-mouse t
    mouse-wheel-follow-mouse t
    mouse-wheel-scroll-amount '(1 ((shift) . 1))
    purpose-display-at-right 20
    recentf-max-saved-items 5
    scroll-step 1
    system-uses-terminfo nil

    ibuffer-formats '(
      (mark modified read-only " "
      (name 18 18 :left :elide)))

    ibuffer-shrink-to-minimum-size t
    ibuffer-always-show-last-buffer nil
    ibuffer-sorting-mode 'recency
    ibuffer-use-header-line nil
    x-select-enable-clipboard nil)

  (global-linum-mode t)
  (recentf-mode t)
  (x-focus-frame nil)
  (with-eval-after-load 'org
    (org-babel-do-load-languages
      'org-babel-load-languages '(
        (ruby . t)
        (shell . t)
      )
    )
  )
  EOF
#+end_src

**** Create =~/.emacs.d/private/ptb/funcs.el=

#+begin_src sh
  cat > "${HOME}/.emacs.d/private/ptb/funcs.el" << EOF
  (defun is-useless-buffer (buffer)
    (let ((name (buffer-name buffer)))
      (and (= ?* (aref name 0))
          (string-match "^\\**" name))))

  (defun kill-useless-buffers ()
    (interactive)
    (loop for buffer being the buffers
          do (and (is-useless-buffer buffer) (kill-buffer buffer))))

  (defun org-babel-tangle-hook ()
    (add-hook 'after-save-hook 'org-babel-tangle))

  (add-hook 'org-mode-hook #'org-babel-tangle-hook)

  (defun ptb/new-untitled-buffer ()
    "Create a new untitled buffer in the current frame."
    (interactive)
    (let
      ((buffer "Untitled-") (count 1))
      (while
        (get-buffer (concat buffer (number-to-string count)))
        (setq count (1+ count)))
      (switch-to-buffer
      (concat buffer (number-to-string count))))
    (org-mode))

  (defun ptb/previous-buffer ()
    (interactive)
    (kill-useless-buffers)
    (previous-buffer))

  (defun ptb/next-buffer ()
    (interactive)
    (kill-useless-buffers)
    (next-buffer))

  (defun ptb/kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer))
    (kill-useless-buffers))
  EOF
#+end_src

**** Create =~/.emacs.d/private/ptb/keybindings.el=

#+begin_src sh
  cat > "${HOME}/.emacs.d/private/ptb/keybindings.el" << EOF
  (define-key evil-insert-state-map (kbd "<return>") 'newline)

  (define-key evil-normal-state-map (kbd "s-c") 'clipboard-kill-ring-save)
  (define-key evil-insert-state-map (kbd "s-c") 'clipboard-kill-ring-save)
  (define-key evil-visual-state-map (kbd "s-c") 'clipboard-kill-ring-save)

  (define-key evil-ex-completion-map (kbd "s-v") 'clipboard-yank)
  (define-key evil-ex-search-keymap (kbd "s-v") 'clipboard-yank)
  (define-key evil-insert-state-map (kbd "s-v") 'clipboard-yank)

  (define-key evil-normal-state-map (kbd "s-x") 'clipboard-kill-region)
  (define-key evil-insert-state-map (kbd "s-x") 'clipboard-kill-region)
  (define-key evil-visual-state-map (kbd "s-x") 'clipboard-kill-region)

  (define-key evil-normal-state-map (kbd "<S-up>") 'evil-previous-visual-line)
  (define-key evil-insert-state-map (kbd "<S-up>") 'evil-previous-visual-line)
  (define-key evil-visual-state-map (kbd "<S-up>") 'evil-previous-visual-line)

  (define-key evil-normal-state-map (kbd "<S-down>") 'evil-next-visual-line)
  (define-key evil-insert-state-map (kbd "<S-down>") 'evil-next-visual-line)
  (define-key evil-visual-state-map (kbd "<S-down>") 'evil-next-visual-line)

  (global-set-key (kbd "C-l") 'evil-search-highlight-persist-remove-all)

  (global-set-key (kbd "s-t") 'make-frame)
  (global-set-key (kbd "s-n") 'ptb/new-untitled-buffer)
  (global-set-key (kbd "s-w") 'ptb/kill-this-buffer)
  (global-set-key (kbd "s-{") 'ptb/previous-buffer)
  (global-set-key (kbd "s-}") 'ptb/next-buffer)
  EOF
#+end_src

**** Create =~/.emacs.d/private/ptb/packages.el=

#+begin_src sh
  cat > "${HOME}/.emacs.d/private/ptb/packages.el" << EOF
  (setq ptb-packages '(auto-indent-mode inline-crypt))

  (defun ptb/init-auto-indent-mode ()
    (use-package auto-indent-mode
      :init
      (setq
        auto-indent-delete-backward-char t
        auto-indent-fix-org-auto-fill t
        auto-indent-fix-org-move-beginning-of-line t
        auto-indent-fix-org-return t
        auto-indent-fix-org-yank t
        auto-indent-start-org-indent t
      )
    )
  )

  (defun ptb/init-inline-crypt ()
    (use-package inline-crypt :init))
  EOF
#+end_src

#+begin_src sh
  }
#+end_src

**** Create =/usr/local/bin/vi=

#+begin_src sh
  function config_vi_script () {
    p "Create vi script"

    cat > /usr/local/bin/vi <<-EOF
  #!/bin/sh

  if [ -e "/Applications/Emacs.app" ]; then
    t=()

    if [ \${#@} -ne 0 ]; then
      while IFS= read -r file; do
        [ ! -f "\$file" ] && t+=("\$file") && /usr/bin/touch "\$file"
        file=\$(echo \$(cd \$(dirname "\$file") && pwd -P)/\$(basename "\$file"))
        \$(/usr/bin/osascript <<-END
          if application "Emacs.app" is running then
            tell application id (id of application "Emacs.app") to open POSIX file "\$file"
          else
            tell application ((path to applications folder as text) & "Emacs.app")
              activate
              open POSIX file "\$file"
            end tell
          end if
  END
          ) &  # Note: END on the previous line may be indented with tabs but not spaces
        done <<<"\$(printf '%s\n' "\$@")"
      fi

      if [ ! -z "\$t" ]; then
        \$(/bin/sleep 10; for file in "\${t[@]}"; do
          [ ! -s "\$file" ] && /bin/rm "\$file";
        done) &
      fi
    else
      vim -No "\$@"
    fi
  EOF

    chmod a+x /usr/local/bin/vi
    rehash
  }
#+end_src

*** iStat Menus
:properties:
:header-args+: :padline no
:end:

#+begin_src sh
  function config_istat () {
    p "Set iStat Menu preferences"

    printf "%s\t%s\t%s\n" \
#+end_src

#+begin_src sh
  "MenubarSkinColor" "-int" "8" \
  "MenubarTheme" "-int" "0" \
  "DropdownTheme" "-int" "1" \
#+end_src

#+begin_src sh
  "CPU_MenubarMode" "-string" "100,2,0" \
  "CPU_MenubarTextSize" "-int" "14" \
  "CPU_MenubarGraphShowBackground" "-int" "0" \
  "CPU_MenubarGraphWidth" "-int" "32" \
  "CPU_MenubarGraphBreakdowns" "-int" "0" \
  "CPU_MenubarGraphCustomColors" "-int" "0" \
  "CPU_MenubarGraphOverall" "-string" "0.40 0.60 0.40 1.00" \
  "CPU_MenubarCombineCores" "-int" "1" \
  "CPU_MenubarGroupItems" "-int" "0" \
  "CPU_MenubarSingleHistoryGraph" "-int" "0" \
  "CPU_CombineLogicalCores" "-int" "1" \
  "CPU_AppFormat" "-int" "0" \
#+end_src

#+begin_src sh
  "Memory_MenubarMode" "-string" "100,2,6" \
  "Memory_MenubarPercentageSize" "-int" "14" \
  "Memory_MenubarGraphBreakdowns" "-int" "1" \
  "Memory_MenubarGraphCustomColors" "-int" "0" \
  "Memory_MenubarGraphOverall" "-string" "0.40 0.60 0.40 1.00" \
  "Memory_MenubarGraphWired" "-string" "0.40 0.60 0.40 1.00" \
  "Memory_MenubarGraphActive" "-string" "0.47 0.67 0.47 1.00" \
  "Memory_MenubarGraphCompressed" "-string" "0.53 0.73 0.53 1.00" \
  "Memory_MenubarGraphInactive" "-string" "0.60 0.80 0.60 1.00" \
  "Memory_IgnoreInactive" "-int" "0" \
  "Memory_AppFormat" "-int" "0" \
  "Memory_DisplayFormat" "-int" "1" \
#+end_src

#+begin_src sh
  "Disks_MenubarMode" "-string" "100,9,8" \
  "Disks_MenubarGroupItems" "-int" "1" \
  "Disks_MenubarRWShowLabel" "-int" "1" \
  "Disks_MenubarRWBold" "-int" "0" \
  "Disks_MenubarGraphActivityWidth" "-int" "32" \
  "Disks_MenubarGraphActivityShowBackground" "-int" "0" \
  "Disks_MenubarGraphActivityCustomColors" "-int" "0" \
  "Disks_MenubarGraphActivityRead" "-string" "0.60 0.80 0.60 1.00" \
  "Disks_MenubarGraphActivityWrite" "-string" "0.40 0.60 0.40 1.00" \
  "Disks_SeperateFusion" "-int" "1" \
#+end_src

#+begin_src sh
  "Network_MenubarMode" "-string" "4,0,1" \
  "Network_TextUploadColor-Dark" "-string" "1.00 1.00 1.00 1.00" \
  "Network_TextDownloadColor-Dark" "-string" "1.00 1.00 1.00 1.00" \
  "Network_GraphWidth" "-int" "32" \
  "Network_GraphShowBackground" "-int" "0" \
  "Network_GraphCustomColors" "-int" "0" \
  "Network_GraphUpload" "-string" "0.60 0.80 0.60 1.00" \
  "Network_GraphDownload" "-string" "0.40 0.60 0.40 1.00" \
  "Network_GraphMode" "-int" "1" \
#+end_src

#+begin_src sh
  "Battery_MenubarMode" "-string" "5,0" \
  "Battery_ColorGraphCustomColors" "-int" "1" \
  "Battery_ColorGraphCharged" "-string" "0.40 0.60 0.40 1.00" \
  "Battery_ColorGraphCharging" "-string" "0.60 0.80 0.60 1.00" \
  "Battery_ColorGraphDraining" "-string" "1.00 0.60 0.60 1.00" \
  "Battery_ColorGraphLow" "-string" "1.00 0.20 0.20 1.00" \
  "Battery_PercentageSize" "-int" "14" \
  "Battery_MenubarCustomizeStates" "-int" "0" \
  "Battery_MenubarHideBluetooth" "-int" "1" \
#+end_src

#+begin_src sh
  "Time_MenubarFormat" "-array-add" "EE" \
  "Time_MenubarFormat" "-array-add" " " \
  "Time_MenubarFormat" "-array-add" "MMM" \
  "Time_MenubarFormat" "-array-add" " " \
  "Time_MenubarFormat" "-array-add" "d" \
  "Time_MenubarFormat" "-array-add" " " \
  "Time_MenubarFormat" "-array-add" "h" \
  "Time_MenubarFormat" "-array-add" ":" \
  "Time_MenubarFormat" "-array-add" "mm" \
  "Time_MenubarFormat" "-array-add" ":" \
  "Time_MenubarFormat" "-array-add" "ss" \
  "Time_MenubarFormat" "-array-add" " " \
  "Time_MenubarFormat" "-array-add" "a" \
#+end_src

#+begin_src sh
  "Time_DropdownFormat" "-array-add" "EE" \
  "Time_DropdownFormat" "-array-add" " " \
  "Time_DropdownFormat" "-array-add" "h" \
  "Time_DropdownFormat" "-array-add" ":" \
  "Time_DropdownFormat" "-array-add" "mm" \
  "Time_DropdownFormat" "-array-add" " " \
  "Time_DropdownFormat" "-array-add" "a" \
  "Time_DropdownFormat" "-array-add" "' ('" \
  "Time_DropdownFormat" "-array-add" "zzz" \
  "Time_DropdownFormat" "-array-add" "')'" \
#+end_src

#+begin_src sh
  "Time_Cities" "-array-add" "4930956" \
  "Time_Cities" "-array-add" "4887398" \
  "Time_Cities" "-array-add" "5419384" \
  "Time_Cities" "-array-add" "5392171" \
  "Time_Cities" "-array-add" "5879400" \
  "Time_Cities" "-array-add" "5856195" \
  "Time_TextSize" "-int" "14" \
#+end_src

#+begin_src sh
  | while IFS=$'\t' read a b c; do
    defaults write com.bjango.istatmenus5.extras "$a" $b "$c"
  done
#+end_src

#+begin_src sh
  }
#+end_src

*** Terminal
:properties:
:header-args+: :padline no
:end:

Inspiration: [[https://github.com/ChrisKempson/Tomorrow-Theme#tomorrow-night-eighties][@chriskempson]], [[https://apple.stackexchange.com/a/98843][@user495470]], & [[https://github.com/reitermarkus/dotfiles/blob/master/include/settings/terminal.sh][@reitermarkus]]

**** General

#+begin_src sh
  function config_terminal () {
    p "Configure Terminal defaults (com.apple.Terminal)"
#+end_src

*On startup, open: New window with profile:* =ptb=
#+begin_src sh
  defaults write -app Terminal "Startup Window Settings" -string "$(whoami)"
#+end_src

**** Profiles

#+begin_src sh
  defaults write -app Terminal "Default Window Settings" -string "$(whoami)"

  /usr/libexec/PlistBuddy -c "delete ':Window Settings:$(whoami)'" \
    "${HOME}/Library/Preferences/com.apple.Terminal.plist" &> /dev/null

  for terminal_prop in \
#+end_src

#+begin_src sh
  " dict" \
  ":name string '$(whoami)'" \
  ":type string 'Window Settings'" \
  ":ProfileCurrentVersion real 2.05" \
#+end_src

**** Text

#+begin_src sh
  ':BackgroundColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC4xIDAuMSAwLjE=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ":BackgroundBlur real 0" \
  ":BackgroundSettingsForInactiveWindows bool false" \
  ":BackgroundAlphaInactive real 1" \
  ":BackgroundBlurInactive real 0" \
  ':Font data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>3</integer></dict><key>NSName</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSSize</key><real>13</real><key>NSfFlags</key><integer>16</integer></dict><string>InconsolataLGC</string><dict><key>$classes</key><array><string>NSFont</string><string>NSObject</string></array><key>$classname</key><string>NSFont</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ":FontWidthSpacing real 1" \
  ":FontHeightSpacing real 1" \
  ":FontAntialias bool true" \
  ":UseBoldFonts bool true" \
  ":BlinkText bool false" \
  ":DisableANSIColor bool false" \
  ":UseBrightBold bool false" \
  ':TextColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDAuOCAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':TextBoldColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDAuOCAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':SelectionColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC4zIDAuMyAwLjM=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBlackColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC4zIDAuMyAwLjM=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIRedColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC45NSAwLjUgMC41</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIGreenColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC42IDAuOCAwLjY=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIYellowColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MSAwLjggMC40</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBlueColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC40IDAuNiAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIMagentaColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDAuNiAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSICyanColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC40IDAuOCAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIWhiteColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDAuOCAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightBlackColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC41IDAuNSAwLjU=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightRedColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MSAwLjcgMC43</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightGreenColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDEgMC44</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightYellowColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MSAxIDAuNg==</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightBlueColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC42IDAuOCAx</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightMagentaColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MSAwLjggMQ==</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightCyanColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC42IDEgMQ==</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightWhiteColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC45IDAuOSAwLjk=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ":CursorType integer 0" \
  ":CursorBlink bool false" \
  ':CursorColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC43IDAuNyAwLjc=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
#+end_src

**** Window

#+begin_src sh
  ":ShowRepresentedURLInTitle bool true" \
  ":ShowRepresentedURLPathInTitle bool true" \
  ":ShowActiveProcessInTitle bool true" \
  ":ShowActiveProcessArgumentsInTitle bool false" \
  ":ShowShellCommandInTitle bool false" \
  ":ShowWindowSettingsNameInTitle bool false" \
  ":ShowTTYNameInTitle bool false" \
  ":ShowDimensionsInTitle bool false" \
  ":ShowCommandKeyInTitle bool false" \
  ":columnCount integer 124" \
  ":rowCount integer 20" \
  ":ShouldLimitScrollback integer 0" \
  ":ScrollbackLines integer 0" \
  ":ShouldRestoreContent bool false" \
#+end_src

**** Tab

#+begin_src sh
  ":ShowRepresentedURLInTabTitle bool false" \
  ":ShowRepresentedURLPathInTabTitle bool false" \
  ":ShowActiveProcessInTabTitle bool true" \
  ":ShowActiveProcessArgumentsInTabTitle bool false" \
  ":ShowTTYNameInTabTitle bool false" \
  ":ShowComponentsWhenTabHasCustomTitle bool true" \
  ":ShowActivityIndicatorInTab bool true" \
#+end_src

**** Shell

#+begin_src sh
  ":shellExitAction integer 1" \
  ":warnOnShellCloseAction integer 1" \
#+end_src

**** Keyboard

#+begin_src sh
  ":useOptionAsMetaKey bool false" \
  ":ScrollAlternateScreen bool true" \
#+end_src

**** Advanced

#+begin_src sh
  ":TerminalType string 'xterm-256color'" \
  ":deleteSendsBackspace bool false" \
  ":EscapeNonASCIICharacters bool true" \
  ":ConvertNewlinesOnPaste bool true" \
  ":StrictVTKeypad bool true" \
  ":scrollOnInput bool true" \
  ":Bell bool false" \
  ":VisualBell bool false" \
  ":VisualBellOnlyWhenMuted bool false" \
  ":BellBadge bool false" \
  ":BellBounce bool false" \
  ":BellBounceCritical bool false" \
  ":CharacterEncoding integer 4" \
  ":SetLanguageEnvironmentVariables bool true" \
  ":EastAsianAmbiguousWide bool false" \
#+end_src

#+begin_src sh
  ; do
    /usr/libexec/PlistBuddy "$HOME/Library/Preferences/com.apple.Terminal.plist" \
      -c "add ':Window Settings:$(whoami)'${terminal_prop}"
  done
#+end_src

#+begin_src sh
  }
#+end_src

*** dovecot

#+begin_example sh :tangle no
  doveadm sync -u $(whoami) maildir:~/.email:INBOX=~/.email/Inbox:LAYOUT=fs
#+end_example

#+begin_src sh
  function config_dovecot () {
    #   p "Enable email authentication with macOS accounts"

    #   sudo tee "/etc/pam.d/dovecot" > /dev/null << EOF
    # auth		required	pam_opendirectory.so try_first_pass
    # account		required	pam_nologin.so
    # account		required	pam_opendirectory.so
    # password	required	pam_opendirectory.so
    # EOF

    p "Configure Dovecot email server"

    cat > "/usr/local/etc/dovecot/dovecot.conf" << EOF
  auth_mechanisms = cram-md5
  default_internal_user = _dovecot
  default_login_user = _dovenull
  log_path = /dev/stderr
  mail_location = maildir:~/.mail:INBOX=~/.mail/Inbox:LAYOUT=fs
  mail_plugins = zlib
  maildir_copy_with_hardlinks = no
  namespace {
    inbox = yes
    mailbox Drafts {
      auto = subscribe
      special_use = \Drafts
    }
    mailbox Junk {
      auto = subscribe
      special_use = \Junk
    }
    mailbox Sent {
      auto = subscribe
      special_use = \Sent
    }
    mailbox "Sent Messages" {
      special_use = \Sent
    }
    mailbox Trash {
      auto = subscribe
      special_use = \Trash
    }
    separator = .
    type = private
  }
  passdb {
    args = scheme=cram-md5 /usr/local/etc/dovecot/cram-md5.pwd
    driver = passwd-file

    # driver = pam

    # args = nopassword=y
    # driver = static
  }
  plugin {
    sieve = file:/Users/%u/.sieve
    sieve_plugins = sieve_extprograms
    zlib_save = bz2
    zlib_save_level = 9
  }
  postmaster_address = ${USER}@${DOMAIN}
  protocols = imap
  service imap-login {
    inet_listener imap {
      port = 0
    }
  }
  ssl = required
  ssl_cert = <${SSL}/certs/${MAIL}/${MAIL}.crt
  ssl_cipher_list = AES128+EECDH:AES128+EDH
  ssl_dh_parameters_length = 4096
  ssl_key = <${SSL}/certs/${MAIL}/${MAIL}.key
  ssl_prefer_server_ciphers = yes
  ssl_protocols = !SSLv2 !SSLv3
  userdb {
    driver = passwd
  }
  protocol lda {
    mail_plugins = sieve zlib
  }

  # auth_debug = yes
  # auth_debug_passwords = yes
  # auth_verbose = yes
  # auth_verbose_passwords = plain
  # mail_debug = yes
  # verbose_ssl = yes
  EOF

    if [ ! -f "/usr/local/etc/dovecot/cram-md5.pwd" ]; then
      p "Create email account for '${USER}' with 'CRAM-MD5' authentication: "
      doveadm pw | sed -e "s/^/${USER}:/" > "/usr/local/etc/dovecot/cram-md5.pwd"
      sudo chown _dovecot "/usr/local/etc/dovecot/cram-md5.pwd"
      sudo chmod go= "/usr/local/etc/dovecot/cram-md5.pwd"
    fi

    if ! /usr/bin/grep -Fq ${MAIL} "/etc/hosts"; then
      printf "127.0.0.1\t${MAIL}\n" | sudo tee -a /etc/hosts > /dev/null
    fi

    sudo brew services start dovecot

    cat > "/usr/local/bin/imaptimefix.py" << EOF
  #!/usr/bin/env python

  # Author: Zachary Cutlip <@zcutlip>
  # http://shadow-file.blogspot.com/2012/06/parsing-email-and-fixing-timestamps-in.html
  # Updated: Peter T Bosse II <@ptb>
  # Purpose: A program to fix sorting of mail messages that have been POPed or
  #          IMAPed in the wrong order. Compares time stamp sent and timestamp
  #          received on an RFC822-formatted email message, and renames the
  #          message file using the most recent timestamp that is no more than
  #          24 hours after the date sent. Updates the file's atime/mtime with
  #          the timestamp, as well. Does not modify the headers or contents of
  #          the message.

  from bz2 import BZ2File
  from email import message_from_string
  from email.utils import mktime_tz, parsedate_tz
  from os import rename, utime, walk
  from os.path import abspath, isdir, isfile, join
  from re import compile, match
  from sys import argv

  if isdir(argv[1]):
    e = compile("([0-9]+)(\..*$)")

    for a, b, c in walk(argv[1]):
      for d in c:
        if e.match(d):
          f = message_from_string(BZ2File(join(a, d)).read())
          g = mktime_tz(parsedate_tz(f.get("Date")))

          h = 0
          for i in f.get_all("Received", []):
            j = i.split(";")[-1]
            if parsedate_tz(j):
              k = mktime_tz(parsedate_tz(j))
              if (k - g) > (60*60*24):
                continue

              h = k
            break

          if (h < 1):
            h = g

          l = e.match(d)

          if len(l.groups()) == 2:
            m = str(int(h)) + l.groups()[1]
            if not isfile(join(a, m)):
              rename(join(a, d), join(a, m))
            utime(join(a, m), (h, h))
  EOF

    chmod +x /usr/local/bin/imaptimefix.py

    printf "%s\t%s\t%s\n" \
      "KeepAlive" "-bool" "false" \
      "Label" "-string" "org.dovecot.imaptimefix" \
      "LowPriorityIO" "-bool" "true" \
      "ProgramArguments" "-array-add" "/usr/local/bin/imaptimefix.py" \
      "ProgramArguments" "-array-add" "${HOME}/.mail" \
      "WatchPaths" "-array-add" "${HOME}/.mail" \
    | while IFS=$'\t' read a b c; do
      defaults write "${HOME}/Library/LaunchAgents/org.dovecot.imaptimefix" "$a" $b $c
    done
    plutil -convert xml1 "${HOME}/Library/LaunchAgents/org.dovecot.imaptimefix.plist"
    chmod 644 "${HOME}/Library/LaunchAgents/org.dovecot.imaptimefix.plist"
  }
#+end_src

*** getmail

#+begin_src sh
  function config_getmail () {
    p "Configure getmail"

    mkdir -m go= -p "${HOME}/.getmail" "${HOME}/Library/LaunchAgents"

    printf "%s\n" \
      "add ':KeepAlive' bool false" \
      "add ':Label' string 'ca.pyropus.getmail'" \
      "add ':ProgramArguments' array" \
      "add ':ProgramArguments:0' string '/usr/local/bin/getmail'" \
      "add ':RunAtLoad' bool true" \
      "add ':StandardOutPath' string '${HOME}/.getmail/getmail.log'" \
      "add ':StandardErrorPath' string '${HOME}/.getmail/getmail.err'" \
      "add ':StartInterval' integer 300" \
    | while read a; do
      /usr/libexec/PlistBuddy "${HOME}/Library/LaunchAgents/ca.pyropus.getmail.plist" -c "${a}" &> /dev/null
    done

    for email in \
      "pbosse@gmail.com" \
      "ptb@ioutime.com" \
    ; do
      p "Add password for '${email}' to Keychain"

      security add-internet-password -a "${email}" -s "imap.gmail.com" -r "imap" \
        -l "${email}" -D "getmail password" -P 993 -w

      cat > "${HOME}/.getmail/${email}" << EOF
  [retriever]
  type = SimpleIMAPSSLRetriever
  server = imap.gmail.com
  port = 993
  username = ${email}
  mailboxes = ("[Gmail]/All Mail",)

  [destination]
  type = MDA_external
  path = /usr/local/Cellar/dovecot/2.2.31/libexec/dovecot/dovecot-lda
  arguments = ("-c","/usr/local/etc/dovecot/dovecot.conf","-d","$(whoami)",)
  ignore_stderr = true

  [options]
  # delete = true
  delete_after = 30
  delivered_to = false
  read_all = false
  received = false
  verbose = 1
  EOF

    defaults write "${HOME}/Library/LaunchAgents/ca.pyropus.getmail" \
      ProgramArguments -array-add "--rcfile"
    defaults write "${HOME}/Library/LaunchAgents/ca.pyropus.getmail" \
      ProgramArguments -array-add "${email}"
    done

    plutil -convert xml1 "${HOME}/Library/LaunchAgents/ca.pyropus.getmail.plist"
    launchctl load "${HOME}/Library/LaunchAgents/ca.pyropus.getmail.plist"
  }
#+end_src

*** git

#+begin_src sh
  function config_git () {
    p "Configure git"

    KEY="$(gpg -K --with-colons | awk -F: '/^sec/ { a=$5 } END { print a }')"

    git config --global user.name "Peter T Bosse II"
    git config --global user.email "ptb@ioutime.com"

    git config --global alias.cm "commit --allow-empty-message --message="
    git config --global alias.co "checkout"
    git config --global alias.st "status"

    git config --global push.default "simple"

    if [ ! -z ${KEY} ]; then
      git config --global user.signingkey "${KEY}"
      git config --global gpg.program "$(which gpg)"
      git config --global commit.gpgsign "true"
      git config --global tag.gpgsign "true"
      git config --global log.showSignature "true"
    fi
  }
#+end_src

*** gnupg

#+begin_src sh
  function config_gpg () {
    p "Create GPG keys"

    mkdir -m go= -p "${HOME}/.gnupg"

    echo "keyid-format long" \
      > "${HOME}/.gnupg/gpg.conf"
    echo "pinentry-program $(which pinentry-mac)" \
      > "${HOME}/.gnupg/gpg-agent.conf"

    gpg --faked-system-time '20170701T120000!' \
      --quick-generate-key "Peter T Bosse II <ptb@ioutime.com>" \
      future-default default never
  }
#+end_src

#+begin_src sh
  function config_gpg_help () {
    KEY="$(gpg -K --with-colons | awk -F: '/^sec/ { a=$5 } END { print a }')"
    gpg --armor --export "${KEY}" | pbcopy
    open "https://github.com/settings/keys"
  }
#+end_src

*** openssl

#+begin_src sh
  function config_openssl () {
    p "Create OpenSSL certificates"

    SSL="/usr/local/etc/openssl"
    DOMAIN="ptb2.me"
    MAIL="mail.${DOMAIN}"
    FAKE="0701080017"
    DAYS=3652
#+end_src

#+begin_src sh
  mkdir -p "${SSL}/certs/${DOMAIN}"
  cat > "${SSL}/certs/${DOMAIN}/${DOMAIN}.cnf" << EOF
  [ req ]
  default_bits = 4096
  default_keyfile = ${SSL}/certs/${DOMAIN}/${DOMAIN}.key
  default_md = sha256
  distinguished_name = dn
  encrypt_key = no
  prompt = no
  utf8 = yes
  x509_extensions = v3_ca

  [ dn ]
  CN = ${DOMAIN}

  [ v3_ca ]
  subjectKeyIdentifier = hash
  authorityKeyIdentifier = keyid:always,issuer
  basicConstraints = CA:true
  EOF
#+end_src

#+begin_src sh
  openssl genrsa -out "${SSL}/certs/${DOMAIN}/${DOMAIN}.key" 4096

  p "Set fake '${DOMAIN}' certificate creation date"
  sudo date "${FAKE}" && \
  openssl req -days ${DAYS} -new -x509 \
    -config "${SSL}/certs/${DOMAIN}/${DOMAIN}.cnf" \
    -key "${SSL}/certs/${DOMAIN}/${DOMAIN}.key" \
    -out "${SSL}/certs/${DOMAIN}/${DOMAIN}.crt" && \
  sudo ntpdate -u time.apple.com

  p "Password for adding certificate to Keychain Access"
  openssl pkcs12 -aes256 -clcerts -export \
    -in "${SSL}/certs/${DOMAIN}/${DOMAIN}.crt" \
    -inkey "${SSL}/certs/${DOMAIN}/${DOMAIN}.key" \
    -out "${SSL}/certs/${DOMAIN}/${DOMAIN}.p12"

  open -g "${SSL}/certs/${DOMAIN}/${DOMAIN}.p12"
#+end_src

#+begin_src sh
  mkdir -p "${SSL}/certs/${MAIL}"
  cat > "${SSL}/certs/${MAIL}/${MAIL}.cnf" << EOF
  [ req ]
  default_bits = 4096
  default_keyfile = ${SSL}/certs/${DOMAIN}/${DOMAIN}.key
  default_md = sha256
  distinguished_name = dn
  encrypt_key = no
  prompt = no
  utf8 = yes
  x509_extensions = v3_ca

  [ dn ]
  CN = ${MAIL}

  [ v3_ca ]
  subjectKeyIdentifier = hash
  authorityKeyIdentifier = keyid:always,issuer
  basicConstraints = CA:true
  EOF
#+end_src

#+begin_src sh
  openssl genrsa -out "${SSL}/certs/${MAIL}/${MAIL}.key" 4096

  openssl req -new \
    -config "${SSL}/certs/${MAIL}/${MAIL}.cnf" \
    -key "${SSL}/certs/${MAIL}/${MAIL}.key" \
    -out "${SSL}/certs/${MAIL}/${MAIL}.csr"

  p "Set fake '${MAIL}' certificate creation date"
  sudo date "${FAKE}" && \
  openssl x509 -days ${DAYS} -req -set_serial 01 -sha256 \
    -CA "${SSL}/certs/${DOMAIN}/${DOMAIN}.crt" \
    -CAkey "${SSL}/certs/${DOMAIN}/${DOMAIN}.key" \
    -in "${SSL}/certs/${MAIL}/${MAIL}.csr" \
    -out "${SSL}/certs/${MAIL}/${MAIL}.crt" && \
  sudo ntpdate -u time.apple.com
}
#+end_src

*** shell

#+begin_src sh
function config_shell () {
  if [ -x "/usr/local/bin/zsh" ]; then
    # Current User > Advanced Options… > Login shell: /usr/local/bin/zsh
    p "Set '/usr/local/bin/zsh' as the default shell"

    sudo sh -c "printf '%s\n' '/usr/local/bin/zsh' >> /etc/shells" && \
    sudo chsh -s /usr/local/bin/zsh && \
    sudo mkdir -m go= -p /private/var/root/Library/Caches/ && \
    sudo touch "/private/var/root/.zshrc"
    chsh -s /usr/local/bin/zsh
    touch "${HOME}/.zshrc"
  fi
}
#+end_src

*** sieve

#+begin_src sh
  function config_sieve () {
    p "Configure sieve"

    cat > "${HOME}/.sieve" << EOF
  require ["date", "fileinto", "imap4flags", "mailbox", "relational", "variables"];

  setflag "\\\\Seen";

  if date :is "date" "year" "1995" { fileinto :create "Archives.1995"; }
  if date :is "date" "year" "1996" { fileinto :create "Archives.1996"; }
  if date :is "date" "year" "1997" { fileinto :create "Archives.1997"; }
  if date :is "date" "year" "1998" { fileinto :create "Archives.1998"; }
  if date :is "date" "year" "1999" { fileinto :create "Archives.1999"; }
  if date :is "date" "year" "2000" { fileinto :create "Archives.2000"; }
  if date :is "date" "year" "2001" { fileinto :create "Archives.2001"; }
  if date :is "date" "year" "2002" { fileinto :create "Archives.2002"; }
  if date :is "date" "year" "2003" { fileinto :create "Archives.2003"; }
  if date :is "date" "year" "2004" { fileinto :create "Archives.2004"; }
  if date :is "date" "year" "2005" { fileinto :create "Archives.2005"; }
  if date :is "date" "year" "2006" { fileinto :create "Archives.2006"; }
  if date :is "date" "year" "2007" { fileinto :create "Archives.2007"; }
  if date :is "date" "year" "2008" { fileinto :create "Archives.2008"; }
  if date :is "date" "year" "2009" { fileinto :create "Archives.2009"; }
  if date :is "date" "year" "2010" { fileinto :create "Archives.2010"; }
  if date :is "date" "year" "2011" { fileinto :create "Archives.2011"; }
  if date :is "date" "year" "2012" { fileinto :create "Archives.2012"; }
  if date :is "date" "year" "2013" { fileinto :create "Archives.2013"; }
  if date :is "date" "year" "2014" { fileinto :create "Archives.2014"; }
  if date :is "date" "year" "2015" { fileinto :create "Archives.2015"; }
  if date :is "date" "year" "2016" { fileinto :create "Archives.2016"; }
  if date :is "date" "year" "2017" { fileinto :create "Archives.2017"; }
  if date :is "date" "year" "2018" { fileinto :create "Archives.2018"; }
  if date :is "date" "year" "2019" { fileinto :create "Archives.2019"; }
  if date :is "date" "year" "2020" { fileinto :create "Archives.2020"; }
  EOF
  }
#+end_src

*** ssh

#+begin_src sh
  function config_ssh () {
    p "Create ssh keys"

    mkdir -m go= -p "${HOME}/.ssh"

    ssh-keygen -t ed25519 -a 100 -C "ptb@ioutime.com"

    cat > "${HOME}/.ssh/config" <<-EOF
  Host *
    AddKeysToAgent yes
    IdentityFile ~/.ssh/id_ed25519
  EOF

    p "Adding ssh key to macOS keychain"

    ssh-add -K
    echo "ssh-add -A &> /dev/null" >> "${HOME}/.zshrc"
  }
#+end_src

#+begin_src sh
  function config_ssh_help () {
    pbcopy < "${HOME}/.ssh/id_ed25519.pub"
    open "https://github.com/settings/keys"
  }
#+end_src

#+begin_example sh :tangle no
  ssh-copy-id username@example.com
#+end_example

*** TODO: vim

#+begin_src sh :tangle no
  function config_vim () {
    p "Configure vim"
  }
#+end_src

*** zsh

#+begin_src sh
function config_zsh () {
  p "Create system default '/etc/zshrc'"

  sudo tee /etc/zshrc > /dev/null <<-EOF
alias -g ...="../.."
alias -g ....="../../.."
alias -g .....="../../../.."
alias l="/bin/ls -lG"
alias ll="/bin/ls -alG"
alias lr="/bin/ls -alRG"
alias screen="/usr/bin/screen -U"
autoload -U compaudit
compaudit | xargs -L 1 sudo chown -HR root:wheel {} 2> /dev/null
compaudit | xargs -L 1 sudo chmod -HR go-w {} 2> /dev/null
autoload -U compinit
compinit -d "\${HOME}/Library/Caches/zcompdump"
bindkey "\e[3~" delete-char
bindkey "\e[A" up-line-or-search
bindkey "\e[B" down-line-or-search
export HISTFILE="\${HOME}/Library/Caches/zsh_history"
export HISTSIZE=50000
export SAVEHIST=50000
setopt APPEND_HISTORY
setopt AUTO_CD
setopt EXTENDED_HISTORY
setopt HIST_FIND_NO_DUPS
setopt INC_APPEND_HISTORY
setopt PROMPT_SUBST
setopt SHARE_HISTORY
stty erase 
# Correctly display UTF-8 with combining characters.
if [ "\$TERM_PROGRAM" = "Apple_Terminal" ]; then
  setopt combiningchars
fi
function precmd () {
  print -Pn "\\e]7;file://%M\${PWD// /%%20}\a";
  print -Pn "\\e]2;%n@%m\a";
  print -Pn "\\e]1;%~\a";
}
function gb () {
  git branch --no-color 2> /dev/null | \
    sed -e "/^[^*]/d" -e "s/* \(.*\)/ (\1)/"
}
function xd () {
  xattr -d com.apple.diskimages.fsck \$* 2> /dev/null;
  xattr -d com.apple.diskimages.recentcksum \$* 2> /dev/null;
  xattr -d com.apple.metadata:kMDItemFinderComment \$* 2> /dev/null;
  xattr -d com.apple.metadata:kMDItemDownloadedDate \$* 2> /dev/null;
  xattr -d com.apple.metadata:kMDItemWhereFroms \$* 2> /dev/null;
  xattr -d com.apple.quarantine \$* 2> /dev/null;
  find . -name .DS_Store -delete;
  find . -name 'Icon' -delete
}
function sf () {
  SetFile -P -d "\$1 12:00:00" -m "\$1 12:00:00" \$argv[2,\$]
}
function sd () {
  xd **/*;
  sf \$1 .;
  for i in **/*; do sf \$1 \$i; done;
  chown -R root:wheel .;
  chmod -R a+r,u+w,go-w .;
  find . -type d -exec chmod a+x '{}' ';';
  chgrp -R admin ./Applications;
  chmod -R g+w ./Applications;
  chgrp -R admin ./Library;
  chmod -R g+w ./Library;
  chgrp -R staff "./Library/Application Support/Adobe";
  chmod -R g-w ./Library/Keychains;
  chmod -R g-w ./Library/ScriptingAdditions;
  chgrp -R wheel ./Library/Filesystems;
  chmod -R g-w ./Library/Filesystems;
  chgrp -R wheel ./Library/LaunchAgents;
  chmod -R g-w ./Library/LaunchAgents;
  chgrp -R wheel ./Library/LaunchDaemons;
  chmod -R g-w ./Library/LaunchDaemons;
  chgrp -R wheel ./Library/PreferencePanes;
  chmod -R g-w ./Library/PreferencePanes;
  chgrp -R wheel ./Library/StartupItems;
  chmod -R g-w ./Library/StartupItems;
  chgrp -R wheel ./Library/Widgets;
  chmod -R g-w ./Library/Widgets;
  find . -name "kexts" -type d -exec chmod -R g-w '{}' ';';
  find . -name "*.kext" -exec chown -R root:wheel '{}' ';';
  find . -name "*.kext" -exec chmod -R g-w '{}' ';'
}
MAS="\$(getconf DARWIN_USER_CACHE_DIR)com.apple.appstore"
PROMPT="%B%n@%m%b:%2~%B\$(gb) %#%b "
EOF
}
#+end_src

*** Login Items

#+begin_src sh
  function config_loginitems () {
    p "Create login items"

    osascript > /dev/null << EOF
      tell app "System Events"
        make new login item with properties ¬
          { path: "/Applications/Alfred 3.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/autoping.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Caffeine.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Coffitivity.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Dropbox.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/HardwareGrowler.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/I Love Stars.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/IPMenulet.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/iTunes.app/Contents/MacOS/iTunesHelper.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Menubar Countdown.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Meteorologist.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Moom.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/NZBGet.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Plex Media Server.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Sonarr-Menu.app", hidden: true }
        make new login item with properties ¬
          { path: "/Library/PreferencePanes/SteerMouse.prefPane/Contents/MacOS/SteerMouse Manager.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Synergy Preferences.app/Contents/PreferencePanes/Synergy.prefPane/Contents/Helpers/Synergy.app", hidden: true }
      end tell
  EOF

    mkdir -m go= -p "${HOME}/Library/LaunchAgents"
    printf "%s\t%s\n" \
      "net.elasticthreads.nv" "add ':KeepAlive' bool true" \
      "net.elasticthreads.nv" "add ':Label' string 'net.elasticthreads.nv'" \
      "net.elasticthreads.nv" "add ':Program' string '/Applications/nvALT.app/Contents/MacOS/nvALT'" \
    | while IFS=$'\t' read a b; do
      /usr/libexec/PlistBuddy "${HOME}/Library/LaunchAgents/${a}.plist" -c "${b}" &> /dev/null
    done
  }
#+end_src

*** handlers

#+begin_src sh
  function config_handlers () {
    if [ -x "/usr/local/bin/duti" ]; then
      p "Set document file handlers"

      if [ -f "${HOME}/Library/Preferences/org.duti.plist" ]; then
        rm "${HOME}/Library/Preferences/org.duti.plist"
      fi

      printf "%s\t%s\t%s\n" \
        "com.apple.DiskImageMounter" "com.apple.disk-image" "all" \
        "com.apple.DiskImageMounter" "public.disk-image" "all" \
        "com.apple.DiskImageMounter" "public.iso-image" "all" \
        "com.apple.QuickTimePlayerX" "com.apple.coreaudio-format" "all" \
        "com.apple.QuickTimePlayerX" "com.apple.quicktime-movie" "all" \
        "com.apple.QuickTimePlayerX" "com.microsoft.waveform-audio" "all" \
        "com.apple.QuickTimePlayerX" "public.aifc-audio" "all" \
        "com.apple.QuickTimePlayerX" "public.aiff-audio" "all" \
        "com.apple.QuickTimePlayerX" "public.audio" "all" \
        "com.apple.QuickTimePlayerX" "public.mp3" "all" \
        "com.apple.Safari" "com.compuserve.gif" "all" \
        "com.apple.Terminal" "com.apple.terminal.shell-script" "all" \
        "com.apple.iTunes" "com.apple.iTunes.audible" "all" \
        "com.apple.iTunes" "com.apple.iTunes.ipg" "all" \
        "com.apple.iTunes" "com.apple.iTunes.ipsw" "all" \
        "com.apple.iTunes" "com.apple.iTunes.ite" "all" \
        "com.apple.iTunes" "com.apple.iTunes.itlp" "all" \
        "com.apple.iTunes" "com.apple.iTunes.itms" "all" \
        "com.apple.iTunes" "com.apple.iTunes.podcast" "all" \
        "com.apple.iTunes" "com.apple.m4a-audio" "all" \
        "com.apple.iTunes" "com.apple.mpeg-4-ringtone" "all" \
        "com.apple.iTunes" "com.apple.protected-mpeg-4-audio" "all" \
        "com.apple.iTunes" "com.apple.protected-mpeg-4-video" "all" \
        "com.apple.iTunes" "com.audible.aa-audio" "all" \
        "com.apple.iTunes" "public.mpeg-4-audio" "all" \
        "com.apple.installer" "com.apple.installer-package-archive" "all" \
        "com.github.atom" "com.apple.binary-property-list" "editor" \
        "com.github.atom" "com.apple.crashreport" "editor" \
        "com.github.atom" "com.apple.dt.document.ascii-property-list" "editor" \
        "com.github.atom" "com.apple.dt.document.script-suite-property-list" "editor" \
        "com.github.atom" "com.apple.dt.document.script-terminology-property-list" "editor" \
        "com.github.atom" "com.apple.log" "editor" \
        "com.github.atom" "com.apple.property-list" "editor" \
        "com.github.atom" "com.apple.rez-source" "editor" \
        "com.github.atom" "com.apple.symbol-export" "editor" \
        "com.github.atom" "com.apple.xcode.ada-source" "editor" \
        "com.github.atom" "com.apple.xcode.bash-script" "editor" \
        "com.github.atom" "com.apple.xcode.configsettings" "editor" \
        "com.github.atom" "com.apple.xcode.csh-script" "editor" \
        "com.github.atom" "com.apple.xcode.fortran-source" "editor" \
        "com.github.atom" "com.apple.xcode.ksh-script" "editor" \
        "com.github.atom" "com.apple.xcode.lex-source" "editor" \
        "com.github.atom" "com.apple.xcode.make-script" "editor" \
        "com.github.atom" "com.apple.xcode.mig-source" "editor" \
        "com.github.atom" "com.apple.xcode.pascal-source" "editor" \
        "com.github.atom" "com.apple.xcode.strings-text" "editor" \
        "com.github.atom" "com.apple.xcode.tcsh-script" "editor" \
        "com.github.atom" "com.apple.xcode.yacc-source" "editor" \
        "com.github.atom" "com.apple.xcode.zsh-script" "editor" \
        "com.github.atom" "com.apple.xml-property-list" "editor" \
        "com.github.atom" "com.barebones.bbedit.actionscript-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.erb-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.ini-configuration" "editor" \
        "com.github.atom" "com.barebones.bbedit.javascript-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.json-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.jsp-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.lasso-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.lua-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.setext-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.sql-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.tcl-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.tex-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.textile-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.vbscript-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.vectorscript-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.verilog-hdl-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.vhdl-source" "editor" \
        "com.github.atom" "com.barebones.bbedit.yaml-source" "editor" \
        "com.github.atom" "com.netscape.javascript-source" "editor" \
        "com.github.atom" "com.sun.java-source" "editor" \
        "com.github.atom" "dyn.ah62d4rv4ge80255drq" "all" \
        "com.github.atom" "dyn.ah62d4rv4ge80g55gq3w0n" "all" \
        "com.github.atom" "dyn.ah62d4rv4ge80g55sq2" "all" \
        "com.github.atom" "dyn.ah62d4rv4ge80y2xzrf0gk3pw" "all" \
        "com.github.atom" "dyn.ah62d4rv4ge81e3dtqq" "all" \
        "com.github.atom" "dyn.ah62d4rv4ge81e7k" "all" \
        "com.github.atom" "dyn.ah62d4rv4ge81g25xsq" "all" \
        "com.github.atom" "dyn.ah62d4rv4ge81g2pxsq" "all" \
        "com.github.atom" "net.daringfireball.markdown" "editor" \
        "com.github.atom" "public.assembly-source" "editor" \
        "com.github.atom" "public.c-header" "editor" \
        "com.github.atom" "public.c-plus-plus-source" "editor" \
        "com.github.atom" "public.c-source" "editor" \
        "com.github.atom" "public.csh-script" "editor" \
        "com.github.atom" "public.json" "editor" \
        "com.github.atom" "public.lex-source" "editor" \
        "com.github.atom" "public.log" "editor" \
        "com.github.atom" "public.mig-source" "editor" \
        "com.github.atom" "public.nasm-assembly-source" "editor" \
        "com.github.atom" "public.objective-c-plus-plus-source" "editor" \
        "com.github.atom" "public.objective-c-source" "editor" \
        "com.github.atom" "public.patch-file" "editor" \
        "com.github.atom" "public.perl-script" "editor" \
        "com.github.atom" "public.php-script" "editor" \
        "com.github.atom" "public.plain-text" "editor" \
        "com.github.atom" "public.precompiled-c-header" "editor" \
        "com.github.atom" "public.precompiled-c-plus-plus-header" "editor" \
        "com.github.atom" "public.python-script" "editor" \
        "com.github.atom" "public.ruby-script" "editor" \
        "com.github.atom" "public.script" "editor" \
        "com.github.atom" "public.shell-script" "editor" \
        "com.github.atom" "public.source-code" "editor" \
        "com.github.atom" "public.text" "editor" \
        "com.github.atom" "public.utf16-external-plain-text" "editor" \
        "com.github.atom" "public.utf16-plain-text" "editor" \
        "com.github.atom" "public.utf8-plain-text" "editor" \
        "com.github.atom" "public.xml" "editor" \
        "com.kodlian.Icon-Slate" "com.apple.icns" "all" \
        "com.kodlian.Icon-Slate" "com.microsoft.ico" "all" \
        "com.microsoft.Word" "public.rtf" "all" \
        "com.panayotis.jubler" "dyn.ah62d4rv4ge81g6xy" "all" \
        "com.sketchup.SketchUp.2017" "com.sketchup.skp" "all" \
        "com.VortexApps.NZBVortex3" "dyn.ah62d4rv4ge8068xc" "all" \
        "com.vmware.fusion" "com.microsoft.windows-executable" "all" \
        "cx.c3.theunarchiver" "com.alcohol-soft.mdf-image" "all" \
        "cx.c3.theunarchiver" "com.allume.stuffit-archive" "all" \
        "cx.c3.theunarchiver" "com.altools.alz-archive" "all" \
        "cx.c3.theunarchiver" "com.amiga.adf-archive" "all" \
        "cx.c3.theunarchiver" "com.amiga.adz-archive" "all" \
        "cx.c3.theunarchiver" "com.apple.applesingle-archive" "all" \
        "cx.c3.theunarchiver" "com.apple.binhex-archive" "all" \
        "cx.c3.theunarchiver" "com.apple.bom-compressed-cpio" "all" \
        "cx.c3.theunarchiver" "com.apple.itunes.ipa" "all" \
        "cx.c3.theunarchiver" "com.apple.macbinary-archive" "all" \
        "cx.c3.theunarchiver" "com.apple.self-extracting-archive" "all" \
        "cx.c3.theunarchiver" "com.apple.xar-archive" "all" \
        "cx.c3.theunarchiver" "com.apple.xip-archive" "all" \
        "cx.c3.theunarchiver" "com.cyclos.cpt-archive" "all" \
        "cx.c3.theunarchiver" "com.microsoft.cab-archive" "all" \
        "cx.c3.theunarchiver" "com.microsoft.msi-installer" "all" \
        "cx.c3.theunarchiver" "com.nero.nrg-image" "all" \
        "cx.c3.theunarchiver" "com.network172.pit-archive" "all" \
        "cx.c3.theunarchiver" "com.nowsoftware.now-archive" "all" \
        "cx.c3.theunarchiver" "com.nscripter.nsa-archive" "all" \
        "cx.c3.theunarchiver" "com.padus.cdi-image" "all" \
        "cx.c3.theunarchiver" "com.pkware.zip-archive" "all" \
        "cx.c3.theunarchiver" "com.rarlab.rar-archive" "all" \
        "cx.c3.theunarchiver" "com.redhat.rpm-archive" "all" \
        "cx.c3.theunarchiver" "com.stuffit.archive.sit" "all" \
        "cx.c3.theunarchiver" "com.stuffit.archive.sitx" "all" \
        "cx.c3.theunarchiver" "com.sun.java-archive" "all" \
        "cx.c3.theunarchiver" "com.symantec.dd-archive" "all" \
        "cx.c3.theunarchiver" "com.winace.ace-archive" "all" \
        "cx.c3.theunarchiver" "com.winzip.zipx-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.arc-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.arj-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.dcs-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.dms-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.ha-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.lbr-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.lha-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.lhf-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.lzx-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.packdev-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.pax-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.pma-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.pp-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.xmash-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.zoo-archive" "all" \
        "cx.c3.theunarchiver" "cx.c3.zoom-archive" "all" \
        "cx.c3.theunarchiver" "org.7-zip.7-zip-archive" "all" \
        "cx.c3.theunarchiver" "org.archive.warc-archive" "all" \
        "cx.c3.theunarchiver" "org.debian.deb-archive" "all" \
        "cx.c3.theunarchiver" "org.gnu.gnu-tar-archive" "all" \
        "cx.c3.theunarchiver" "org.gnu.gnu-zip-archive" "all" \
        "cx.c3.theunarchiver" "org.gnu.gnu-zip-tar-archive" "all" \
        "cx.c3.theunarchiver" "org.tukaani.lzma-archive" "all" \
        "cx.c3.theunarchiver" "org.tukaani.xz-archive" "all" \
        "cx.c3.theunarchiver" "public.bzip2-archive" "all" \
        "cx.c3.theunarchiver" "public.cpio-archive" "all" \
        "cx.c3.theunarchiver" "public.tar-archive" "all" \
        "cx.c3.theunarchiver" "public.tar-bzip2-archive" "all" \
        "cx.c3.theunarchiver" "public.z-archive" "all" \
        "cx.c3.theunarchiver" "public.zip-archive" "all" \
        "cx.c3.theunarchiver" "public.zip-archive.first-part" "all" \
        "org.gnu.Emacs" "dyn.ah62d4rv4ge8086xh" "all" \
        "org.inkscape.Inkscape" "public.svg-image" "editor" \
        "org.videolan.vlc" "com.apple.m4v-video" "all" \
        "org.videolan.vlc" "com.microsoft.windows-media-wmv" "all" \
        "org.videolan.vlc" "org.videolan.3gp" "all" \
        "org.videolan.vlc" "org.videolan.aac" "all" \
        "org.videolan.vlc" "org.videolan.ac3" "all" \
        "org.videolan.vlc" "org.videolan.aiff" "all" \
        "org.videolan.vlc" "org.videolan.amr" "all" \
        "org.videolan.vlc" "org.videolan.aob" "all" \
        "org.videolan.vlc" "org.videolan.ape" "all" \
        "org.videolan.vlc" "org.videolan.asf" "all" \
        "org.videolan.vlc" "org.videolan.avi" "all" \
        "org.videolan.vlc" "org.videolan.axa" "all" \
        "org.videolan.vlc" "org.videolan.axv" "all" \
        "org.videolan.vlc" "org.videolan.divx" "all" \
        "org.videolan.vlc" "org.videolan.dts" "all" \
        "org.videolan.vlc" "org.videolan.dv" "all" \
        "org.videolan.vlc" "org.videolan.flac" "all" \
        "org.videolan.vlc" "org.videolan.flash" "all" \
        "org.videolan.vlc" "org.videolan.gxf" "all" \
        "org.videolan.vlc" "org.videolan.it" "all" \
        "org.videolan.vlc" "org.videolan.mid" "all" \
        "org.videolan.vlc" "org.videolan.mka" "all" \
        "org.videolan.vlc" "org.videolan.mkv" "all" \
        "org.videolan.vlc" "org.videolan.mlp" "all" \
        "org.videolan.vlc" "org.videolan.mod" "all" \
        "org.videolan.vlc" "org.videolan.mpc" "all" \
        "org.videolan.vlc" "org.videolan.mpeg-audio" "all" \
        "org.videolan.vlc" "org.videolan.mpeg-stream" "all" \
        "org.videolan.vlc" "org.videolan.mpeg-video" "all" \
        "org.videolan.vlc" "org.videolan.mxf" "all" \
        "org.videolan.vlc" "org.videolan.nsv" "all" \
        "org.videolan.vlc" "org.videolan.nuv" "all" \
        "org.videolan.vlc" "org.videolan.ogg-audio" "all" \
        "org.videolan.vlc" "org.videolan.ogg-video" "all" \
        "org.videolan.vlc" "org.videolan.oma" "all" \
        "org.videolan.vlc" "org.videolan.opus" "all" \
        "org.videolan.vlc" "org.videolan.quicktime" "all" \
        "org.videolan.vlc" "org.videolan.realmedia" "all" \
        "org.videolan.vlc" "org.videolan.rec" "all" \
        "org.videolan.vlc" "org.videolan.rmi" "all" \
        "org.videolan.vlc" "org.videolan.s3m" "all" \
        "org.videolan.vlc" "org.videolan.spx" "all" \
        "org.videolan.vlc" "org.videolan.tod" "all" \
        "org.videolan.vlc" "org.videolan.tta" "all" \
        "org.videolan.vlc" "org.videolan.vob" "all" \
        "org.videolan.vlc" "org.videolan.voc" "all" \
        "org.videolan.vlc" "org.videolan.vqf" "all" \
        "org.videolan.vlc" "org.videolan.vro" "all" \
        "org.videolan.vlc" "org.videolan.wav" "all" \
        "org.videolan.vlc" "org.videolan.webm" "all" \
        "org.videolan.vlc" "org.videolan.wma" "all" \
        "org.videolan.vlc" "org.videolan.wmv" "all" \
        "org.videolan.vlc" "org.videolan.wtv" "all" \
        "org.videolan.vlc" "org.videolan.wv" "all" \
        "org.videolan.vlc" "org.videolan.xa" "all" \
        "org.videolan.vlc" "org.videolan.xesc" "all" \
        "org.videolan.vlc" "org.videolan.xm" "all" \
        "org.videolan.vlc" "public.ac3-audio" "all" \
        "org.videolan.vlc" "public.audiovisual-content" "all" \
        "org.videolan.vlc" "public.avi" "all" \
        "org.videolan.vlc" "public.movie" "all" \
        "org.videolan.vlc" "public.mpeg" "all" \
        "org.videolan.vlc" "public.mpeg-2-video" "all" \
        "org.videolan.vlc" "public.mpeg-4" "all" \
      | while IFS=$'\t' read a b c; do
          defaults write org.duti DUTISettings -array-add \
            "{
              DUTIBundleIdentifier = '$a';
              DUTIUniformTypeIdentifier = '$b';
              DUTIRole = '$c';
            }"
      done

      duti "${HOME}/Library/Preferences/org.duti.plist" 2> /dev/null
    fi

    sudo rm -rf /Library/Caches/com.apple.iconservices.store
    sudo find /private/var/folders -depth \( -name com.apple.dock.iconcache -or -name com.apple.iconservices \) -exec rm -rf {} \;
    sudo touch /Applications/* /Applications/Utilities/* 2> /dev/null

    /System/Library/Frameworks/CoreServices.framework/Versions/Current/Frameworks/LaunchServices.framework/Versions/Current/Support/lsregister -kill -r -domain local -domain system -domain user

    sleep 5
    osascript -e 'tell app "Dock" to quit'
    killall Finder
  }
#+end_src

*** Configure Home

#+begin_src sh
  function config_home () {
    STORAGE="/Volumes/Storage"

    printf "%s\t%s\n" \
      "${STORAGE}/Incoming/Downloads" "Downloads" \
      "${STORAGE}/Incoming/Movies" "Movies" \
      "${STORAGE}/Incoming/TV-Shows" "TV Shows" \
      "${STORAGE}/Media" "Music" \
    | while IFS=$'\t' read a b; do
      SetFile -P -a l "${HOME}/${b}" 1> /dev/null
      chmod -h -N "${HOME}/${b}" 2> /dev/null
      rm -rf "${HOME}/${b}"
      ln -s "${a}" "${HOME}/${b}"
      chmod -h go= "${HOME}/${b}"
      chmod -h +a "group:everyone deny delete" "${HOME}/${b}"
    done
  }
#+end_src

#+begin_src sh
  function config_done () {
    p "To copy gpg public key, enter 'config_gpg_help'"
    p "To copy ssh public key, enter 'config_ssh_help'"
    p "Otherwise, enter 'private' (if configured) or 'reboot' now"
  }
#+end_src

*** config

#+begin_src sh
  function config () {
    config_mas
    config_atom
    config_bbedit
    config_desktop
    config_dock
    config_emacs
    config_vi_script
    config_istat
    config_terminal
    config_openssl
    config_dovecot
    config_sieve
    config_getmail
    config_gpg
    config_git
    config_shell
    config_ssh
    #config_vim
    config_zsh
    config_loginitems
    config_handlers
    config_home
    config_done
  }
#+end_src

** Private

This section includes license keys, registration codes, and serial numbers.

#+begin_src sh
  function private () {
    printf "%s\n"
#+end_src

-----BEGIN PGP MESSAGE-----

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
=bLsa
-----END PGP MESSAGE-----

#+begin_src sh
  }
#+end_src


** Commands

#+begin_src sh
  function display_help () {
    cat << EOF

    Initialize:
      $(which init)

    Install:
      $(which install)

  EOF
  }

  display_help
  fi
#+end_src
