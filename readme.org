* macOS Setup
:properties:
:header-args: :tangle setup.command
:header-args:sh: :shebang #!/bin/sh :results silent
:end:
#+startup: content nohideblocks hidestars indent

From clean install to fully configured.

#+begin_example sh :tangle no
  sudo "/Applications/Install macOS Sierra.app/Contents/Resources/createinstallmedia" \
    --applicationpath "/Applications/Install macOS Sierra.app" --nointeraction \
    --volume "/Volumes/Install"
#+end_example

** Initialize

*** New Terminal

#+begin_src sh
  if [ -z "$1" ]; then
    if [[ ! $SHELL == *"zsh" ]]; then
      chsh -s /bin/zsh
    fi

    osascript << EOF
  tell app "Terminal" to do script "source ${0} 0"
  EOF
    clear
  else
#+end_src

*** Constants

#+begin_src sh
  CACHE="/Volumes/Install"
  DOMAIN="ptb2.me"
  MAIL="mail.${DOMAIN}"

  MAS="$(getconf DARWIN_USER_CACHE_DIR)com.apple.appstore"
#+end_src

*** Utility Functions

#+begin_src sh
  function p () {
    printf "\n\033[1m\033[34m%s\033[0m\n\n" "${1}"
  }
#+end_src

*** Disable Repeated Requests for Password

#+begin_src sh
  function init_sudoers () {
    p "Disable repeated requests for password"

    printf "%s\t%s\n" \
      "timeout" "Defaults:%admin timestamp_timeout=-1" \
      "installer" "%admin ALL=(ALL) NOPASSWD:SETENV: /usr/sbin/installer" \
      "tty_tickets" 'Defaults:%admin !tty_tickets' \
    | while IFS=$'\t' read a b; do
      sudo tee "/etc/sudoers.d/${a}" <<< "${b}" > /dev/null
    done
  }
#+end_src

*** Disable System and Disk Sleep

#+begin_src sh
function init_no_sleep () {
  p "Disable system and disk sleep"

  sudo pmset -a sleep 0
  sudo pmset -a disksleep 0
}
#+end_src

*** Set Computer Name and Local Hostname

#+begin_src sh
  function init_hostname () {
    p "Set computer name and local hostname"
#+end_src

*Computer Name*
#+begin_src sh
  sudo systemsetup -setcomputername $(ruby -e "print '$(hostname -s)'.capitalize") &> /dev/null
#+end_src

*Local Hostname*
#+begin_src sh
  sudo systemsetup -setlocalsubnetname $(hostname -s) &> /dev/null
#+end_src

#+begin_src sh
  }
#+end_src

*** Set Permissions on Install Destinations

#+begin_src sh
  function init_perms () {
    p "Set permissions on install destinations"

    for c in \
      "/Library/ColorPickers" \
      "/Library/Fonts" \
      "/Library/Input Methods" \
      "/Library/PreferencePanes" \
      "/Library/QuickLook" \
      "/Library/Screen Savers" \
      "/usr/local" \
    ; do
      sudo chgrp -R admin "${c}"
      sudo chmod -R g+w "${c}"
    done

    if [ ! -d "/usr/local/bin" ]; then
      mkdir -m o-w -p "/usr/local/bin"
    fi
  }
#+end_src

*** Install Developer Tools

#+begin_src sh
  function init_devtools () {
    p "Install developer tools"

    if [ -d "${CACHE}/Updates" ]; then
      sudo chown -R "${USER}" "/Library/Updates"
      rsync -a --delay-updates \
        "${CACHE}/Updates/" "/Library/Updates/"
    fi

    xcode-select --install
  }
#+end_src

*** Install macOS Updates

#+begin_src sh
  function init_updater () {
    p "Install macOS updates"

    if [ -d "${CACHE}/Updates" ]; then
      sudo chown -R "${USER}" "/Library/Updates"
      rsync -a --delay-updates \
        "${CACHE}/Updates/" "/Library/Updates/"
    fi

    sudo softwareupdate --install --all
  }
#+end_src

*** Create Primary Account

#+begin_src sh
  function init_account () {
    p "Create primary user account"

    /bin/echo -n "Real name: " && read NAME
    /bin/echo -n "Account name: " && read U
    /bin/echo -n "Email address: " && read EMAIL

    sudo chgrp admin "/Library/User Pictures"
    sudo chmod g+w "/Library/User Pictures"
    curl "https://www.gravatar.com/avatar/$(md5 -qs $EMAIL).jpg?s=512" --silent \
      --compressed --location --output "/Library/User Pictures/${EMAIL}.jpg" \

    sudo defaults write \
      "/System/Library/User Template/Non_localized/Library/Preferences/.GlobalPreferences.plist" \
      "com.apple.swipescrolldirection" -bool false

    sudo sysadminctl -addUser "${U}" -fullName "${NAME}" -password - \
      -shell "/bin/zsh" -admin -picture "/Library/User Pictures/${EMAIL}.jpg"

    p "Press any key to log out."
    /usr/bin/read -n 1 -s

    osascript -e 'tell application "loginwindow" to «event aevtrlgo»'
  }
#+end_src

*** init

#+begin_src sh
  function init () {
    init_sudoers
    init_no_sleep
    init_hostname
    init_perms
    init_devtools
    init_updater
    init_account
  }
#+end_src

** Install

*** Homebrew and App Store Caches

#+begin_src sh
  function install_caches () {
    if [ -d "${CACHE}/Homebrew" ]; then
      p "Restore Homebrew caches from backup"

      rsync -a --delay-updates \
        "${CACHE}/Homebrew/" "${HOME}/Library/Caches/Homebrew/"
    fi

    if [ -d "${CACHE}/Updates" ]; then
      p "Restore App Store caches from backup"

      sudo chown -R "${USER}" "${MAS}"
      rsync -a --delay-updates \
        "${CACHE}/App Store/" "${MAS}/"
    fi
  }
#+end_src

*** Default Paths

#+begin_src sh
  function install_paths () {
    if ! grep -Fq "/usr/local/sbin" /etc/paths; then
      p "Add '/usr/local/sbin' to default \$PATH"

      sudo sed -i -e "/\/usr\/sbin/{x;s/$/\/usr\/local\/sbin/;G;}" /etc/paths
    fi
  }
#+end_src

*** [[https://brew.sh/][Homebrew]]

#+begin_src sh
  function install_brew () {
    p "Install Homebrew"

    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

    brew analytics off

    brew update
    brew doctor

    brew tap "homebrew/bundle"
#+end_src

*** [[https://github.com/Homebrew/homebrew-bundle][Brewfile]]

#+begin_src sh
  cat > /usr/local/Brewfile << EOF
  cask_args colorpickerdir: "/Library/ColorPickers",
    fontdir: "/Library/Fonts",
    input_methoddir: "/Library/Input Methods",
    prefpanedir: "/Library/PreferencePanes",
    qlplugindir: "/Library/QuickLook",
    screen_saverdir: "/Library/Screen Savers"

  tap "homebrew/bundle"
  tap "caskroom/cask"

  brew "mas"
  mas "autoping", id: 632347870

  cask "docker-toolbox"
  cask "java"
  cask "vmware-fusion"

  cask "xquartz"
  cask "inkscape"
  cask "wireshark"

  brew "aspell",
    args: ["lang=en"]
  brew "chromedriver"
  brew "coreutils"
  tap "homebrew/services"
  brew "dovecot",
    args: [
    "with-pam",
    "with-pigeonhole",
    "with-pigeonhole-unfinished-features"]
  brew "duti"
  brew "fdupes"
  brew "gawk"
  brew "getmail"
  brew "git"
  brew "gnu-sed",
    args: ["with-default-names"]
  brew "gnupg"
  brew "gpac"
  brew "hub"
  brew "ievms"
  brew "imagemagick"
  brew "mercurial"
  brew "mp4v2"
  brew "mtr"
  brew "nmap"
  brew "node"
  brew "openssl"
  brew "pinentry-mac"
  brew "python"
  brew "python3"
  brew "rsync"
  brew "ruby"
  brew "selenium-server-standalone"
  brew "sqlite"
  brew "stow"
  brew "terminal-notifier"
  brew "trash"
  brew "vim"
  brew "wget"
  brew "youtube-dl"
  brew "zsh"

  cask "adium"
  cask "airfoil"
  cask "alfred"
  cask "arduino"
  cask "atom"
  cask "autodmg"
  cask "bbedit"
  cask "caffeine"
  cask "carbon-copy-cloner"
  cask "charles"
  cask "dash"
  cask "dropbox"
  cask "duet"
  cask "exifrenamer"
  cask "firefox"
  cask "flux"
  cask "github-desktop"
  cask "gitup"
  cask "google-chrome"
  cask "handbrake"
  cask "hermes"
  cask "imageoptim"
  cask "integrity"
  cask "istat-menus"
  cask "jubler"
  cask "little-snitch"
  cask "machg"
  cask "makemkv"
  cask "menubar-countdown"
  cask "meteorologist"
  cask "moom"
  cask "mp4tools"
  cask "munki"
  cask "musicbrainz-picard"
  cask "namechanger"
  cask "nvalt"
  cask "nzbget"
  cask "nzbvortex"
  cask "openemu"
  cask "opera"
  cask "pacifist"
  cask "platypus"
  cask "plex-media-server"
  cask "quitter"
  cask "rescuetime"
  cask "scrivener"
  cask "sitesucker"
  cask "sizeup"
  cask "sketch"
  cask "sketchup"
  cask "skitch"
  cask "skype"
  cask "slack"
  cask "sonarr"
  cask "sonarr-menu"
  cask "sourcetree"
  cask "steermouse"
  cask "subler"
  cask "sublime-text"
  cask "the-unarchiver"
  cask "time-sink"
  cask "torbrowser"
  cask "tower"
  cask "transmit"
  cask "vimr"
  cask "vlc"
  cask "xld"

  tap "railwaycat/emacsmacport"
  cask "railwaycat/emacsmacport/emacs-mac-spacemacs-icon"

  tap "caskroom/fonts"
  cask "caskroom/fonts/font-inconsolata-lgc"

  tap "caskroom/versions"
  cask "caskroom/versions/safari-technology-preview"

  tap "ptb/custom"
  cask "ptb/custom/adobe-creative-cloud-2014"
  cask "ptb/custom/blankscreen"
  cask "ptb/custom/composer"
  cask "ptb/custom/enhanced-dictation"
  cask "ptb/custom/ipmenulet"
  cask "ptb/custom/pcalc-3"
  cask "ptb/custom/sketchup-pro"
  cask "ptb/custom/synergy"

  mas "1Password", id: 443987910
  mas "Coffitivity", id: 659901392
  mas "Growl", id: 467939042
  mas "HardwareGrowler", id: 475260933
  mas "I Love Stars", id: 402642760
  mas "Icon Slate", id: 439697913
  mas "Justnotes", id: 511230166
  mas "Keynote", id: 409183694
  mas "Numbers", id: 409203825
  mas "Pages", id: 409201541
  mas "WiFi Explorer", id: 494803304

  tap "homebrew/nginx"
  brew "homebrew/nginx/nginx-full",
    args: [
    "with-dav-ext-module",
    "with-fancyindex-module",
    "with-gzip-static",
    "with-http2",
    "with-mp4-h264-module",
    "with-passenger",
    "with-push-stream-module",
    "with-secure-link",
    "with-webdav" ]

  brew "ptb/custom/ffmpeg",
    args: [
    "with-chromaprint",
    "with-fdk-aac",
    "with-fontconfig",
    "with-freetype",
    "with-frei0r",
    "with-game-music-emu",
    "with-lame",
    "with-libass",
    "with-libbluray",
    "with-libbs2b",
    "with-libcaca",
    "with-libgsm",
    "with-libmodplug",
    "with-libsoxr",
    "with-libssh",
    "with-libvidstab",
    "with-libvorbis",
    "with-libvpx",
    "with-opencore-amr",
    "with-openh264",
    "with-openjpeg",
    "with-openssl",
    "with-opus",
    "with-pkg-config",
    "with-rtmpdump",
    "with-rubberband",
    "with-schroedinger",
    "with-sdl2",
    "with-snappy",
    "with-speex",
    "with-tesseract",
    "with-texi2html",
    "with-theora",
    "with-tools",
    "with-two-lame",
    "with-wavpack",
    "with-webp",
    "with-x264",
    "with-x265",
    "with-xvid",
    "with-xz",
    "with-yasm",
    "with-zeromq",
    "with-zimg" ]

  mas "Xcode", id: 497799835
  EOF
  }
#+end_src

*** macOS Software

#+begin_src sh
  function install_macos_sw () {
    p "Install macOS software with Homebrew"

    cd /usr/local/ && brew bundle && cd "${HOME}"

    if [ -d "/Applications/Xcode.app" ]; then
      sudo xcodebuild -license accept
    fi

    brew upgrade
  }
#+end_src

*** Link Utilities

#+begin_src sh
  function install_links () {
    p "Link System and Xcode utilities to Applications"

    brew linkapps 2> /dev/null
    cd /Applications \
      && for a in /System/Library/CoreServices/Applications/*; do
        ln -s "../..$a" . 2> /dev/null
      done && \
    cd "${HOME}"

    if [ -d "/Applications/Xcode.app" ]; then
      cd /Applications \
        && for b in /Applications/Xcode.app/Contents/Applications/*; do
          ln -s "../..$b" . 2> /dev/null
        done \
        && for c in /Applications/Xcode.app/Contents/Developer/Applications/*; do
          ln -s "../..$c" . 2> /dev/null
        done && \
      cd "${HOME}"
    fi
  }
#+end_src

*** TODO: Node Software

#+begin_src sh :tangle no
  function install_node_sw () {
    p "Install Node software"
  }
#+end_src

*** TODO: Python Software

#+begin_src sh :tangle no
  function install_python_sw () {
    p "Install Python software"
  }
#+end_src

*** TODO: Ruby Software

#+begin_src sh :tangle no
  function install_ruby_sw () {
    p "Install Ruby software"
  }
#+end_src

*** install

#+begin_src sh
  function install () {
    install_caches
    install_paths
    install_brew
    install_macos_sw
    install_links
    #install_node_sw
    #install_python_sw
    #install_ruby_sw

    which prefs
  }
#+end_src

** Preferences

*** Autoping

#+begin_src sh
  function prefs_autoping () {
    defaults write -app autoping Hostname -string "google.com"
    defaults write -app autoping LaunchAtLogin -bool true
    defaults write -app autoping ShowNotifications -bool true
    defaults write -app autoping ShowPacketLossText -bool true
  }
#+end_src

*** Finder

**** General

#+begin_src sh
  function prefs_finder () {
    p "Set Finder preferences"
#+end_src

*Show these items on the desktop: Hard disks:* =on=
#+begin_src sh
  defaults write com.apple.finder ShowHardDrivesOnDesktop -bool false
#+end_src

*Show these items on the desktop: External disks:* =on=
#+begin_src sh
  defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool false
#+end_src

*Show these items on the desktop: CDs, DVDs, and iPods:* =on=
#+begin_src sh
  defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool false
#+end_src

*Show these items on the desktop: Connected servers:* =on=
#+begin_src sh
  defaults write com.apple.finder ShowMountedServersOnDesktop -bool true
#+end_src

*New Finder windows show:* =${HOME}=
#+begin_src sh
  defaults write com.apple.finder NewWindowTarget -string "PfHm"
  defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}/"
#+end_src

**** Advanced

*Show all filename extensions:* =on=
#+begin_src sh
  defaults write -globalDomain AppleShowAllExtensions -bool true
#+end_src

*Show warning before changing an extension:* =off=
#+begin_src sh
  defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false
#+end_src

*Show warning before removing from iCloud Drive:* =on=
#+begin_src sh
  defaults write com.apple.finder FXEnableRemoveFromICloudDriveWarning -bool true
#+end_src

*Show warning before emptying the Trash:* =on=
#+begin_src sh
  defaults write com.apple.finder WarnOnEmptyTrash -bool false
#+end_src

**** View

*Show Path Bar*
#+begin_src sh
  defaults write com.apple.finder ShowPathbar -bool true
#+end_src

*Show Status Bar*
#+begin_src sh
  defaults write com.apple.finder ShowStatusBar -bool true
#+end_src

*Customize Toolbar…*
#+begin_src sh
  defaults write com.apple.finder "NSToolbar Configuration Browser" '{ "TB Item Identifiers" = ( "com.apple.finder.BACK", "com.apple.finder.PATH", "com.apple.finder.SWCH", "com.apple.finder.ARNG", "NSToolbarFlexibleSpaceItem", "com.apple.finder.SRCH", "com.apple.finder.ACTN" ); "TB Display Mode" = 2; }'
#+end_src

**** View Options

*Show Library Folder:* =on=
#+begin_src sh
  chflags nohidden "${HOME}/Library"
#+end_src

**** Window

*Copy*
#+begin_src sh
  defaults write com.apple.finder CopyProgressWindowLocation -string "{2160, 23}"
#+end_src

#+begin_src sh
  }
#+end_src

*** Moom

**** General

#+begin_src sh
  function prefs_moom () {
    p "Set Moom preferences"
#+end_src

*Treat drawers as part of their parent windows:* =on=
#+begin_src sh
  defaults write -app Moom "Allow For Drawers" -bool true
#+end_src

*Separate windows by* =2= *pt*
#+begin_src sh
  defaults write -app Moom "Grid Spacing" -bool true
  defaults write -app Moom "Grid Spacing: Gap" -int 2
  defaults write -app Moom "Grid Spacing: Apply To Edges" -bool false
#+end_src

*Show preferences on launch:* =off=
#+begin_src sh
  defaults write -app Moom "Stealth Mode" -bool true
#+end_src

*Run as* =faceless= *application*
#+begin_src sh
  defaults write -app Moom "Application Mode" -int 2
#+end_src

**** Mouse

=on= *Enable Move & Zoom grid with* =10= *×* =6= *cells*
#+begin_src sh
  defaults write -app Moom "Mouse Controls Grid" -bool true
  defaults write -app Moom "Mouse Controls Grid: Columns" -int 10
  defaults write -app Moom "Mouse Controls Grid: Rows" -int 6
#+end_src

=on= *Enable access to custom controls*
#+begin_src sh
  defaults write -app Moom "Mouse Controls Include Custom Controls" -bool true
#+end_src

=on= *Bring moomed windows to the front automatically*
#+begin_src sh
  defaults write -app Moom "Mouse Controls Auto-Activate Window" -bool true
#+end_src

=off= *Move & Zoom when dragging a window to a display edge or corner*
#+begin_src sh
  defaults write -app Moom "Snap" -bool false
#+end_src

**** Custom

#+begin_src sh
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0, 0.33333}, {0.5, 0.66666}}"; }'
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0, 0}, {0.3, 0.33333}}"; }'
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0.4, 0.33333}, {0.3, 0.66666}}"; }'
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0.3, 0}, {0.4, 0.33333}}"; }'
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0.7, 0.66666}, {0.3, 0.33333}}"; }'
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0.7, 0.33333}, {0.3, 0.33333}}"; }'
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0.7, 0}, {0.3, 0.33333}}"; }'
#+end_src

*Define window sizes using* =10= *×* =6= *cells*
#+begin_src sh
  defaults write -app Moom "Configuration Grid: Columns" -int 10
  defaults write -app Moom "Configuration Grid: Rows" -int 6
#+end_src

#+begin_src sh
  }
#+end_src

*** nvALT

**** General

#+begin_src sh
  function prefs_nvalt () {
    p "Set nvALT preferences"
#+end_src

*List Text Size:* =Small=
#+begin_src sh
  defaults write -app nvALT TableFontPointSize -int 11
#+end_src

*Bring-to-Front Hotkey:* =(None)=
#+begin_src sh
  defaults write -app nvALT AppActivationKeyCode -int -1
  defaults write -app nvALT AppActivationModifiers -int -1
#+end_src

*Auto-select notes by title when searching:* =on=
#+begin_src sh
  defaults write -app nvALT AutoCompleteSearches -bool true
#+end_src

*Confirm note deletion:* =on=
#+begin_src sh
  defaults write -app nvALT ConfirmNoteDeletion -bool true
#+end_src

*Quit when closing window:* =off=
#+begin_src sh
  defaults write -app nvALT QuitWhenClosingMainWindow -bool false
#+end_src

*Show menu bar icon:* =on=
#+begin_src sh
  defaults write -app nvALT StatusBarItem -bool true
#+end_src

*Hide Dock Icon*
#+begin_src sh
  defaults write -app nvALT ShowDockIcon -bool false
#+end_src

**** Editing

*Styled Text: Copy basic styles from other apps:* =off=
#+begin_src sh
  defaults write -app nvALT PastePreservesStyle -bool false
#+end_src

*Spelling: Check as you type:* =off=
#+begin_src sh
  defaults write -app nvALT CheckSpellingInNoteBody -bool false
#+end_src

*Tab Key:* =Indent lines=
#+begin_src sh
  defaults write -app nvALT TabKeyIndents -bool true
#+end_src

*Soft tabs (spaces):* =on=
#+begin_src sh
  defaults write -app nvALT UseSoftTabs -bool true
#+end_src

*Links: Make URLs clickable links:* =on=
#+begin_src sh
  defaults write -app nvALT MakeURLsClickable -bool true
#+end_src

*Links: Suggest titles for note-links:* =off=
#+begin_src sh
  defaults write -app nvALT AutoSuggestLinks -bool false
#+end_src

*URL Import: Convert imported URLs to Markdown:* =off=
#+begin_src sh
  defaults write -app nvALT UseMarkdownImport -bool false
#+end_src

*URL Import: Process with Readability:* =off=
#+begin_src sh
  defaults write -app nvALT UseReadability -bool false
#+end_src

*Direction: Right-To-Left (RTL):* =off=
#+begin_src sh
  defaults write -app nvALT rtl -bool false
#+end_src

*Auto-pair:* =on=
#+begin_src sh
  defaults write -app nvALT UseAutoPairing -bool true
#+end_src

*External editor:* =Emacs.app=
#+begin_src sh
  defaults write -app nvALT DefaultEEIdentifier -string "org.gnu.Emacs"
  defaults write -app nvALT UserEEIdentifiers -array "com.apple.TextEdit" "org.gnu.Emacs"
#+end_src

**** Fonts & Colors

*Body Font:* =InconsolataLGC 13=
#+begin_src sh
  defaults write -app nvALT NoteBodyFont -data 040b73747265616d747970656481e803840140848484064e53466f6e741e8484084e534f626a65637400858401692884055b3430635d060000001e000000fffe49006e0063006f006e0073006f006c006100740061004c004700430000008401660d8401630098019800980086
#+end_src

*Search Highlight:* =on=
#+begin_src sh
  defaults write -app nvALT HighlightSearchTerms -bool true
#+end_src

*Search Highlight:* =#CCFFCC=
#+begin_src sh
  defaults write -app nvALT SearchTermHighlightColor -data 040b73747265616d747970656481e803840140848484074e53436f6c6f72008484084e534f626a65637400858401630184046666666683cdcc4c3f0183cdcc4c3f0186
#+end_src

*Foreground Text:* =#CCCCCC=
#+begin_src sh
  defaults write -app nvALT ForegroundTextColor -data 040b73747265616d747970656481e803840140848484074e53436f6c6f72008484084e534f626a65637400858401630184046666666683cdcc4c3f83cdcc4c3f83cdcc4c3f0186
#+end_src

*Background:* =#1A1A1A=
#+begin_src sh
  defaults write -app nvALT BackgroundTextColor -data 040b73747265616d747970656481e803840140848484074e53436f6c6f72008484084e534f626a65637400858401630184046666666683d1d0d03d83d1d0d03d83d1d0d03d0186
#+end_src

*Always Show Grid Lines in Notes List:* =on=
#+begin_src sh
  defaults write -app nvALT ShowGrid -bool true
#+end_src

*Alternating Row Colors:* =on=
#+begin_src sh
  defaults write -app nvALT AlternatingRows -bool true
#+end_src

*Use nvALT Scrollbars:* =off=
#+begin_src sh
  defaults write -app nvALT UseETScrollbarsOnLion -bool false
#+end_src

*Keep Note Body Width Readable:* =on=
#+begin_src sh
  defaults write -app nvALT KeepsMaxTextWidth -bool true
#+end_src

*Max. Note Body Width:* =650= *pixels*
#+begin_src sh
  defaults write -app nvALT NoteBodyMaxWidth -int 650
#+end_src

**** View

*Switch to Vertical Layout*
#+begin_src sh
  defaults write -app nvALT HorizontalLayout -bool false
#+end_src

*Columns* > =Title= =Tags=
#+begin_src sh
  defaults write -app nvALT NoteAttributesVisible -array "Title" "Tags"
#+end_src

*Sort By* > =Date Modified=
#+begin_src sh
  defaults write -app nvALT TableIsReverseSorted -bool true
  defaults write -app nvALT TableSortColumn -string "Date Modified"
#+end_src

*Show Note Previews in Title*
#+begin_src sh
  defaults write -app nvALT TableColumnsHaveBodyPreview -bool true
#+end_src

#+begin_src sh
  }
#+end_src

*** Safari

**** General

#+begin_src sh
  function prefs_safari () {
    p "Set Safari preferences"
#+end_src

*Safari opens with:* =A new window=
#+begin_src sh
  defaults write -app Safari AlwaysRestoreSessionAtLaunch -bool false
  defaults write -app Safari OpenPrivateWindowWhenNotRestoringSessionAtLaunch -bool false
#+end_src

*New windows open with:* =Empty Page=
#+begin_src sh
  defaults write -app Safari NewWindowBehavior -int 1
#+end_src

*New tabs open with:* =Empty Page=
#+begin_src sh
  defaults write -app Safari NewTabBehavior -int 1
#+end_src

=off= *Open “safe” files after downloading*
#+begin_src sh
  defaults write -app Safari AutoOpenSafeDownloads -bool false
#+end_src

**** Tabs

*Open pages in tabs instead of windows:* =Always=
#+begin_src sh
  defaults write -app Safari TabCreationPolicy -int 2
#+end_src

**** AutoFill

=off= *Using info from my contacts*
#+begin_src sh
  defaults write -app Safari AutoFillFromAddressBook -bool false
#+end_src

=on= *User names and passwords*
#+begin_src sh
  defaults write -app Safari AutoFillPasswords -bool true
#+end_src

=off= *Credit cards*
#+begin_src sh
  defaults write -app Safari AutoFillCreditCardData -bool false
#+end_src

=off= *Other forms*
#+begin_src sh
  defaults write -app Safari AutoFillMiscellaneousForms -bool false
#+end_src

**** Search

=on= *Include search engine suggestions*
#+begin_src sh
  defaults write -app Safari SuppressSearchSuggestions -bool false
#+end_src

*Smart Search Field:* =off= *Include Safari Suggestions*
#+begin_src sh
  defaults write -app Safari UniversalSearchEnabled -bool false
#+end_src

*Smart Search Field:* =on= *Enable Quick Website Search*
#+begin_src sh
  defaults write -app Safari WebsiteSpecificSearchEnabled -bool true
#+end_src

*Smart Search Field:* =on= *Preload Top Hit in the background*
#+begin_src sh
  defaults write -app Safari PreloadTopHit -bool true
#+end_src

=off= *Show Favorites*
#+begin_src sh
  defaults write -app Safari ShowFavoritesUnderSmartSearchField -bool false
#+end_src

**** Privacy

*Website use of location services:* =Deny without prompting=
#+begin_src sh
  defaults write -app Safari SafariGeolocationPermissionPolicy -int 0
#+end_src

*Website tracking:* =on= *Ask websites not to track me*
#+begin_src sh
  defaults write -app Safari SendDoNotTrackHTTPHeader -bool true
#+end_src

*Apple Pay:* =on= *Allow websites to check if Apple Pay is set up*
#+begin_src sh
  defaults write -app Safari "com.apple.Safari.ContentPageGroupIdentifier.WebKit2ApplePayCapabilityDisclosureAllowed" -bool true
#+end_src

**** Notifications

=off= *Allow websites to ask for permission to send push notifications*
#+begin_src sh
  defaults write -app Safari CanPromptForPushNotifications -bool false
#+end_src

**** Advanced

*Smart Search Field:* =on= *Show full website address*
#+begin_src sh
  defaults write -app Safari ShowFullURLInSmartSearchField -bool true
#+end_src

*Default encoding:* =Unicode (UTF-8)=
#+begin_src sh
  defaults write -app Safari WebKitDefaultTextEncodingName -string "utf-8"
  defaults write -app Safari "com.apple.Safari.ContentPageGroupIdentifier.WebKit2DefaultTextEncodingName" -string "utf-8"
#+end_src

=on= *Show Develop menu in menu bar*
#+begin_src sh
  defaults write -app Safari IncludeDevelopMenu -bool true
  defaults write -app Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true
  defaults write -app Safari "com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled" -bool true
#+end_src

**** View

*Show Favorites Bar*
#+begin_src sh
  defaults write -app Safari "ShowFavoritesBar-v2" -bool true
#+end_src

*Show Tab Bar*
#+begin_src sh
  defaults write -app Safari AlwaysShowTabBar -bool true
#+end_src

*Show Status Bar*
#+begin_src sh
  defaults write -app Safari ShowStatusBar -bool true
  defaults write -app Safari ShowStatusBarInFullScreen -bool true
#+end_src

#+begin_src sh
  }
#+end_src

*** System

**** General

#+begin_src sh
  function prefs_general () {
    p "Set System preferences"
#+end_src

*Appearance:* =Graphite= *For Buttons, Menus, and Windows*
#+begin_src sh
  defaults write -globalDomain "AppleAquaColorVariant" -int 6
#+end_src

=on= *Use dark menu bar and Dock*
#+begin_src sh
  defaults write -globalDomain "AppleInterfaceStyle" -string "Dark"
#+end_src

=off= *Automatically hide and show the menu bar*
#+begin_src sh
  defaults write -globalDomain "_HIHideMenuBar" -bool false
#+end_src

*Highlight color:* =#99CC99= =Other…=
#+begin_src sh
  defaults write -globalDomain "AppleHighlightColor" -string "0.600000 0.800000 0.600000"
#+end_src

*Sidebar icon size:* =Small=
#+begin_src sh
  defaults write -globalDomain "NSTableViewDefaultSizeMode" -int 1
#+end_src

*Show scroll bars:* =Always=
#+begin_src sh
  defaults write -globalDomain "AppleShowScrollBars" -string "Always"
#+end_src

*Click in the scroll bar to:* =Jump to the next page=
#+begin_src sh
  defaults write -globalDomain "AppleScrollerPagingBehavior" -bool false
#+end_src

=on= *Ask to keep changes when closing documents*
#+begin_src sh
  defaults write -globalDomain "NSCloseAlwaysConfirmsChanges" -bool true
#+end_src

=on= *Close windows when quitting an app*
#+begin_src sh
  defaults write -globalDomain "NSQuitAlwaysKeepsWindows" -bool false
#+end_src

*Recent items:* =None= *Documents, Apps, and Servers*
#+begin_src sh
  osascript << EOF
    tell application "System Events"
      tell appearance preferences
        set recent documents limit to 0
        set recent applications limit to 0
        set recent servers limit to 0
      end tell
    end tell
  EOF
#+end_src

=on= *Allow Handoff between this Mac and your iCloud devices*
#+begin_src sh
  defaults -currentHost write com.apple.coreservices.useractivityd "ActivityAdvertisingAllowed" -bool true
  defaults -currentHost write com.apple.coreservices.useractivityd "ActivityReceivingAllowed" -bool true
#+end_src

=on= *Use LCD font smoothing when available*
#+begin_src sh
  defaults -currentHost delete -globalDomain "AppleFontSmoothing" 2> /dev/null
#+end_src

#+begin_src sh
  }
#+end_src

**** Desktop & Screen Saver: Screen Saver

#+begin_src sh
  function prefs_screensaver () {
#+end_src

*Start after:* =Never=
#+begin_src sh
  defaults -currentHost write com.apple.screensaver "idleTime" -int 0
#+end_src

*Hot Corners…: Top Left:* =⌘ Mission Control=
#+begin_src sh
  defaults write com.apple.dock "wvous-tl-corner" -int 2
  defaults write com.apple.dock "wvous-tl-modifier" -int 1048576
#+end_src

*Hot Corners…: Bottom Left:* =Put Display to Sleep=
#+begin_src sh
  defaults write com.apple.dock "wvous-bl-corner" -int 10
  defaults write com.apple.dock "wvous-bl-modifier" -int 0
#+end_src

#+begin_src sh
  }
#+end_src

**** Dock

#+begin_src sh
  function prefs_dock () {
#+end_src

*Size:* =32=
#+begin_src sh
  defaults write com.apple.dock "tilesize" -int 32
#+end_src

=off= *Magnification*
#+begin_src sh
  defaults write com.apple.dock "magnification" -bool false
  defaults write com.apple.dock "largesize" -int 64
#+end_src

*Position on screen:* =Right=
#+begin_src sh
  defaults write com.apple.dock "orientation" -string "right"
#+end_src

*Minimize windows using:* =Scale effect=
#+begin_src sh
  defaults write com.apple.dock "mineffect" -string "scale"
#+end_src

*Prefer tabs when opening documents:* =Always=
#+begin_src sh
  defaults write -globalDomain "AppleWindowTabbingMode" -string "always"
#+end_src

=off= *Double-click a window’s title bar to* =None=
#+begin_src sh
  defaults write -globalDomain "AppleActionOnDoubleClick" -string "None"
#+end_src

=on= *Minimize windows into application icon*
#+begin_src sh
  defaults write com.apple.dock "minimize-to-application" -bool true
#+end_src

=off= *Animate opening applications*
#+begin_src sh
  defaults write com.apple.dock "launchanim" -bool false
#+end_src

=on= *Automatically hide and show the Dock*
#+begin_src sh
  defaults write com.apple.dock "autohide" -bool true
#+end_src

=on= *Show indicators for open applications*
#+begin_src sh
  defaults write com.apple.dock "show-process-indicators" -bool true
#+end_src

#+begin_src sh
  }
#+end_src

**** Security & Privacy: General

#+begin_src sh
  function prefs_security () {
#+end_src

=on= *Require password* =5 seconds= *after sleep or screen saver begins*
#+begin_src sh
  defaults write com.apple.screensaver "askForPassword" -int 1
  defaults write com.apple.screensaver "askForPasswordDelay" -int 5
#+end_src

#+begin_src sh
  }
#+end_src

**** Energy Saver: Power

#+begin_src sh
  function prefs_power () {
#+end_src

*Turn display off after:* =20 min=
#+begin_src sh
  sudo pmset -c displaysleep 20
#+end_src

=on= *Prevent computer from sleeping automatically when the display is off*
#+begin_src sh
  sudo pmset -c sleep 0
#+end_src

=60 min= *Put hard disks to sleep when possible*
#+begin_src sh
  sudo pmset -c disksleep 60
#+end_src

=on= *Wake for network access*
#+begin_src sh
  sudo pmset -c womp 1
#+end_src

=on= *Start up automatically after a power failure*
#+begin_src sh
  sudo pmset -c autorestart 1
#+end_src

=on= *Enable Power Nap*
#+begin_src sh
  sudo pmset -c powernap 1
#+end_src

#+begin_src sh
  }
#+end_src

**** Energy Saver: UPS

#+begin_src sh
  function prefs_ups () {
#+end_src

*Turn display off after:* =2 min=
#+begin_src sh
  sudo pmset -u displaysleep 2
#+end_src

=on= *Slightly dim the display when using this power source*
#+begin_src sh
  sudo pmset -u lessbright 1
#+end_src

=on= *Shut down the computer after using the UPS battery for:* =5 min=
#+begin_src sh
  sudo pmset -u haltafter 5
#+end_src

=off= *Shut down the computer when the time remaining on the UPS battery is:*
#+begin_src sh
  sudo pmset -u haltremain -1
#+end_src

=off= *Shut down the computer when the UPS battery level is below:*
#+begin_src sh
  sudo pmset -u haltlevel -1
#+end_src

#+begin_src sh
  }
#+end_src

**** Keyboard: Text

#+begin_src sh
  function prefs_text () {
#+end_src

=off= *Capitalize words automatically*
#+begin_src sh
  defaults write -globalDomain NSAutomaticCapitalizationEnabled -bool false
#+end_src

=off= *Add period with double-space*
#+begin_src sh
  defaults write -globalDomain NSAutomaticPeriodSubstitutionEnabled -bool false
#+end_src

=off= *Use smart quotes and dashes*
#+begin_src sh
  defaults write -globalDomain NSAutomaticQuoteSubstitutionEnabled -bool false
#+end_src

#+begin_src sh
  }
#+end_src

**** Mouse

#+begin_src sh
  function prefs_mouse () {
#+end_src

=off= *Scroll direction: Natural*
#+begin_src sh
  defaults write -globalDomain com.apple.swipescrolldirection -bool false
#+end_src

#+begin_src sh
  }
#+end_src

**** Trackpad: Point & Click

#+begin_src sh
  function prefs_trackpad () {
#+end_src

=on= *Tap to click*
#+begin_src sh
  defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
  defaults -currentHost write -globalDomain com.apple.mouse.tapBehavior -int 1
#+end_src

#+begin_src sh
  }
#+end_src

**** Sound: Sound Effects

#+begin_src sh
  function prefs_sound () {
#+end_src

*Select an alert sound:* =Sosumi=
#+begin_src sh
  defaults write -globalDomain "com.apple.sound.beep.sound" -string "/System/Library/Sounds/Sosumi.aiff"
#+end_src

=off= *Play user interface sound effects*
#+begin_src sh
  defaults write -globalDomain "com.apple.sound.uiaudio.enabled" -int 0
#+end_src

=off= *Play feedback when volume is changed*
#+begin_src sh
  defaults write -globalDomain "com.apple.sound.beep.feedback" -int 0
#+end_src

#+begin_src sh
  }
#+end_src

**** Date & Time: Clock

=on= *Show date and time in menu bar*

=on= *Time options: Display the time with seconds*

=on= *Time options: Show AM/PM*

=on= *Date options: Show the day of the week*

=on= *Date options: Show date*
#+begin_src sh
  function prefs_clock () {
    defaults write com.apple.menuextra.clock "DateFormat" -string "EEE MMM d  h:mm:ss a"
  }
#+end_src

**** Accessibility: Display

=on= *Reduce transparency*
#+begin_src sh
  function prefs_accessibility () {
    defaults write com.apple.universalaccess "reduceTransparency" -bool true
  }
#+end_src

#+begin_src sh
  function prefs_restart () {
    killall -u "$(whoami)" cfprefsd
    osascript -e 'tell app "Finder" to quit'
    killall Finder
  }
#+end_src

*** VLC

#+begin_src sh
  function prefs_vlc () {
    p "Set VLC preferences"

    if [ ! -d "${HOME}/Library/Preferences/org.videolan.vlc" ]; then
      mkdir -m o-w -p "${HOME}/Library/Preferences/org.videolan.vlc"
    fi

    cat > "${HOME}/Library/Preferences/org.videolan.vlc/vlcrc" << EOF
  avcodec-hw=vda
  macosx-appleremote=0
  macosx-continue-playback=1
  macosx-nativefullscreenmode=1
  macosx-pause-minimized=1
  macosx-video-autoresize=0
  spdif=1
  sub-language=English
  subsdec-encoding=UTF-8
  volume-save=0
  EOF
  }
#+end_src

*** prefs

#+begin_src sh
  function prefs () {
    prefs_autoping
    prefs_finder
    prefs_moom
    prefs_nvalt
    prefs_safari

    prefs_general
    prefs_screensaver
    prefs_dock
    prefs_security
    prefs_power
    prefs_ups
    prefs_text
    prefs_mouse
    prefs_trackpad
    prefs_sound
    prefs_clock
    prefs_accessibility

    prefs_restart

    prefs_vlc

    which config
  }
#+end_src

** Configuration

*** App Store

#+begin_src sh
  function config_mas () {
    p "Save App Store packages"

    cat > "/usr/local/bin/mas_save.sh" << EOF
  #!/bin/sh
  DIR="\${HOME}/Downloads/App Store"
  MAS="\$(getconf DARWIN_USER_CACHE_DIR)com.apple.appstore"

  mkdir -m go= -p "\${DIR}"
  for a in \$(find "\${MAS}" -iname "[0-9]*" -type d); do
    b="\${DIR}/\$(basename \$a)"
    mkdir -m go= -p "\${b}"
    end=\$(( \$(date +%s) + 5 ))
    while [ \$(date +%s) -lt \$end ]; do
      for c in \${a}/*; do
        d="\$(basename \$c)"
        if [ ! -e "\${b}/\${d}" ]; then
          ln "\${a}/\${d}" "\${b}/\${d}"
        fi
      done
    done
  done
  EOF

    chmod a+x "/usr/local/bin/mas_save.sh"
    rehash
#+end_src

#+begin_src sh
  mkdir -m go= -p "${HOME}/Library/LaunchAgents"
  launchctl unload "${HOME}/Library/LaunchAgents/com.github.ptb.mas_save.plist" 2> /dev/null
  printf "%s\n" \
    "add ':KeepAlive' bool false" \
    "add ':Label' string 'com.github.ptb.mas_save'" \
    "add ':Program' string '/usr/local/bin/mas_save.sh'" \
    "add ':RunAtLoad' bool true" \
    "add ':WatchPaths' array" \
    "add ':WatchPaths:0' string '$(getconf DARWIN_USER_CACHE_DIR)com.apple.appstore'" \
  | while IFS=$'\t' read a; do
    /usr/libexec/PlistBuddy "${HOME}/Library/LaunchAgents/com.github.ptb.mas_save.plist" -c "${a}" &> /dev/null
  done
  launchctl load "${HOME}/Library/LaunchAgents/com.github.ptb.mas_save.plist"
#+end_src

#+begin_src sh
  }
#+end_src

*** Atom

Inspiration: [[https://evanhahn.com/atom-apm-install-list/][@EvanHahn]]

#+begin_src sh
  function config_atom () {
    p "Install Atom packages"

    for a in \
      "MagicPython" \
      "atom-beautify" \
      "atom-css-comb" \
      "atom-jade" \
      "atom-wallaby" \
      "autoclose-html" \
      "autocomplete-python" \
      "busy-signal" \
      "double-tag" \
      "editorconfig" \
      "ex-mode" \
      "file-icons" \
      "git-plus" \
      "git-time-machine" \
      "highlight-selected" \
      "intentions" \
      "language-docker" \
      "language-jade" \
      "language-javascript-jsx" \
      "language-lisp" \
      "language-slim" \
      "linter" \
      "linter-eslint" \
      "linter-rubocop" \
      "linter-ui-default" \
      "python-yapf" \
      "react" \
      "riot" \
      "sort-lines" \
      "term3" \
      "tomorrow-night-eighties-syntax" \
      "tree-view-open-files" \
      "vim-mode" \
      "vim-mode-zz" \
      "vim-surround" \
    ; do
      apm install "${a}"
    done

  cat > "${HOME}/.atom/packages/tomorrow-night-eighties-syntax/styles/colors.less" \
    << EOF
  @background: #191919;
  @current-line: #333333;
  @selection: #4c4c4c;
  @foreground: #cccccc;
  @comment: #999999;
  @red: #f27f7f;
  @orange: #ff994c;
  @yellow: #ffcc66;
  @green: #99cc99;
  @aqua: #66cccc;
  @blue: #6699cc;
  @purple: #cc99cc;
  EOF
  }
#+end_src

*** BBEdit

#+begin_src sh
  function config_bbedit () {
    if [ -d "/Applications/BBEdit.app" ]; then
      p "Install BBEdit tools"

      cd /usr/local/bin && \
      ln ../../../Applications/BBEdit.app/Contents/Helpers/bbdiff bbdiff && \
      ln ../../../Applications/BBEdit.app/Contents/Helpers/bbedit_tool bbedit && \
      ln ../../../Applications/BBEdit.app/Contents/Helpers/bbfind bbfind && \
      ln ../../../Applications/BBEdit.app/Contents/Helpers/bbresults bbresults && \
      cd "${HOME}"
    fi
  }
#+end_src

*** Desktop

#+begin_src sh
  function config_desktop () {
    p "Set Desktop preferences"
#+end_src

*Desktop: Solid Colors: Custom Color…* =Solid Black=
#+begin_src sh
  sudo rm "/Library/Caches/com.apple.desktop.admin.png"
  base64 -D > "/Library/Caches/com.apple.desktop.admin.png" <<< "iVBORw0KGgoAAAANSUhEUgAAAIAAAACAAQAAAADrRVxmAAAAGElEQVR4AWOgMxgFo2AUjIJRMApGwSgAAAiAAAH3bJXBAAAAAElFTkSuQmCC"

  osascript << EOF
    tell application "System Events"
      set a to POSIX file "/Library/Caches/com.apple.desktop.admin.png"
      set b to a reference to every desktop
      repeat with c in b
        set picture of c to a
      end repeat
    end tell
  EOF
#+end_src

*Screen Saver:* =BlankScreen=
#+begin_src sh
  if [ -e "/Library/Screen Savers/BlankScreen.saver" ]; then
    p "Set Screen Saver preferences"

    defaults -currentHost write com.apple.screensaver moduleDict \
      '{ moduleName = "BlankScreen"; path = "/Library/Screen Savers/BlankScreen.saver"; type = 0; }'
  fi
#+end_src

#+begin_src sh
  }
#+end_src

*** Dock

#+begin_src sh
  function config_dock () {
    p "Set Dock preferences"

    defaults write com.apple.dock "autohide-delay" -float 0
    defaults write com.apple.dock "autohide-time-modifier" -float 0.5

    defaults delete com.apple.dock "persistent-apps"

    for app in \
      "nvALT" \
      "Mail" \
      "Safari" \
      "Messages" \
      "Emacs" \
      "Atom" \
      "Utilities/Terminal" \
      "System Preferences" \
      "PCalc" \
      "iTunes" \
      "VLC" \
    ; do
      defaults write com.apple.dock "persistent-apps" -array-add \
        "<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/${app}.app/</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>"
    done

    defaults delete com.apple.dock "persistent-others"

    osascript -e 'tell app "Dock" to quit'
  }
#+end_src

*** Emacs

**** Download [[http://spacemacs.org/][Spacemacs]]

#+begin_src sh
function config_emacs () {
  p "Configure Emacs"

  mkdir -m go= -p "${HOME}/.emacs.d" \
    && curl --compressed --location --silent \
      "https://github.com/syl20bnr/spacemacs/archive/master.tar.gz" \
    | tar -C "${HOME}/.emacs.d" --strip-components 1 -xf -
  mkdir -m go= -p "${HOME}/.emacs.d/private/ptb"
#+end_src

**** Create =~/.spacemacs=

#+begin_src sh
  cat > "${HOME}/.spacemacs" << EOF
  (defun dotspacemacs/layers ()
    (setq-default
      dotspacemacs-configuration-layers '(
        auto-completion
        (colors :variables
          colors-colorize-identifiers 'variables)
        dash
        deft
        docker
        emacs-lisp
        evil-cleverparens
        git
        github
        helm
        html
        ibuffer
        imenu-list
        javascript
        markdown
        nginx
        (org :variables
          org-enable-github-support t)
        (osx :variables
          osx-use-option-as-meta nil)
        ptb
        react
        ruby
        ruby-on-rails
        search-engine
        semantic
        shell-scripts
        (spell-checking :variables
          spell-checking-enable-by-default nil)
        syntax-checking
        (version-control :variables
          version-control-diff-side 'left)
        vim-empty-lines
      )
      dotspacemacs-excluded-packages '(org-bullets)
    )
  )

  (defun dotspacemacs/init ()
    (setq-default
      dotspacemacs-startup-banner nil
      dotspacemacs-startup-lists nil
      dotspacemacs-scratch-mode 'org-mode
      dotspacemacs-themes '(sanityinc-tomorrow-eighties)
      dotspacemacs-default-font '(
        "Inconsolata LGC"
        :size 13
        :weight normal
        :width normal
        :powerline-scale 1.1)
      dotspacemacs-loading-progress-bar nil
      dotspacemacs-active-transparency 100
      dotspacemacs-inactive-transparency 100
      dotspacemacs-line-numbers t
      dotspacemacs-whitespace-cleanup 'all
    )
  )

  (defun dotspacemacs/user-init ())
  (defun dotspacemacs/user-config ())
  EOF
#+end_src

**** Create =~/.emacs.d/private/ptb/config.el=

#+begin_src sh
  cat > "${HOME}/.emacs.d/private/ptb/config.el" << EOF
  (setq
    default-frame-alist '(
      (top . 22)
      (left . 1790)
      (height . 40)
      (width . 91)
      (vertical-scroll-bars . right))
    initial-frame-alist (copy-alist default-frame-alist)

    deft-directory "~/Dropbox/Notes"
    focus-follows-mouse t
    mouse-wheel-follow-mouse t
    mouse-wheel-scroll-amount '(1 ((shift) . 1))
    purpose-display-at-right 20
    recentf-max-saved-items 5
    scroll-step 1
    system-uses-terminfo nil

    ibuffer-formats '(
      (mark modified read-only " "
      (name 18 18 :left :elide)))

    ibuffer-shrink-to-minimum-size t
    ibuffer-always-show-last-buffer nil
    ibuffer-sorting-mode 'recency
    ibuffer-use-header-line nil
    x-select-enable-clipboard nil)

  (global-linum-mode t)
  (recentf-mode t)
  (x-focus-frame nil)
  (with-eval-after-load 'org
    (org-babel-do-load-languages
      'org-babel-load-languages '(
        (ruby . t)
        (shell . t)
      )
    )
  )
  EOF
#+end_src

**** Create =~/.emacs.d/private/ptb/funcs.el=

#+begin_src sh
  cat > "${HOME}/.emacs.d/private/ptb/funcs.el" << EOF
  (defun is-useless-buffer (buffer)
    (let ((name (buffer-name buffer)))
      (and (= ?* (aref name 0))
          (string-match "^\\**" name))))

  (defun kill-useless-buffers ()
    (interactive)
    (loop for buffer being the buffers
          do (and (is-useless-buffer buffer) (kill-buffer buffer))))

  (defun org-babel-tangle-hook ()
    (add-hook 'after-save-hook 'org-babel-tangle))

  (add-hook 'org-mode-hook #'org-babel-tangle-hook)

  (defun ptb/new-untitled-buffer ()
    "Create a new untitled buffer in the current frame."
    (interactive)
    (let
      ((buffer "Untitled-") (count 1))
      (while
        (get-buffer (concat buffer (number-to-string count)))
        (setq count (1+ count)))
      (switch-to-buffer
      (concat buffer (number-to-string count))))
    (org-mode))

  (defun ptb/previous-buffer ()
    (interactive)
    (kill-useless-buffers)
    (previous-buffer))

  (defun ptb/next-buffer ()
    (interactive)
    (kill-useless-buffers)
    (next-buffer))

  (defun ptb/kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer))
    (kill-useless-buffers))
  EOF
#+end_src

**** Create =~/.emacs.d/private/ptb/keybindings.el=

#+begin_src sh
  cat > "${HOME}/.emacs.d/private/ptb/keybindings.el" << EOF
  (define-key evil-normal-state-map (kbd "s-c") 'clipboard-kill-ring-save)
  (define-key evil-insert-state-map (kbd "s-c") 'clipboard-kill-ring-save)
  (define-key evil-visual-state-map (kbd "s-c") 'clipboard-kill-ring-save)

  (define-key evil-ex-completion-map (kbd "s-v") 'clipboard-yank)
  (define-key evil-ex-search-keymap (kbd "s-v") 'clipboard-yank)
  (define-key evil-insert-state-map (kbd "s-v") 'clipboard-yank)

  (define-key evil-normal-state-map (kbd "s-x") 'clipboard-kill-region)
  (define-key evil-insert-state-map (kbd "s-x") 'clipboard-kill-region)
  (define-key evil-visual-state-map (kbd "s-x") 'clipboard-kill-region)

  (define-key evil-normal-state-map (kbd "<S-up>") 'evil-previous-visual-line)
  (define-key evil-insert-state-map (kbd "<S-up>") 'evil-previous-visual-line)
  (define-key evil-visual-state-map (kbd "<S-up>") 'evil-previous-visual-line)

  (define-key evil-normal-state-map (kbd "<S-down>") 'evil-next-visual-line)
  (define-key evil-insert-state-map (kbd "<S-down>") 'evil-next-visual-line)
  (define-key evil-visual-state-map (kbd "<S-down>") 'evil-next-visual-line)

  (global-set-key (kbd "C-l") 'evil-search-highlight-persist-remove-all)

  (global-set-key (kbd "s-t") 'make-frame)
  (global-set-key (kbd "s-n") 'ptb/new-untitled-buffer)
  (global-set-key (kbd "s-w") 'ptb/kill-this-buffer)
  (global-set-key (kbd "s-{") 'ptb/previous-buffer)
  (global-set-key (kbd "s-}") 'ptb/next-buffer)
  EOF
#+end_src

**** Create =~/.emacs.d/private/ptb/packages.el=

#+begin_src sh
  cat > "${HOME}/.emacs.d/private/ptb/packages.el" << EOF
  (setq ptb-packages '(auto-indent-mode inline-crypt))

  (defun ptb/init-auto-indent-mode ()
    (use-package auto-indent-mode
      :init
      (setq
        auto-indent-delete-backward-char t
        auto-indent-fix-org-auto-fill t
        auto-indent-fix-org-move-beginning-of-line t
        auto-indent-fix-org-return t
        auto-indent-fix-org-yank t
        auto-indent-start-org-indent t
      )
    )
  )

  (defun ptb/init-inline-crypt ()
    (use-package inline-crypt :init))
  EOF
#+end_src

#+begin_src sh
  }
#+end_src

**** Create =/usr/local/bin/vi=

#+begin_src sh
  function config_vi_script () {
    p "Create vi script"

    cat > /usr/local/bin/vi <<-EOF
  #!/bin/sh

  if [ -e "/Applications/Emacs.app" ]; then
    t=()

    if [ \${#@} -ne 0 ]; then
      while IFS= read -r file; do
        [ ! -f "\$file" ] && t+=("\$file") && /usr/bin/touch "\$file"
        file=\$(echo \$(cd \$(dirname "\$file") && pwd -P)/\$(basename "\$file"))
        \$(/usr/bin/osascript <<-END
          if application "Emacs.app" is running then
            tell application id (id of application "Emacs.app") to open POSIX file "\$file"
          else
            tell application ((path to applications folder as text) & "Emacs.app")
              activate
              open POSIX file "\$file"
            end tell
          end if
  END
          ) &  # Note: END on the previous line may be indented with tabs but not spaces
        done <<<"\$(printf '%s\n' "\$@")"
      fi

      if [ ! -z "\$t" ]; then
        \$(/bin/sleep 10; for file in "\${t[@]}"; do
          [ ! -s "\$file" ] && /bin/rm "\$file";
        done) &
      fi
    else
      vim -No "\$@"
    fi
  EOF

    chmod a+x /usr/local/bin/vi
    rehash
  }
#+end_src

*** Terminal
:properties:
:header-args+: :padline no
:end:

Inspiration: [[https://github.com/ChrisKempson/Tomorrow-Theme#tomorrow-night-eighties][@chriskempson]], [[https://apple.stackexchange.com/a/98843][@user495470]], & [[https://github.com/reitermarkus/dotfiles/blob/master/include/settings/terminal.sh][@reitermarkus]]

**** General

#+begin_src sh
  function config_terminal () {
    p "Set Terminal preferences"
#+end_src

*On startup, open: New window with profile:* =ptb=
#+begin_src sh
  defaults write -app Terminal "Startup Window Settings" -string "$(whoami)"
#+end_src

**** Profiles

#+begin_src sh
  defaults write -app Terminal "Default Window Settings" -string "$(whoami)"

  /usr/libexec/PlistBuddy -c "delete ':Window Settings:$(whoami)'" \
    "${HOME}/Library/Preferences/com.apple.Terminal.plist" &> /dev/null

  for terminal_prop in \
#+end_src

#+begin_src sh
  " dict" \
  ":name string '$(whoami)'" \
  ":type string 'Window Settings'" \
  ":ProfileCurrentVersion real 2.05" \
#+end_src

**** Text

#+begin_src sh
  ':BackgroundColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC4xIDAuMSAwLjE=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ":BackgroundBlur real 0" \
  ":BackgroundSettingsForInactiveWindows bool false" \
  ":BackgroundAlphaInactive real 1" \
  ":BackgroundBlurInactive real 0" \
  ':Font data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>3</integer></dict><key>NSName</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSSize</key><real>13</real><key>NSfFlags</key><integer>16</integer></dict><string>InconsolataLGC</string><dict><key>$classes</key><array><string>NSFont</string><string>NSObject</string></array><key>$classname</key><string>NSFont</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ":FontWidthSpacing real 1" \
  ":FontHeightSpacing real 1" \
  ":FontAntialias bool true" \
  ":UseBoldFonts bool true" \
  ":BlinkText bool false" \
  ":DisableANSIColor bool false" \
  ":UseBrightBold bool false" \
  ':TextColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDAuOCAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':TextBoldColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDAuOCAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':SelectionColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC4zIDAuMyAwLjM=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBlackColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC4zIDAuMyAwLjM=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIRedColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC45NSAwLjUgMC41</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIGreenColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC42IDAuOCAwLjY=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIYellowColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MSAwLjggMC40</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBlueColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC40IDAuNiAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIMagentaColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDAuNiAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSICyanColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC40IDAuOCAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIWhiteColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDAuOCAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightBlackColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC41IDAuNSAwLjU=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightRedColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MSAwLjcgMC43</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightGreenColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDEgMC44</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightYellowColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MSAxIDAuNg==</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightBlueColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC42IDAuOCAx</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightMagentaColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MSAwLjggMQ==</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightCyanColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC42IDEgMQ==</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightWhiteColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC45IDAuOSAwLjk=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ":CursorType integer 0" \
  ":CursorBlink bool false" \
  ':CursorColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC43IDAuNyAwLjc=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
#+end_src

**** Window

#+begin_src sh
  ":ShowRepresentedURLInTitle bool true" \
  ":ShowRepresentedURLPathInTitle bool true" \
  ":ShowActiveProcessInTitle bool true" \
  ":ShowActiveProcessArgumentsInTitle bool false" \
  ":ShowShellCommandInTitle bool false" \
  ":ShowWindowSettingsNameInTitle bool false" \
  ":ShowTTYNameInTitle bool false" \
  ":ShowDimensionsInTitle bool false" \
  ":ShowCommandKeyInTitle bool false" \
  ":columnCount integer 124" \
  ":rowCount integer 20" \
  ":ShouldLimitScrollback integer 0" \
  ":ScrollbackLines integer 0" \
  ":ShouldRestoreContent bool false" \
#+end_src

**** Tab

#+begin_src sh
  ":ShowRepresentedURLInTabTitle bool false" \
  ":ShowRepresentedURLPathInTabTitle bool false" \
  ":ShowActiveProcessInTabTitle bool true" \
  ":ShowActiveProcessArgumentsInTabTitle bool false" \
  ":ShowTTYNameInTabTitle bool false" \
  ":ShowComponentsWhenTabHasCustomTitle bool true" \
  ":ShowActivityIndicatorInTab bool true" \
#+end_src

**** Shell

#+begin_src sh
  ":shellExitAction integer 1" \
  ":warnOnShellCloseAction integer 1" \
#+end_src

**** Keyboard

#+begin_src sh
  ":useOptionAsMetaKey bool false" \
  ":ScrollAlternateScreen bool true" \
#+end_src

**** Advanced

#+begin_src sh
  ":TerminalType string 'xterm-256color'" \
  ":deleteSendsBackspace bool false" \
  ":EscapeNonASCIICharacters bool true" \
  ":ConvertNewlinesOnPaste bool true" \
  ":StrictVTKeypad bool true" \
  ":scrollOnInput bool true" \
  ":Bell bool false" \
  ":VisualBell bool false" \
  ":VisualBellOnlyWhenMuted bool false" \
  ":BellBadge bool false" \
  ":BellBounce bool false" \
  ":BellBounceCritical bool false" \
  ":CharacterEncoding integer 4" \
  ":SetLanguageEnvironmentVariables bool true" \
  ":EastAsianAmbiguousWide bool false" \
#+end_src

#+begin_src sh
  ; do
    /usr/libexec/PlistBuddy "$HOME/Library/Preferences/com.apple.Terminal.plist" \
      -c "add ':Window Settings:$(whoami)'${terminal_prop}"
  done
#+end_src

#+begin_src sh
  }
#+end_src

*** dovecot

#+begin_example sh :tangle no
  doveadm sync -u $(whoami) maildir:~/.email:INBOX=~/.email/Inbox:LAYOUT=fs
#+end_example

#+begin_src sh
  function config_dovecot () {
    p "Enable email authentication with macOS accounts"

    sudo tee "/etc/pam.d/dovecot" > /dev/null << EOF
  auth		required	pam_opendirectory.so try_first_pass
  account		required	pam_nologin.so
  account		required	pam_opendirectory.so
  password	required	pam_opendirectory.so
  EOF

    p "Configure Dovecot email server"

    cat > "/usr/local/etc/dovecot/dovecot.conf" << EOF
  auth_mechanisms = cram-md5
  default_internal_user = _dovecot
  default_login_user = _dovenull
  log_path = /dev/stderr
  mail_location = maildir:~/.mail:INBOX=~/.mail/Inbox:LAYOUT=fs
  mail_plugins = zlib
  maildir_copy_with_hardlinks = no
  namespace {
    inbox = yes
    mailbox Drafts {
      auto = subscribe
      special_use = \Drafts
    }
    mailbox Junk {
      auto = subscribe
      special_use = \Junk
    }
    mailbox Sent {
      auto = subscribe
      special_use = \Sent
    }
    mailbox "Sent Messages" {
      special_use = \Sent
    }
    mailbox Trash {
      auto = subscribe
      special_use = \Trash
    }
    separator = .
    type = private
  }
  passdb {
    args = scheme=cram-md5 /usr/local/etc/dovecot/cram-md5.pwd
    driver = passwd-file

    # driver = pam

    # args = nopassword=y
    # driver = static
  }
  plugin {
    sieve = file:/Users/%u/.sieve
    zlib_save = bz2
    zlib_save_level = 9
  }
  postmaster_address = ${USER}@${DOMAIN}
  protocols = imap
  service imap-login {
    inet_listener imap {
      port = 0
    }
  }
  ssl = required
  ssl_cert = <${SSL}/certs/${MAIL}/${MAIL}.crt
  ssl_cipher_list = AES128+EECDH:AES128+EDH
  ssl_dh_parameters_length = 4096
  ssl_key = <${SSL}/certs/${MAIL}/${MAIL}.key
  ssl_prefer_server_ciphers = yes
  ssl_protocols = !SSLv2 !SSLv3
  userdb {
    driver = passwd
  }
  protocol lda {
    mail_plugins = sieve
  }

  # auth_debug = yes
  # auth_debug_passwords = yes
  # auth_verbose = yes
  # auth_verbose_passwords = plain
  # mail_debug = yes
  # verbose_ssl = yes
  EOF

    if [ ! -f "/usr/local/etc/dovecot/cram-md5.pwd" ]; then
      p "Create email account for '${USER}' with 'CRAM-MD5' authentication: "
      doveadm pw | sed -e "s/^/${USER}:/" > "/usr/local/etc/dovecot/cram-md5.pwd"
      sudo chown _dovecot "/usr/local/etc/dovecot/cram-md5.pwd"
      sudo chmod go= "/usr/local/etc/dovecot/cram-md5.pwd"
    fi

    if ! /usr/bin/grep -Fq ${MAIL} "/etc/hosts"; then
      printf "127.0.0.1\t${MAIL}\n" | sudo tee -a /etc/hosts > /dev/null
    fi

    sudo brew services start dovecot
  }
#+end_src

*** getmail

#+begin_src sh
  function config_getmail () {
    p "Configure getmail"

    mkdir -m go= -p "${HOME}/.getmail" "${HOME}/Library/LaunchAgents"

    printf "%s\n" \
      "add ':KeepAlive' bool false" \
      "add ':Label' string 'ca.pyropus.getmail'" \
      "add ':ProgramArguments' array" \
      "add ':ProgramArguments:0' string '/usr/local/bin/getmail'" \
      "add ':RunAtLoad' bool true" \
      "add ':StandardOutPath' string '${HOME}/.getmail/getmail.log'" \
      "add ':StandardErrorPath' string '${HOME}/.getmail/getmail.err'" \
      "add ':StartInterval' integer 300" \
    | while read a; do
      /usr/libexec/PlistBuddy "${HOME}/Library/LaunchAgents/ca.pyropus.getmail.plist" -c "${a}" &> /dev/null
    done

    for email in \
      "pbosse@gmail.com" \
      "ptb@ioutime.com" \
    ; do
      p "Add password for '${email}' to Keychain"

      security add-internet-password -a "${email}" -s "imap.gmail.com" -r "imap" \
        -l "${email}" -D "getmail password" -P 993 -w

      cat > "${HOME}/.getmail/${email}" << EOF
  [retriever]
  type = SimpleIMAPSSLRetriever
  server = imap.gmail.com
  port = 993
  username = ${email}
  mailboxes = ("[Gmail]/All Mail",)

  [destination]
  type = MDA_external
  path = /usr/local/Cellar/dovecot/2.2.31/libexec/dovecot/dovecot-lda
  arguments = ("-c","/usr/local/etc/dovecot/dovecot.conf","-d","$(whoami)",)
  ignore_stderr = true

  [options]
  # delete = true
  # delete_after = 30
  delivered_to = false
  read_all = false
  received = false
  verbose = 1
  EOF
    defaults write "${HOME}/Library/LaunchAgents/ca.pyropus.getmail" \
      ProgramArguments -array-add "--rcfile"
    defaults write "${HOME}/Library/LaunchAgents/ca.pyropus.getmail" \
      ProgramArguments -array-add "${email}"
    done

    plutil -convert xml1 "${HOME}/Library/LaunchAgents/ca.pyropus.getmail.plist"
    launchctl load "${HOME}/Library/LaunchAgents/ca.pyropus.getmail.plist"

    # http://shadow-file.blogspot.com/2012/06/parsing-email-and-fixing-timestamps-in.html
    curl -L https://pastebin.com/raw/ZBq7euid | tr -d '\015' > /usr/local/bin/timestamp.py
    chmod +x /usr/local/bin/timestamp.py
  }
#+end_src

for file in $(ls -1); do ~/bin/timestamp.py $file; done
find "${HOME}/.mail" -type f -name "[0123456789]*" -exec /usr/local/bin/timestamp.py '{}' ';'

*** git

#+begin_src sh
  function config_git () {
    p "Configure git"

    KEY="$(gpg -K --with-colons | awk -F: '/^sec/ { a=$5 } END { print a }')"

    git config --global user.name "Peter T Bosse II"
    git config --global user.email "ptb@ioutime.com"

    git config --global alias.cm "commit --allow-empty-message --message="
    git config --global alias.co "checkout"
    git config --global alias.st "status"

    git config --global push.default "simple"

    if [ ! -z ${KEY} ]; then
      git config --global user.signingkey "${KEY}"
      git config --global gpg.program "$(which gpg)"
      git config --global commit.gpgsign "true"
      git config --global tag.gpgsign "true"
      git config --global log.showSignature "true"
    fi
  }
#+end_src

*** gnupg

#+begin_src sh
  function config_gpg () {
    p "Create GPG keys"

    mkdir -m go= -p "${HOME}/.gnupg"

    echo "keyid-format long" \
      > "${HOME}/.gnupg/gpg.conf"
    echo "pinentry-program $(which pinentry-mac)" \
      > "${HOME}/.gnupg/gpg-agent.conf"

    gpg --faked-system-time '20170701T120000!' \
      --quick-generate-key "Peter T Bosse II <ptb@ioutime.com>" \
      future-default default never
  }
#+end_src

#+begin_src sh
  function config_gpg_help () {
    KEY="$(gpg -K --with-colons | awk -F: '/^sec/ { a=$5 } END { print a }')"
    gpg --armor --export "${KEY}" | pbcopy
    open "https://github.com/settings/keys"
  }
#+end_src

*** openssl

#+begin_src sh
  function config_openssl () {
    p "Create OpenSSL certificates"

    SSL="/usr/local/etc/openssl"
    DOMAIN="ptb2.me"
    MAIL="mail.${DOMAIN}"
    FAKE="0701080017"
    DAYS=3652
#+end_src

#+begin_src sh
  mkdir -p "${SSL}/certs/${DOMAIN}"
  cat > "${SSL}/certs/${DOMAIN}/${DOMAIN}.cnf" << EOF
  [ req ]
  default_bits = 4096
  default_keyfile = ${SSL}/certs/${DOMAIN}/${DOMAIN}.key
  default_md = sha256
  distinguished_name = dn
  encrypt_key = no
  prompt = no
  utf8 = yes
  x509_extensions = v3_ca

  [ dn ]
  CN = ${DOMAIN}

  [ v3_ca ]
  subjectKeyIdentifier = hash
  authorityKeyIdentifier = keyid:always,issuer
  basicConstraints = CA:true
  EOF
#+end_src

#+begin_src sh
  openssl genrsa -out "${SSL}/certs/${DOMAIN}/${DOMAIN}.key" 4096

  p "Set fake '${DOMAIN}' certificate creation date"
  sudo date "${FAKE}" && \
  openssl req -days ${DAYS} -new -x509 \
    -config "${SSL}/certs/${DOMAIN}/${DOMAIN}.cnf" \
    -key "${SSL}/certs/${DOMAIN}/${DOMAIN}.key" \
    -out "${SSL}/certs/${DOMAIN}/${DOMAIN}.crt" && \
  sudo ntpdate -u time.apple.com

  p "Password for adding certificate to Keychain Access"
  openssl pkcs12 -aes256 -clcerts -export \
    -in "${SSL}/certs/${DOMAIN}/${DOMAIN}.crt" \
    -inkey "${SSL}/certs/${DOMAIN}/${DOMAIN}.key" \
    -out "${SSL}/certs/${DOMAIN}/${DOMAIN}.p12"

  open -g "${SSL}/certs/${DOMAIN}/${DOMAIN}.p12"
#+end_src

#+begin_src sh
  mkdir -p "${SSL}/certs/${MAIL}"
  cat > "${SSL}/certs/${MAIL}/${MAIL}.cnf" << EOF
  [ req ]
  default_bits = 4096
  default_keyfile = ${SSL}/certs/${DOMAIN}/${DOMAIN}.key
  default_md = sha256
  distinguished_name = dn
  encrypt_key = no
  prompt = no
  utf8 = yes
  x509_extensions = v3_ca

  [ dn ]
  CN = ${MAIL}

  [ v3_ca ]
  subjectKeyIdentifier = hash
  authorityKeyIdentifier = keyid:always,issuer
  basicConstraints = CA:true
  EOF
#+end_src

#+begin_src sh
  openssl genrsa -out "${SSL}/certs/${MAIL}/${MAIL}.key" 4096

  openssl req -new \
    -config "${SSL}/certs/${MAIL}/${MAIL}.cnf" \
    -key "${SSL}/certs/${MAIL}/${MAIL}.key" \
    -out "${SSL}/certs/${MAIL}/${MAIL}.csr"

  p "Set fake '${MAIL}' certificate creation date"
  sudo date "${FAKE}" && \
  openssl x509 -days ${DAYS} -req -set_serial 01 -sha256 \
    -CA "${SSL}/certs/${DOMAIN}/${DOMAIN}.crt" \
    -CAkey "${SSL}/certs/${DOMAIN}/${DOMAIN}.key" \
    -in "${SSL}/certs/${MAIL}/${MAIL}.csr" \
    -out "${SSL}/certs/${MAIL}/${MAIL}.crt" && \
  sudo ntpdate -u time.apple.com
}
#+end_src

*** shell

#+begin_src sh
function config_shell () {
  if [ -x "/usr/local/bin/zsh" ]; then
    # Current User > Advanced Options… > Login shell: /usr/local/bin/zsh
    p "Set '/usr/local/bin/zsh' as the default shell"

    sudo sh -c "printf '%s\n' '/usr/local/bin/zsh' >> /etc/shells" && \
    sudo chsh -s /usr/local/bin/zsh && \
    sudo mkdir -m go= -p /private/var/root/Library/Caches/ && \
    sudo touch "/private/var/root/.zshrc"
    chsh -s /usr/local/bin/zsh
    touch "${HOME}/.zshrc"
  fi
}
#+end_src

*** sieve

#+begin_src sh
  function config_sieve () {
    p "Configure sieve"

    cat > "${HOME}/.sieve" << EOF
  require ["date", "fileinto", "imap4flags", "mailbox", "relational", "variables"];

  setflag "\\Seen";

  if date :is "date" "year" "1995" { fileinto :create "Archives.1995"; }
  if date :is "date" "year" "1996" { fileinto :create "Archives.1996"; }
  if date :is "date" "year" "1997" { fileinto :create "Archives.1997"; }
  if date :is "date" "year" "1998" { fileinto :create "Archives.1998"; }
  if date :is "date" "year" "1999" { fileinto :create "Archives.1999"; }
  if date :is "date" "year" "2000" { fileinto :create "Archives.2000"; }
  if date :is "date" "year" "2001" { fileinto :create "Archives.2001"; }
  if date :is "date" "year" "2002" { fileinto :create "Archives.2002"; }
  if date :is "date" "year" "2003" { fileinto :create "Archives.2003"; }
  if date :is "date" "year" "2004" { fileinto :create "Archives.2004"; }
  if date :is "date" "year" "2005" { fileinto :create "Archives.2005"; }
  if date :is "date" "year" "2006" { fileinto :create "Archives.2006"; }
  if date :is "date" "year" "2007" { fileinto :create "Archives.2007"; }
  if date :is "date" "year" "2008" { fileinto :create "Archives.2008"; }
  if date :is "date" "year" "2009" { fileinto :create "Archives.2009"; }
  if date :is "date" "year" "2010" { fileinto :create "Archives.2010"; }
  if date :is "date" "year" "2011" { fileinto :create "Archives.2011"; }
  if date :is "date" "year" "2012" { fileinto :create "Archives.2012"; }
  if date :is "date" "year" "2013" { fileinto :create "Archives.2013"; }
  if date :is "date" "year" "2014" { fileinto :create "Archives.2014"; }
  if date :is "date" "year" "2015" { fileinto :create "Archives.2015"; }
  if date :is "date" "year" "2016" { fileinto :create "Archives.2016"; }
  if date :is "date" "year" "2017" { fileinto :create "Archives.2017"; }
  if date :is "date" "year" "2018" { fileinto :create "Archives.2018"; }
  if date :is "date" "year" "2019" { fileinto :create "Archives.2019"; }
  if date :is "date" "year" "2020" { fileinto :create "Archives.2020"; }
  EOF
  }
#+end_src

*** ssh

#+begin_src sh
  function config_ssh () {
    p "Create ssh keys"

    mkdir -m go= -p "${HOME}/.ssh"

    ssh-keygen -t ed25519 -a 100 -C "ptb@ioutime.com"

    cat > "${HOME}/.ssh/config" <<-EOF
  Host *
    AddKeysToAgent yes
    IdentityFile ~/.ssh/id_ed25519
  EOF

    p "Adding ssh key to macOS keychain"

    ssh-add -K
    echo "ssh-add -A &> /dev/null" > "${HOME}/.zshrc"
  }
#+end_src

#+begin_src sh
  function config_ssh_help () {
    pbcopy < "${HOME}/.ssh/id_ed25519.pub"
    open "https://github.com/settings/keys"
  }
#+end_src

#+begin_example sh :tangle no
  ssh-copy-id username@example.com
#+end_example

*** TODO: vim

#+begin_src sh :tangle no
  function config_vim () {
    p "Configure vim"
  }
#+end_src

*** zsh

#+begin_src sh
function config_zsh () {
  p "Create system default '/etc/zshrc'"

  sudo tee /etc/zshrc > /dev/null <<-EOF
alias -g ...="../.."
alias -g ....="../../.."
alias -g .....="../../../.."
alias l="/bin/ls -lG"
alias ll="/bin/ls -alG"
alias lr="/bin/ls -alRG"
alias screen="/usr/bin/screen -U"
autoload -U compaudit
compaudit | xargs -L 1 sudo chown -HR root:wheel {} 2> /dev/null
compaudit | xargs -L 1 sudo chmod -HR go-w {} 2> /dev/null
autoload -U compinit
compinit -d "\${HOME}/Library/Caches/zcompdump"
bindkey "\e[3~" delete-char
bindkey "\e[A" up-line-or-search
bindkey "\e[B" down-line-or-search
export HISTFILE="\${HOME}/Library/Caches/zsh_history"
export HISTSIZE=50000
export SAVEHIST=50000
setopt APPEND_HISTORY
setopt AUTO_CD
setopt EXTENDED_HISTORY
setopt HIST_FIND_NO_DUPS
setopt INC_APPEND_HISTORY
setopt PROMPT_SUBST
setopt SHARE_HISTORY
stty erase 
# Correctly display UTF-8 with combining characters.
if [ "\$TERM_PROGRAM" = "Apple_Terminal" ]; then
  setopt combiningchars
fi
function precmd () {
  print -Pn "\\e]7;file://%M\${PWD// /%%20}\a";
  print -Pn "\\e]2;%n@%m\a";
  print -Pn "\\e]1;%~\a";
}
function gb () {
  git branch --no-color 2> /dev/null | \
    sed -e "/^[^*]/d" -e "s/* \(.*\)/ (\1)/"
}
function xd () {
  xattr -d com.apple.diskimages.fsck \$* 2> /dev/null;
  xattr -d com.apple.diskimages.recentcksum \$* 2> /dev/null;
  xattr -d com.apple.metadata:kMDItemFinderComment \$* 2> /dev/null;
  xattr -d com.apple.metadata:kMDItemDownloadedDate \$* 2> /dev/null;
  xattr -d com.apple.metadata:kMDItemWhereFroms \$* 2> /dev/null;
  xattr -d com.apple.quarantine \$* 2> /dev/null;
  find . -name .DS_Store -delete;
  find . -name 'Icon' -delete
}
function sf () {
  SetFile -P -d "\$1 12:00:00" -m "\$1 12:00:00" \$argv[2,\$]
}
function sd () {
  xd **/*;
  sf \$1 .;
  for i in **/*; do sf \$1 \$i; done;
  chown -R root:wheel .;
  chmod -R a+r,u+w,go-w .;
  find . -type d -exec chmod a+x '{}' ';';
  chgrp -R admin ./Applications;
  chmod -R g+w ./Applications;
  chgrp -R admin ./Library;
  chmod -R g+w ./Library;
  chgrp -R staff "./Library/Application Support/Adobe";
  chmod -R g-w ./Library/Keychains;
  chmod -R g-w ./Library/ScriptingAdditions;
  chgrp -R wheel ./Library/Filesystems;
  chmod -R g-w ./Library/Filesystems;
  chgrp -R wheel ./Library/LaunchAgents;
  chmod -R g-w ./Library/LaunchAgents;
  chgrp -R wheel ./Library/LaunchDaemons;
  chmod -R g-w ./Library/LaunchDaemons;
  chgrp -R wheel ./Library/PreferencePanes;
  chmod -R g-w ./Library/PreferencePanes;
  chgrp -R wheel ./Library/StartupItems;
  chmod -R g-w ./Library/StartupItems;
  chgrp -R wheel ./Library/Widgets;
  chmod -R g-w ./Library/Widgets;
  find . -name "kexts" -type d -exec chmod -R g-w '{}' ';';
  find . -name "*.kext" -exec chown -R root:wheel '{}' ';';
  find . -name "*.kext" -exec chmod -R g-w '{}' ';'
}
MAS="\$(getconf DARWIN_USER_CACHE_DIR)com.apple.appstore"
PROMPT="%B%n@%m%b:%2~%B\$(gb) %#%b "
EOF
}
#+end_src

*** Login Items

#+begin_src sh
  function config_loginitems () {
    p "Create login items"

    osascript > /dev/null << EOF
      tell app "System Events"
        make new login item with properties ¬
          { path: "/Applications/Alfred 3.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/autoping.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Caffeine.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Coffitivity.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Dropbox.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/HardwareGrowler.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/I Love Stars.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/IPMenulet.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/iTunes.app/Contents/MacOS/iTunesHelper.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Menubar Countdown.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Meteorologist.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Moom.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Plex Media Server.app", hidden: true }
        make new login item with properties ¬
          { path: "/Library/PreferencePanes/SteerMouse.prefPane/Contents/MacOS/SteerMouse Manager.app", hidden: true }
      end tell
  EOF

    mkdir -m go= -p "${HOME}/Library/LaunchAgents"
    printf "%s\t%s\n" \
      "net.elasticthreads.nv" "add ':KeepAlive' bool true" \
      "net.elasticthreads.nv" "add ':Label' string 'net.elasticthreads.nv'" \
      "net.elasticthreads.nv" "add ':Program' string '/Applications/nvALT.app/Contents/MacOS/nvALT'" \
    | while IFS=$'\t' read a b; do
      /usr/libexec/PlistBuddy "${HOME}/Library/LaunchAgents/${a}.plist" -c "${b}" &> /dev/null
    done
  }
#+end_src

*** handlers

#+begin_src sh
  function config_handlers () {
    if [ -f "${HOME}/Library/Preferences/org.duti.plist" ]; then
      rm "${HOME}/Library/Preferences/org.duti.plist"
    fi

    printf "%s\t%s\t%s\n" \
      "com.apple.DiskImageMounter" "com.apple.disk-image" "all" \
      "com.apple.DiskImageMounter" "public.disk-image" "all" \
      "com.apple.DiskImageMounter" "public.iso-image" "all" \
      "com.apple.QuickTimePlayerX" "com.apple.coreaudio-format" "all" \
      "com.apple.QuickTimePlayerX" "com.apple.quicktime-movie" "all" \
      "com.apple.QuickTimePlayerX" "com.microsoft.waveform-audio" "all" \
      "com.apple.QuickTimePlayerX" "public.aifc-audio" "all" \
      "com.apple.QuickTimePlayerX" "public.aiff-audio" "all" \
      "com.apple.QuickTimePlayerX" "public.audio" "all" \
      "com.apple.QuickTimePlayerX" "public.mp3" "all" \
      "com.apple.Safari" "com.compuserve.gif" "all" \
      "com.apple.Terminal" "com.apple.terminal.shell-script" "all" \
      "com.apple.iTunes" "com.apple.iTunes.audible" "all" \
      "com.apple.iTunes" "com.apple.iTunes.ipg" "all" \
      "com.apple.iTunes" "com.apple.iTunes.ipsw" "all" \
      "com.apple.iTunes" "com.apple.iTunes.ite" "all" \
      "com.apple.iTunes" "com.apple.iTunes.itlp" "all" \
      "com.apple.iTunes" "com.apple.iTunes.itms" "all" \
      "com.apple.iTunes" "com.apple.iTunes.podcast" "all" \
      "com.apple.iTunes" "com.apple.m4a-audio" "all" \
      "com.apple.iTunes" "com.apple.mpeg-4-ringtone" "all" \
      "com.apple.iTunes" "com.apple.protected-mpeg-4-audio" "all" \
      "com.apple.iTunes" "com.apple.protected-mpeg-4-video" "all" \
      "com.apple.iTunes" "com.audible.aa-audio" "all" \
      "com.apple.iTunes" "public.mpeg-4-audio" "all" \
      "com.apple.installer" "com.apple.installer-package-archive" "all" \
      "com.github.atom" "com.apple.binary-property-list" "editor" \
      "com.github.atom" "com.apple.crashreport" "editor" \
      "com.github.atom" "com.apple.dt.document.ascii-property-list" "editor" \
      "com.github.atom" "com.apple.dt.document.script-suite-property-list" "editor" \
      "com.github.atom" "com.apple.dt.document.script-terminology-property-list" "editor" \
      "com.github.atom" "com.apple.log" "editor" \
      "com.github.atom" "com.apple.property-list" "editor" \
      "com.github.atom" "com.apple.rez-source" "editor" \
      "com.github.atom" "com.apple.symbol-export" "editor" \
      "com.github.atom" "com.apple.xcode.ada-source" "editor" \
      "com.github.atom" "com.apple.xcode.bash-script" "editor" \
      "com.github.atom" "com.apple.xcode.configsettings" "editor" \
      "com.github.atom" "com.apple.xcode.csh-script" "editor" \
      "com.github.atom" "com.apple.xcode.fortran-source" "editor" \
      "com.github.atom" "com.apple.xcode.ksh-script" "editor" \
      "com.github.atom" "com.apple.xcode.lex-source" "editor" \
      "com.github.atom" "com.apple.xcode.make-script" "editor" \
      "com.github.atom" "com.apple.xcode.mig-source" "editor" \
      "com.github.atom" "com.apple.xcode.pascal-source" "editor" \
      "com.github.atom" "com.apple.xcode.strings-text" "editor" \
      "com.github.atom" "com.apple.xcode.tcsh-script" "editor" \
      "com.github.atom" "com.apple.xcode.yacc-source" "editor" \
      "com.github.atom" "com.apple.xcode.zsh-script" "editor" \
      "com.github.atom" "com.apple.xml-property-list" "editor" \
      "com.github.atom" "com.barebones.bbedit.actionscript-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.erb-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.ini-configuration" "editor" \
      "com.github.atom" "com.barebones.bbedit.javascript-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.json-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.jsp-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.lasso-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.lua-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.setext-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.sql-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.tcl-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.tex-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.textile-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.vbscript-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.vectorscript-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.verilog-hdl-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.vhdl-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.yaml-source" "editor" \
      "com.github.atom" "com.netscape.javascript-source" "editor" \
      "com.github.atom" "com.sun.java-source" "editor" \
      "com.github.atom" "dyn.ah62d4rv4ge80255drq" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge80g55gq3w0n" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge80g55sq2" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge80y2xzrf0gk3pw" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge81e3dtqq" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge81e7k" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge81g25xsq" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge81g2pxsq" "all" \
      "com.github.atom" "net.daringfireball.markdown" "editor" \
      "com.github.atom" "public.assembly-source" "editor" \
      "com.github.atom" "public.c-header" "editor" \
      "com.github.atom" "public.c-plus-plus-source" "editor" \
      "com.github.atom" "public.c-source" "editor" \
      "com.github.atom" "public.csh-script" "editor" \
      "com.github.atom" "public.json" "editor" \
      "com.github.atom" "public.lex-source" "editor" \
      "com.github.atom" "public.log" "editor" \
      "com.github.atom" "public.mig-source" "editor" \
      "com.github.atom" "public.nasm-assembly-source" "editor" \
      "com.github.atom" "public.objective-c-plus-plus-source" "editor" \
      "com.github.atom" "public.objective-c-source" "editor" \
      "com.github.atom" "public.patch-file" "editor" \
      "com.github.atom" "public.perl-script" "editor" \
      "com.github.atom" "public.php-script" "editor" \
      "com.github.atom" "public.plain-text" "editor" \
      "com.github.atom" "public.precompiled-c-header" "editor" \
      "com.github.atom" "public.precompiled-c-plus-plus-header" "editor" \
      "com.github.atom" "public.python-script" "editor" \
      "com.github.atom" "public.ruby-script" "editor" \
      "com.github.atom" "public.script" "editor" \
      "com.github.atom" "public.shell-script" "editor" \
      "com.github.atom" "public.source-code" "editor" \
      "com.github.atom" "public.text" "editor" \
      "com.github.atom" "public.utf16-external-plain-text" "editor" \
      "com.github.atom" "public.utf16-plain-text" "editor" \
      "com.github.atom" "public.utf8-plain-text" "editor" \
      "com.github.atom" "public.xml" "editor" \
      "com.kodlian.Icon-Slate" "com.apple.icns" "all" \
      "com.kodlian.Icon-Slate" "com.microsoft.ico" "all" \
      "com.microsoft.Word" "public.rtf" "all" \
      "com.panayotis.jubler" "dyn.ah62d4rv4ge81g6xy" "all" \
      "com.sketchup.SketchUp.2017" "com.sketchup.skp" "all" \
      "com.VortexApps.NZBVortex3" "dyn.ah62d4rv4ge8068xc" "all" \
      "com.vmware.fusion" "com.microsoft.windows-executable" "all" \
      "cx.c3.theunarchiver" "com.alcohol-soft.mdf-image" "all" \
      "cx.c3.theunarchiver" "com.allume.stuffit-archive" "all" \
      "cx.c3.theunarchiver" "com.altools.alz-archive" "all" \
      "cx.c3.theunarchiver" "com.amiga.adf-archive" "all" \
      "cx.c3.theunarchiver" "com.amiga.adz-archive" "all" \
      "cx.c3.theunarchiver" "com.apple.applesingle-archive" "all" \
      "cx.c3.theunarchiver" "com.apple.binhex-archive" "all" \
      "cx.c3.theunarchiver" "com.apple.bom-compressed-cpio" "all" \
      "cx.c3.theunarchiver" "com.apple.itunes.ipa" "all" \
      "cx.c3.theunarchiver" "com.apple.macbinary-archive" "all" \
      "cx.c3.theunarchiver" "com.apple.self-extracting-archive" "all" \
      "cx.c3.theunarchiver" "com.apple.xar-archive" "all" \
      "cx.c3.theunarchiver" "com.apple.xip-archive" "all" \
      "cx.c3.theunarchiver" "com.cyclos.cpt-archive" "all" \
      "cx.c3.theunarchiver" "com.microsoft.cab-archive" "all" \
      "cx.c3.theunarchiver" "com.microsoft.msi-installer" "all" \
      "cx.c3.theunarchiver" "com.nero.nrg-image" "all" \
      "cx.c3.theunarchiver" "com.network172.pit-archive" "all" \
      "cx.c3.theunarchiver" "com.nowsoftware.now-archive" "all" \
      "cx.c3.theunarchiver" "com.nscripter.nsa-archive" "all" \
      "cx.c3.theunarchiver" "com.padus.cdi-image" "all" \
      "cx.c3.theunarchiver" "com.pkware.zip-archive" "all" \
      "cx.c3.theunarchiver" "com.rarlab.rar-archive" "all" \
      "cx.c3.theunarchiver" "com.redhat.rpm-archive" "all" \
      "cx.c3.theunarchiver" "com.stuffit.archive.sit" "all" \
      "cx.c3.theunarchiver" "com.stuffit.archive.sitx" "all" \
      "cx.c3.theunarchiver" "com.sun.java-archive" "all" \
      "cx.c3.theunarchiver" "com.symantec.dd-archive" "all" \
      "cx.c3.theunarchiver" "com.winace.ace-archive" "all" \
      "cx.c3.theunarchiver" "com.winzip.zipx-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.arc-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.arj-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.dcs-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.dms-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.ha-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.lbr-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.lha-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.lhf-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.lzx-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.packdev-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.pax-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.pma-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.pp-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.xmash-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.zoo-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.zoom-archive" "all" \
      "cx.c3.theunarchiver" "org.7-zip.7-zip-archive" "all" \
      "cx.c3.theunarchiver" "org.archive.warc-archive" "all" \
      "cx.c3.theunarchiver" "org.debian.deb-archive" "all" \
      "cx.c3.theunarchiver" "org.gnu.gnu-tar-archive" "all" \
      "cx.c3.theunarchiver" "org.gnu.gnu-zip-archive" "all" \
      "cx.c3.theunarchiver" "org.gnu.gnu-zip-tar-archive" "all" \
      "cx.c3.theunarchiver" "org.tukaani.lzma-archive" "all" \
      "cx.c3.theunarchiver" "org.tukaani.xz-archive" "all" \
      "cx.c3.theunarchiver" "public.bzip2-archive" "all" \
      "cx.c3.theunarchiver" "public.cpio-archive" "all" \
      "cx.c3.theunarchiver" "public.tar-archive" "all" \
      "cx.c3.theunarchiver" "public.tar-bzip2-archive" "all" \
      "cx.c3.theunarchiver" "public.z-archive" "all" \
      "cx.c3.theunarchiver" "public.zip-archive" "all" \
      "cx.c3.theunarchiver" "public.zip-archive.first-part" "all" \
      "org.gnu.Emacs" "dyn.ah62d4rv4ge8086xh" "all" \
      "org.inkscape.Inkscape" "public.svg-image" "editor" \
      "org.videolan.vlc" "com.apple.m4v-video" "all" \
      "org.videolan.vlc" "com.microsoft.windows-media-wmv" "all" \
      "org.videolan.vlc" "org.videolan.3gp" "all" \
      "org.videolan.vlc" "org.videolan.aac" "all" \
      "org.videolan.vlc" "org.videolan.ac3" "all" \
      "org.videolan.vlc" "org.videolan.aiff" "all" \
      "org.videolan.vlc" "org.videolan.amr" "all" \
      "org.videolan.vlc" "org.videolan.aob" "all" \
      "org.videolan.vlc" "org.videolan.ape" "all" \
      "org.videolan.vlc" "org.videolan.asf" "all" \
      "org.videolan.vlc" "org.videolan.avi" "all" \
      "org.videolan.vlc" "org.videolan.axa" "all" \
      "org.videolan.vlc" "org.videolan.axv" "all" \
      "org.videolan.vlc" "org.videolan.divx" "all" \
      "org.videolan.vlc" "org.videolan.dts" "all" \
      "org.videolan.vlc" "org.videolan.dv" "all" \
      "org.videolan.vlc" "org.videolan.flac" "all" \
      "org.videolan.vlc" "org.videolan.flash" "all" \
      "org.videolan.vlc" "org.videolan.gxf" "all" \
      "org.videolan.vlc" "org.videolan.it" "all" \
      "org.videolan.vlc" "org.videolan.mid" "all" \
      "org.videolan.vlc" "org.videolan.mka" "all" \
      "org.videolan.vlc" "org.videolan.mkv" "all" \
      "org.videolan.vlc" "org.videolan.mlp" "all" \
      "org.videolan.vlc" "org.videolan.mod" "all" \
      "org.videolan.vlc" "org.videolan.mpc" "all" \
      "org.videolan.vlc" "org.videolan.mpeg-audio" "all" \
      "org.videolan.vlc" "org.videolan.mpeg-stream" "all" \
      "org.videolan.vlc" "org.videolan.mpeg-video" "all" \
      "org.videolan.vlc" "org.videolan.mxf" "all" \
      "org.videolan.vlc" "org.videolan.nsv" "all" \
      "org.videolan.vlc" "org.videolan.nuv" "all" \
      "org.videolan.vlc" "org.videolan.ogg-audio" "all" \
      "org.videolan.vlc" "org.videolan.ogg-video" "all" \
      "org.videolan.vlc" "org.videolan.oma" "all" \
      "org.videolan.vlc" "org.videolan.opus" "all" \
      "org.videolan.vlc" "org.videolan.quicktime" "all" \
      "org.videolan.vlc" "org.videolan.realmedia" "all" \
      "org.videolan.vlc" "org.videolan.rec" "all" \
      "org.videolan.vlc" "org.videolan.rmi" "all" \
      "org.videolan.vlc" "org.videolan.s3m" "all" \
      "org.videolan.vlc" "org.videolan.spx" "all" \
      "org.videolan.vlc" "org.videolan.tod" "all" \
      "org.videolan.vlc" "org.videolan.tta" "all" \
      "org.videolan.vlc" "org.videolan.vob" "all" \
      "org.videolan.vlc" "org.videolan.voc" "all" \
      "org.videolan.vlc" "org.videolan.vqf" "all" \
      "org.videolan.vlc" "org.videolan.vro" "all" \
      "org.videolan.vlc" "org.videolan.wav" "all" \
      "org.videolan.vlc" "org.videolan.webm" "all" \
      "org.videolan.vlc" "org.videolan.wma" "all" \
      "org.videolan.vlc" "org.videolan.wmv" "all" \
      "org.videolan.vlc" "org.videolan.wtv" "all" \
      "org.videolan.vlc" "org.videolan.wv" "all" \
      "org.videolan.vlc" "org.videolan.xa" "all" \
      "org.videolan.vlc" "org.videolan.xesc" "all" \
      "org.videolan.vlc" "org.videolan.xm" "all" \
      "org.videolan.vlc" "public.ac3-audio" "all" \
      "org.videolan.vlc" "public.audiovisual-content" "all" \
      "org.videolan.vlc" "public.avi" "all" \
      "org.videolan.vlc" "public.movie" "all" \
      "org.videolan.vlc" "public.mpeg" "all" \
      "org.videolan.vlc" "public.mpeg-2-video" "all" \
      "org.videolan.vlc" "public.mpeg-4" "all" \
    | while IFS=$'\t' read a b c; do
        defaults write org.duti DUTISettings -array-add \
          "{
            DUTIBundleIdentifier = '$a';
            DUTIUniformTypeIdentifier = '$b';
            DUTIRole = '$c';
          }"
    done

    if [ -x "/usr/local/bin/duti" ]; then
      p "Set document file handlers"

      duti "${HOME}/Library/Preferences/org.duti.plist" 2> /dev/null
    fi

    /System/Library/Frameworks/CoreServices.framework/Versions/Current/Frameworks/LaunchServices.framework/Versions/Current/Support/lsregister -kill -r -domain local -domain system -domain user

    sudo rm -rf /Library/Caches/com.apple.iconservices.store
    sudo find /private/var/folders -depth \( -name com.apple.dock.iconcache -or -name com.apple.iconservices \) -exec rm -rf {} \;
    sudo touch /Applications/* /Applications/Utilities/* 2> /dev/null

    sleep 5
    osascript -e 'tell app "Dock" to quit'
    killall Finder
  }
#+end_src

#+begin_src sh
  function config_done () {
    p "To copy gpg public key, enter 'config_gpg_help'"
    p "To copy ssh public key, enter 'config_ssh_help'"
    p "Otherwise, enter 'private' (if configured) or 'reboot' now"
  }
#+end_src

*** config

#+begin_src sh
  function config () {
    config_mas
    config_atom
    config_bbedit
    config_desktop
    config_dock
    config_emacs
    config_vi_script
    config_terminal
    config_openssl
    config_dovecot
    config_sieve
    config_getmail
    config_gpg
    config_git
    config_shell
    config_ssh
    #config_vim
    config_zsh
    config_loginitems
    config_handlers
    config_done
  }
#+end_src

** Private

This section includes license keys, registration codes, and serial numbers.

#+begin_src sh
  function private () {
    printf "%s\n"
#+end_src

-----BEGIN PGP MESSAGE-----

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
=e4HY
-----END PGP MESSAGE-----

#+begin_src sh
  }
#+end_src

** Commands

#+begin_src sh
  function display_help () {
    cat << EOF

    Initialize:
      $(which init)

    Install:
      $(which install)

  EOF
  }

  display_help
  fi
#+end_src
