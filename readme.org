* macOS Setup
:properties:
:header-args: :tangle setup.command
:header-args:sh: :shebang #!/bin/sh :results silent
:end:
#+startup: content nohideblocks hidestars indent

From clean install to fully configured.

#+begin_example sh :tangle no
  sudo "/Applications/Install macOS Sierra.app/Contents/Resources/createinstallmedia" \
    --applicationpath "/Applications/Install macOS Sierra.app" --nointeraction \
    --volume "/Volumes/Install"
#+end_example

** Initialize

*** New Terminal

#+begin_src sh
  if [ -z "$1" ]; then
    if [[ ! $SHELL == *"zsh" ]]; then
      chsh -s /bin/zsh
    fi

    osascript << EOF
  tell app "Terminal" to do script "source ${0} 0"
  EOF
    clear
  else
#+end_src

*** Constants

#+begin_src sh
  CACHE="/Volumes/Install"
  DOMAIN="ptb2.me"
  MAIL="mail.${DOMAIN}"

  MAS="$(getconf DARWIN_USER_CACHE_DIR)com.apple.appstore"
#+end_src

*** Utility Functions

#+begin_src sh
  function p () {
    printf "\n\033[1m\033[34m%s\033[0m\n\n" "${1}"
  }
#+end_src

*** Disable Repeated Requests for Password

#+begin_src sh
  function init_sudoers () {
    p "Disable repeated requests for password"

    printf "%s\t%s\n" \
      "timeout" "Defaults:%admin timestamp_timeout=-1" \
      "installer" "%admin ALL=(ALL) NOPASSWD:SETENV: /usr/sbin/installer" \
      "tty_tickets" 'Defaults:%admin !tty_tickets' \
    | while IFS=$'\t' read a b; do
      sudo tee "/etc/sudoers.d/${a}" <<< "${b}" > /dev/null
    done
  }
#+end_src

*** Disable System and Disk Sleep

#+begin_src sh
function init_no_sleep () {
  p "Disable system and disk sleep"

  sudo pmset -a sleep 0
  sudo pmset -a disksleep 0
}
#+end_src

*** Set Computer Name and Local Hostname

#+begin_src sh
  function init_hostname () {
    p "Set computer name and local hostname"
#+end_src

*Computer Name*
#+begin_src sh
  sudo systemsetup -setcomputername $(ruby -e "print '$(hostname -s)'.capitalize") &> /dev/null
#+end_src

*Local Hostname*
#+begin_src sh
  sudo systemsetup -setlocalsubnetname $(hostname -s) &> /dev/null
#+end_src

#+begin_src sh
  }
#+end_src

*** Set Permissions on Install Destinations

#+begin_src sh
  function init_perms () {
    p "Set permissions on install destinations"

    for c in \
      "/Library/ColorPickers" \
      "/Library/Fonts" \
      "/Library/Input Methods" \
      "/Library/PreferencePanes" \
      "/Library/QuickLook" \
      "/Library/Screen Savers" \
      "/usr/local" \
    ; do
      sudo chgrp -R admin "${c}"
      sudo chmod -R g+w "${c}"
    done

    if [ ! -d "/usr/local/bin" ]; then
      mkdir -m o-w -p "/usr/local/bin"
    fi
  }
#+end_src

*** Install Developer Tools

#+begin_src sh
  function init_devtools () {
    p "Install developer tools"

    if [ -d "${CACHE}/Updates" ]; then
      sudo chown -R "${USER}" "/Library/Updates"
      rsync -a --delay-updates \
        "${CACHE}/Updates/" "/Library/Updates/"
    fi

    xcode-select --install
  }
#+end_src

*** Install macOS Updates

#+begin_src sh
  function init_updater () {
    p "Install macOS updates"

    if [ -d "${CACHE}/Updates" ]; then
      sudo chown -R "${USER}" "/Library/Updates"
      rsync -a --delay-updates \
        "${CACHE}/Updates/" "/Library/Updates/"
    fi

    sudo softwareupdate --install --all
  }
#+end_src

*** Create Primary Account

#+begin_src sh
  function init_account () {
    p "Create primary user account"

    /bin/echo -n "Real name: " && read NAME
    /bin/echo -n "Account name: " && read U
    /bin/echo -n "Email address: " && read EMAIL

    sudo chgrp admin "/Library/User Pictures"
    sudo chmod g+w "/Library/User Pictures"
    curl "https://www.gravatar.com/avatar/$(md5 -qs $EMAIL).jpg?s=512" --silent \
      --compressed --location --output "/Library/User Pictures/${EMAIL}.jpg" \

    sudo defaults write \
      "/System/Library/User Template/Non_localized/Library/Preferences/.GlobalPreferences.plist" \
      "com.apple.swipescrolldirection" -bool false

    sudo sysadminctl -addUser "${U}" -fullName "${NAME}" -password - \
      -shell "/bin/zsh" -admin -picture "/Library/User Pictures/${EMAIL}.jpg"

    p "Press any key to log out."
    /usr/bin/read -n 1 -s

    osascript -e 'tell application "loginwindow" to «event aevtrlgo»'
  }
#+end_src

*** init

#+begin_src sh
  function init () {
    init_sudoers
    init_no_sleep
    init_hostname
    init_perms
    init_devtools
    init_updater
    init_account
  }
#+end_src

** Install

*** Homebrew and App Store Caches

#+begin_src sh
  function install_caches () {
    if [ -d "${CACHE}/Homebrew" ]; then
      p "Restore Homebrew caches from backup"

      rsync -a --delay-updates \
        "${CACHE}/Homebrew/" "${HOME}/Library/Caches/Homebrew/"
    fi

    if [ -d "${CACHE}/Updates" ]; then
      p "Restore App Store caches from backup"

      sudo chown -R "${USER}" "${MAS}"
      rsync -a --delay-updates \
        "${CACHE}/App Store/" "${MAS}/"
    fi
  }
#+end_src

*** Default Paths

#+begin_src sh
  function install_paths () {
    if ! grep -Fq "/usr/local/sbin" /etc/paths; then
      p "Add '/usr/local/sbin' to default \$PATH"

      sudo sed -i -e "/\/usr\/sbin/{x;s/$/\/usr\/local\/sbin/;G;}" /etc/paths
    fi
  }
#+end_src

*** [[https://brew.sh/][Homebrew]]

#+begin_src sh
  function install_brew () {
    p "Install Homebrew"

    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

    brew analytics off

    brew update
    brew doctor

    brew tap "homebrew/bundle"
#+end_src

*** [[https://github.com/Homebrew/homebrew-bundle][Brewfile]]

#+begin_src sh
  cat > /usr/local/Brewfile << EOF
  cask_args colorpickerdir: "/Library/ColorPickers",
    fontdir: "/Library/Fonts",
    input_methoddir: "/Library/Input Methods",
    prefpanedir: "/Library/PreferencePanes",
    qlplugindir: "/Library/QuickLook",
    screen_saverdir: "/Library/Screen Savers"

  tap "homebrew/bundle"
  tap "caskroom/cask"

  brew "rsync"
  brew "mas"
  mas "autoping", id: 632347870

  cask "docker-toolbox"
  cask "java"
  cask "vmware-fusion"

  cask "xquartz"
  cask "inkscape"
  cask "wireshark"

  brew "aspell",
    args: ["lang=en"]
  brew "chromedriver"
  brew "coreutils"
  tap "homebrew/services"
  brew "dovecot",
    args: [
    "with-pam",
    "with-pigeonhole" ]
  brew "duti"
  brew "fdupes"
  brew "gawk"
  brew "getmail"
  brew "git"
  brew "gnu-sed",
    args: ["with-default-names"]
  brew "gnupg"
  brew "gpac"
  brew "hub"
  brew "ievms"
  brew "imagemagick"
  brew "mercurial"
  brew "mp4v2"
  brew "mtr"
  brew "nmap"
  brew "nvm"
  brew "openssl"
  brew "pinentry-mac"
  brew "pyenv"
  brew "rbenv"
  brew "selenium-server-standalone"
  brew "sqlite"
  brew "stow"
  brew "terminal-notifier"
  brew "trash"
  brew "vim"
  brew "wget"
  brew "yarn",
    args: ["ignore-dependencies"]
  brew "youtube-dl"
  brew "zsh"

  cask "adium"
  cask "airfoil"
  cask "alfred"
  cask "arduino"
  cask "atom"
  cask "autodmg"
  cask "bbedit"
  cask "caffeine"
  cask "carbon-copy-cloner"
  cask "charles"
  cask "dash"
  cask "dropbox"
  cask "duet"
  cask "exifrenamer"
  cask "firefox"
  cask "flux"
  cask "github-desktop"
  cask "gitup"
  cask "google-chrome"
  cask "handbrake"
  cask "hermes"
  cask "imageoptim"
  cask "integrity"
  cask "istat-menus"
  cask "jubler"
  cask "little-snitch"
  cask "machg"
  cask "makemkv"
  cask "menubar-countdown"
  cask "meteorologist"
  cask "moom"
  cask "mp4tools"
  cask "munki"
  cask "musicbrainz-picard"
  cask "namechanger"
  cask "nvalt"
  cask "nzbget"
  cask "nzbvortex"
  cask "openemu"
  cask "opera"
  cask "pacifist"
  cask "platypus"
  cask "plex-media-server"
  cask "quitter"
  cask "rescuetime"
  cask "scrivener"
  cask "sitesucker"
  cask "sizeup"
  cask "sketch"
  cask "sketchup"
  cask "skitch"
  cask "skype"
  cask "slack"
  cask "sonarr"
  cask "sonarr-menu"
  cask "sourcetree"
  cask "steermouse"
  cask "subler"
  cask "sublime-text"
  cask "the-unarchiver"
  cask "time-sink"
  cask "torbrowser"
  cask "tower"
  cask "transmit"
  cask "unrarx"
  cask "vimr"
  cask "vlc"
  cask "xld"

  tap "railwaycat/emacsmacport"
  cask "railwaycat/emacsmacport/emacs-mac-spacemacs-icon"

  tap "caskroom/fonts"
  cask "caskroom/fonts/font-inconsolata-lgc"

  # tap "caskroom/versions"
  # cask "caskroom/versions/safari-technology-preview"

  tap "ptb/custom"
  cask "ptb/custom/adobe-creative-cloud-2014"
  cask "ptb/custom/blankscreen"
  cask "ptb/custom/composer"
  cask "ptb/custom/enhanced-dictation"
  cask "ptb/custom/ipmenulet"
  cask "ptb/custom/pcalc-3"
  cask "ptb/custom/sketchup-pro"
  cask "ptb/custom/synergy"

  mas "1Password", id: 443987910
  mas "Coffitivity", id: 659901392
  mas "Growl", id: 467939042
  mas "HardwareGrowler", id: 475260933
  mas "I Love Stars", id: 402642760
  mas "Icon Slate", id: 439697913
  mas "Justnotes", id: 511230166
  mas "Keynote", id: 409183694
  mas "Numbers", id: 409203825
  mas "Pages", id: 409201541
  mas "WiFi Explorer", id: 494803304

  tap "homebrew/nginx"
  brew "homebrew/nginx/nginx-full",
    args: [
    "with-dav-ext-module",
    "with-fancyindex-module",
    "with-gzip-static",
    "with-http2",
    "with-mp4-h264-module",
    "with-passenger",
    "with-push-stream-module",
    "with-secure-link",
    "with-webdav" ]

  brew "ptb/custom/ffmpeg",
    args: [
    "with-chromaprint",
    "with-fdk-aac",
    "with-fontconfig",
    "with-freetype",
    "with-frei0r",
    "with-game-music-emu",
    "with-lame",
    "with-libass",
    "with-libbluray",
    "with-libbs2b",
    "with-libcaca",
    "with-libgsm",
    "with-libmodplug",
    "with-libsoxr",
    "with-libssh",
    "with-libvidstab",
    "with-libvorbis",
    "with-libvpx",
    "with-opencore-amr",
    "with-openh264",
    "with-openjpeg",
    "with-openssl",
    "with-opus",
    "with-pkg-config",
    "with-rtmpdump",
    "with-rubberband",
    "with-schroedinger",
    "with-sdl2",
    "with-snappy",
    "with-speex",
    "with-tesseract",
    "with-texi2html",
    "with-theora",
    "with-tools",
    "with-two-lame",
    "with-wavpack",
    "with-webp",
    "with-x264",
    "with-x265",
    "with-xvid",
    "with-xz",
    "with-yasm",
    "with-zeromq",
    "with-zimg" ]

  mas "Xcode", id: 497799835
  EOF
  }
#+end_src

*** macOS Software

#+begin_src sh
  function install_macos_sw () {
    p "Install macOS software with Homebrew"

    cd /usr/local/ && brew bundle && cd "${HOME}"

    if [ -d "/Applications/Xcode.app" ]; then
      sudo xcodebuild -license accept
    fi

    brew upgrade
  }
#+end_src

*** Link Utilities

#+begin_src sh
  function install_links () {
    p "Link System and Xcode utilities to Applications"

    brew linkapps 2> /dev/null
    cd /Applications \
      && for a in /System/Library/CoreServices/Applications/*; do
        ln -s "../..$a" . 2> /dev/null
      done && \
    cd "${HOME}"

    if [ -d "/Applications/Xcode.app" ]; then
      cd /Applications \
        && for b in /Applications/Xcode.app/Contents/Applications/*; do
          ln -s "../..$b" . 2> /dev/null
        done \
        && for c in /Applications/Xcode.app/Contents/Developer/Applications/*; do
          ln -s "../..$c" . 2> /dev/null
        done && \
      cd "${HOME}"
    fi
  }
#+end_src

*** Node Software

#+begin_src sh
  function install_node_sw () {
    p "Install Node software"

    printf "%s\n" \
      'export NVM_DIR="/usr/local/node"' \
    >> "${HOME}/.zshenv"
    source "${HOME}/.zshenv"

    printf "%s\n" \
      '[ -s "$(brew --prefix)/opt/nvm/nvm.sh" ] && . "$(brew --prefix)/opt/nvm/nvm.sh"' \
    >> "${HOME}/.zshrc"
    source "${HOME}/.zshrc"

    nvm install node
  }
#+end_src

*** Python Software

[[http://akbaribrahim.com/managing-multiple-python-versions-with-pyenv/][Managing Multiple Python Versions with pyenv]]

#+begin_src sh
  function install_python_sw () {
    p "Install Python software"

    printf "%s\n" \
      'export PYENV_ROOT="/usr/local/python"' \
    >> "${HOME}/.zshenv"
    source "${HOME}/.zshenv"

    printf "%s\n" \
      'if which pyenv > /dev/null; then eval "$(pyenv init -)"; fi' \
    >> "${HOME}/.zshrc"
    source "${HOME}/.zshrc"

    pyenv install --skip-existing 2.7.13
    pyenv install --skip-existing 3.6.2
    pyenv global 2.7.13

    pip install --upgrade "pip" "setuptools"
#+end_src

[[https://github.com/mdhiggins/sickbeard_mp4_automator][Automatic MP4 Conversion/Tagging]]

#+begin_src sh
  pip install --upgrade "babelfish" "guessit<2" "qtfaststart" "requests" "stevedore==1.19.1" "subliminal<2"
  pip install --upgrade "requests-cache" "requests[security]"

  mkdir -m go= -p "${HOME}/.config/NzbDrone"
  git clone "https://github.com/mdhiggins/sickbeard_mp4_automator.git" \
    "${HOME}/.config/NzbDrone/scripts" --depth 1
  cd "${HOME}/.config/NzbDrone/scripts" && pyenv local 2.7.13 && cd "${HOME}"
#+end_src

#+begin_src sh
  pip install --upgrade "crudini"
#+end_src

#+begin_src sh
  }
#+end_src

*** Ruby Software

#+begin_src sh
  function install_ruby_sw () {
    p "Install Ruby software"

    printf "%s\n" \
      'export RBENV_ROOT="/usr/local/ruby"' \
    >> "${HOME}/.zshenv"
    source "${HOME}/.zshenv"

    printf "%s\n" \
      'if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi' \
    >> "${HOME}/.zshrc"
    source "${HOME}/.zshrc"

    rbenv install --skip-existing 2.4.1
    rbenv global 2.4.1

    printf "%s\n" \
      "gem: --no-document" \
    >> "${HOME}/.gemrc"

    gem update --system
    gem update
    gem install bundler
  }
#+end_src

*** install

#+begin_src sh
  function install () {
    install_caches
    install_paths
    install_brew
    install_macos_sw
    install_links
    install_node_sw
    install_python_sw
    install_ruby_sw

    which prefs
  }
#+end_src

** Preferences

*** Autoping

#+begin_src sh
  function prefs_autoping () {
    defaults write -app autoping Hostname -string "google.com"
    defaults write -app autoping LaunchAtLogin -bool true
    defaults write -app autoping ShowNotifications -bool true
    defaults write -app autoping ShowPacketLossText -bool true
  }
#+end_src

*** Finder

**** General

#+begin_src sh
  function prefs_finder () {
    p "Set Finder preferences"
#+end_src

*Show these items on the desktop: Hard disks:* =on=
#+begin_src sh
  defaults write com.apple.finder ShowHardDrivesOnDesktop -bool false
#+end_src

*Show these items on the desktop: External disks:* =on=
#+begin_src sh
  defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool false
#+end_src

*Show these items on the desktop: CDs, DVDs, and iPods:* =on=
#+begin_src sh
  defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool false
#+end_src

*Show these items on the desktop: Connected servers:* =on=
#+begin_src sh
  defaults write com.apple.finder ShowMountedServersOnDesktop -bool true
#+end_src

*New Finder windows show:* =${HOME}=
#+begin_src sh
  defaults write com.apple.finder NewWindowTarget -string "PfHm"
  defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}/"
#+end_src

**** Advanced

*Show all filename extensions:* =on=
#+begin_src sh
  defaults write -globalDomain AppleShowAllExtensions -bool true
#+end_src

*Show warning before changing an extension:* =off=
#+begin_src sh
  defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false
#+end_src

*Show warning before removing from iCloud Drive:* =on=
#+begin_src sh
  defaults write com.apple.finder FXEnableRemoveFromICloudDriveWarning -bool true
#+end_src

*Show warning before emptying the Trash:* =on=
#+begin_src sh
  defaults write com.apple.finder WarnOnEmptyTrash -bool false
#+end_src

**** View

*Show Path Bar*
#+begin_src sh
  defaults write com.apple.finder ShowPathbar -bool true
#+end_src

*Show Status Bar*
#+begin_src sh
  defaults write com.apple.finder ShowStatusBar -bool true
#+end_src

*Customize Toolbar…*
#+begin_src sh
  defaults write com.apple.finder "NSToolbar Configuration Browser" '{ "TB Item Identifiers" = ( "com.apple.finder.BACK", "com.apple.finder.PATH", "com.apple.finder.SWCH", "com.apple.finder.ARNG", "NSToolbarFlexibleSpaceItem", "com.apple.finder.SRCH", "com.apple.finder.ACTN" ); "TB Display Mode" = 2; }'
#+end_src

**** View Options

*Show Library Folder:* =on=
#+begin_src sh
  chflags nohidden "${HOME}/Library"
#+end_src

**** Window

*Copy*
#+begin_src sh
  defaults write com.apple.finder CopyProgressWindowLocation -string "{2160, 23}"
#+end_src

#+begin_src sh
  }
#+end_src

*** Moom

**** General

#+begin_src sh
  function prefs_moom () {
    p "Set Moom preferences"
#+end_src

*Treat drawers as part of their parent windows:* =on=
#+begin_src sh
  defaults write -app Moom "Allow For Drawers" -bool true
#+end_src

*Separate windows by* =2= *pt*
#+begin_src sh
  defaults write -app Moom "Grid Spacing" -bool true
  defaults write -app Moom "Grid Spacing: Gap" -int 2
  defaults write -app Moom "Grid Spacing: Apply To Edges" -bool false
#+end_src

*Show preferences on launch:* =off=
#+begin_src sh
  defaults write -app Moom "Stealth Mode" -bool true
#+end_src

*Run as* =faceless= *application*
#+begin_src sh
  defaults write -app Moom "Application Mode" -int 2
#+end_src

**** Mouse

=on= *Enable Move & Zoom grid with* =10= *×* =6= *cells*
#+begin_src sh
  defaults write -app Moom "Mouse Controls Grid" -bool true
  defaults write -app Moom "Mouse Controls Grid: Columns" -int 10
  defaults write -app Moom "Mouse Controls Grid: Rows" -int 6
#+end_src

=on= *Enable access to custom controls*
#+begin_src sh
  defaults write -app Moom "Mouse Controls Include Custom Controls" -bool true
#+end_src

=on= *Bring moomed windows to the front automatically*
#+begin_src sh
  defaults write -app Moom "Mouse Controls Auto-Activate Window" -bool true
#+end_src

=off= *Move & Zoom when dragging a window to a display edge or corner*
#+begin_src sh
  defaults write -app Moom "Snap" -bool false
#+end_src

**** Custom

#+begin_src sh
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0, 0.33333}, {0.5, 0.66666}}"; }'
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0, 0}, {0.3, 0.33333}}"; }'
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0.4, 0.33333}, {0.3, 0.66666}}"; }'
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0.3, 0}, {0.4, 0.33333}}"; }'
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0.7, 0.66666}, {0.3, 0.33333}}"; }'
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0.7, 0.33333}, {0.3, 0.33333}}"; }'
  defaults write -app Moom "Custom Controls" -array-add '{ Action = 19; "Relative Frame" = "{{0.7, 0}, {0.3, 0.33333}}"; }'
#+end_src

*Define window sizes using* =10= *×* =6= *cells*
#+begin_src sh
  defaults write -app Moom "Configuration Grid: Columns" -int 10
  defaults write -app Moom "Configuration Grid: Rows" -int 6
#+end_src

#+begin_src sh
  }
#+end_src

*** nvALT

**** General

#+begin_src sh
  function prefs_nvalt () {
    p "Set nvALT preferences"
#+end_src

*List Text Size:* =Small=
#+begin_src sh
  defaults write -app nvALT TableFontPointSize -int 11
#+end_src

*Bring-to-Front Hotkey:* =(None)=
#+begin_src sh
  defaults write -app nvALT AppActivationKeyCode -int -1
  defaults write -app nvALT AppActivationModifiers -int -1
#+end_src

*Auto-select notes by title when searching:* =on=
#+begin_src sh
  defaults write -app nvALT AutoCompleteSearches -bool true
#+end_src

*Confirm note deletion:* =on=
#+begin_src sh
  defaults write -app nvALT ConfirmNoteDeletion -bool true
#+end_src

*Quit when closing window:* =off=
#+begin_src sh
  defaults write -app nvALT QuitWhenClosingMainWindow -bool false
#+end_src

*Show menu bar icon:* =on=
#+begin_src sh
  defaults write -app nvALT StatusBarItem -bool true
#+end_src

*Hide Dock Icon*
#+begin_src sh
  defaults write -app nvALT ShowDockIcon -bool false
#+end_src

**** Editing

*Styled Text: Copy basic styles from other apps:* =off=
#+begin_src sh
  defaults write -app nvALT PastePreservesStyle -bool false
#+end_src

*Spelling: Check as you type:* =off=
#+begin_src sh
  defaults write -app nvALT CheckSpellingInNoteBody -bool false
#+end_src

*Tab Key:* =Indent lines=
#+begin_src sh
  defaults write -app nvALT TabKeyIndents -bool true
#+end_src

*Soft tabs (spaces):* =on=
#+begin_src sh
  defaults write -app nvALT UseSoftTabs -bool true
#+end_src

*Links: Make URLs clickable links:* =on=
#+begin_src sh
  defaults write -app nvALT MakeURLsClickable -bool true
#+end_src

*Links: Suggest titles for note-links:* =off=
#+begin_src sh
  defaults write -app nvALT AutoSuggestLinks -bool false
#+end_src

*URL Import: Convert imported URLs to Markdown:* =off=
#+begin_src sh
  defaults write -app nvALT UseMarkdownImport -bool false
#+end_src

*URL Import: Process with Readability:* =off=
#+begin_src sh
  defaults write -app nvALT UseReadability -bool false
#+end_src

*Direction: Right-To-Left (RTL):* =off=
#+begin_src sh
  defaults write -app nvALT rtl -bool false
#+end_src

*Auto-pair:* =on=
#+begin_src sh
  defaults write -app nvALT UseAutoPairing -bool true
#+end_src

*External editor:* =Emacs.app=
#+begin_src sh
  defaults write -app nvALT DefaultEEIdentifier -string "org.gnu.Emacs"
  defaults write -app nvALT UserEEIdentifiers -array "com.apple.TextEdit" "org.gnu.Emacs"
#+end_src

**** Fonts & Colors

*Body Font:* =InconsolataLGC 13=
#+begin_src sh
  defaults write -app nvALT NoteBodyFont -data 040b73747265616d747970656481e803840140848484064e53466f6e741e8484084e534f626a65637400858401692884055b3430635d060000001e000000fffe49006e0063006f006e0073006f006c006100740061004c004700430000008401660d8401630098019800980086
#+end_src

*Search Highlight:* =on=
#+begin_src sh
  defaults write -app nvALT HighlightSearchTerms -bool true
#+end_src

*Search Highlight:* =#CCFFCC=
#+begin_src sh
  defaults write -app nvALT SearchTermHighlightColor -data 040b73747265616d747970656481e803840140848484074e53436f6c6f72008484084e534f626a65637400858401630184046666666683cdcc4c3f0183cdcc4c3f0186
#+end_src

*Foreground Text:* =#CCCCCC=
#+begin_src sh
  defaults write -app nvALT ForegroundTextColor -data 040b73747265616d747970656481e803840140848484074e53436f6c6f72008484084e534f626a65637400858401630184046666666683cdcc4c3f83cdcc4c3f83cdcc4c3f0186
#+end_src

*Background:* =#1A1A1A=
#+begin_src sh
  defaults write -app nvALT BackgroundTextColor -data 040b73747265616d747970656481e803840140848484074e53436f6c6f72008484084e534f626a65637400858401630184046666666683d1d0d03d83d1d0d03d83d1d0d03d0186
#+end_src

*Always Show Grid Lines in Notes List:* =on=
#+begin_src sh
  defaults write -app nvALT ShowGrid -bool true
#+end_src

*Alternating Row Colors:* =on=
#+begin_src sh
  defaults write -app nvALT AlternatingRows -bool true
#+end_src

*Use nvALT Scrollbars:* =off=
#+begin_src sh
  defaults write -app nvALT UseETScrollbarsOnLion -bool false
#+end_src

*Keep Note Body Width Readable:* =on=
#+begin_src sh
  defaults write -app nvALT KeepsMaxTextWidth -bool true
#+end_src

*Max. Note Body Width:* =650= *pixels*
#+begin_src sh
  defaults write -app nvALT NoteBodyMaxWidth -int 650
#+end_src

**** View

*Switch to Vertical Layout*
#+begin_src sh
  defaults write -app nvALT HorizontalLayout -bool false
#+end_src

*Columns* > =Title= =Tags=
#+begin_src sh
  defaults write -app nvALT NoteAttributesVisible -array "Title" "Tags"
#+end_src

*Sort By* > =Date Modified=
#+begin_src sh
  defaults write -app nvALT TableIsReverseSorted -bool true
  defaults write -app nvALT TableSortColumn -string "Date Modified"
#+end_src

*Show Note Previews in Title*
#+begin_src sh
  defaults write -app nvALT TableColumnsHaveBodyPreview -bool true
#+end_src

#+begin_src sh
  }
#+end_src

*** Safari

**** General

#+begin_src sh
  function prefs_safari () {
    p "Set Safari preferences"
#+end_src

*Safari opens with:* =A new window=
#+begin_src sh
  defaults write -app Safari AlwaysRestoreSessionAtLaunch -bool false
  defaults write -app Safari OpenPrivateWindowWhenNotRestoringSessionAtLaunch -bool false
#+end_src

*New windows open with:* =Empty Page=
#+begin_src sh
  defaults write -app Safari NewWindowBehavior -int 1
#+end_src

*New tabs open with:* =Empty Page=
#+begin_src sh
  defaults write -app Safari NewTabBehavior -int 1
#+end_src

=off= *Open “safe” files after downloading*
#+begin_src sh
  defaults write -app Safari AutoOpenSafeDownloads -bool false
#+end_src

**** Tabs

*Open pages in tabs instead of windows:* =Always=
#+begin_src sh
  defaults write -app Safari TabCreationPolicy -int 2
#+end_src

**** AutoFill

=off= *Using info from my contacts*
#+begin_src sh
  defaults write -app Safari AutoFillFromAddressBook -bool false
#+end_src

=on= *User names and passwords*
#+begin_src sh
  defaults write -app Safari AutoFillPasswords -bool true
#+end_src

=off= *Credit cards*
#+begin_src sh
  defaults write -app Safari AutoFillCreditCardData -bool false
#+end_src

=off= *Other forms*
#+begin_src sh
  defaults write -app Safari AutoFillMiscellaneousForms -bool false
#+end_src

**** Search

=on= *Include search engine suggestions*
#+begin_src sh
  defaults write -app Safari SuppressSearchSuggestions -bool false
#+end_src

*Smart Search Field:* =off= *Include Safari Suggestions*
#+begin_src sh
  defaults write -app Safari UniversalSearchEnabled -bool false
#+end_src

*Smart Search Field:* =on= *Enable Quick Website Search*
#+begin_src sh
  defaults write -app Safari WebsiteSpecificSearchEnabled -bool true
#+end_src

*Smart Search Field:* =on= *Preload Top Hit in the background*
#+begin_src sh
  defaults write -app Safari PreloadTopHit -bool true
#+end_src

=off= *Show Favorites*
#+begin_src sh
  defaults write -app Safari ShowFavoritesUnderSmartSearchField -bool false
#+end_src

**** Privacy

*Website use of location services:* =Deny without prompting=
#+begin_src sh
  defaults write -app Safari SafariGeolocationPermissionPolicy -int 0
#+end_src

*Website tracking:* =on= *Ask websites not to track me*
#+begin_src sh
  defaults write -app Safari SendDoNotTrackHTTPHeader -bool true
#+end_src

*Apple Pay:* =on= *Allow websites to check if Apple Pay is set up*
#+begin_src sh
  defaults write -app Safari "com.apple.Safari.ContentPageGroupIdentifier.WebKit2ApplePayCapabilityDisclosureAllowed" -bool true
#+end_src

**** Notifications

=off= *Allow websites to ask for permission to send push notifications*
#+begin_src sh
  defaults write -app Safari CanPromptForPushNotifications -bool false
#+end_src

**** Advanced

*Smart Search Field:* =on= *Show full website address*
#+begin_src sh
  defaults write -app Safari ShowFullURLInSmartSearchField -bool true
#+end_src

*Default encoding:* =Unicode (UTF-8)=
#+begin_src sh
  defaults write -app Safari WebKitDefaultTextEncodingName -string "utf-8"
  defaults write -app Safari "com.apple.Safari.ContentPageGroupIdentifier.WebKit2DefaultTextEncodingName" -string "utf-8"
#+end_src

=on= *Show Develop menu in menu bar*
#+begin_src sh
  defaults write -app Safari IncludeDevelopMenu -bool true
  defaults write -app Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true
  defaults write -app Safari "com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled" -bool true
#+end_src

**** View

*Show Favorites Bar*
#+begin_src sh
  defaults write -app Safari "ShowFavoritesBar-v2" -bool true
#+end_src

*Show Tab Bar*
#+begin_src sh
  defaults write -app Safari AlwaysShowTabBar -bool true
#+end_src

*Show Status Bar*
#+begin_src sh
  defaults write -app Safari ShowStatusBar -bool true
  defaults write -app Safari ShowStatusBarInFullScreen -bool true
#+end_src

#+begin_src sh
  }
#+end_src

*** System

**** General

#+begin_src sh
  function prefs_general () {
    p "Set System preferences"
#+end_src

*Appearance:* =Graphite= *For Buttons, Menus, and Windows*
#+begin_src sh
  defaults write -globalDomain "AppleAquaColorVariant" -int 6
#+end_src

=on= *Use dark menu bar and Dock*
#+begin_src sh
  defaults write -globalDomain "AppleInterfaceStyle" -string "Dark"
#+end_src

=off= *Automatically hide and show the menu bar*
#+begin_src sh
  defaults write -globalDomain "_HIHideMenuBar" -bool false
#+end_src

*Highlight color:* =#99CC99= =Other…=
#+begin_src sh
  defaults write -globalDomain "AppleHighlightColor" -string "0.600000 0.800000 0.600000"
#+end_src

*Sidebar icon size:* =Small=
#+begin_src sh
  defaults write -globalDomain "NSTableViewDefaultSizeMode" -int 1
#+end_src

*Show scroll bars:* =Always=
#+begin_src sh
  defaults write -globalDomain "AppleShowScrollBars" -string "Always"
#+end_src

*Click in the scroll bar to:* =Jump to the next page=
#+begin_src sh
  defaults write -globalDomain "AppleScrollerPagingBehavior" -bool false
#+end_src

=on= *Ask to keep changes when closing documents*
#+begin_src sh
  defaults write -globalDomain "NSCloseAlwaysConfirmsChanges" -bool true
#+end_src

=on= *Close windows when quitting an app*
#+begin_src sh
  defaults write -globalDomain "NSQuitAlwaysKeepsWindows" -bool false
#+end_src

*Recent items:* =None= *Documents, Apps, and Servers*
#+begin_src sh
  osascript << EOF
    tell application "System Events"
      tell appearance preferences
        set recent documents limit to 0
        set recent applications limit to 0
        set recent servers limit to 0
      end tell
    end tell
  EOF
#+end_src

=on= *Allow Handoff between this Mac and your iCloud devices*
#+begin_src sh
  defaults -currentHost write com.apple.coreservices.useractivityd "ActivityAdvertisingAllowed" -bool true
  defaults -currentHost write com.apple.coreservices.useractivityd "ActivityReceivingAllowed" -bool true
#+end_src

=on= *Use LCD font smoothing when available*
#+begin_src sh
  defaults -currentHost delete -globalDomain "AppleFontSmoothing" 2> /dev/null
#+end_src

#+begin_src sh
  }
#+end_src

**** Desktop & Screen Saver: Screen Saver

#+begin_src sh
  function prefs_screensaver () {
#+end_src

*Start after:* =Never=
#+begin_src sh
  defaults -currentHost write com.apple.screensaver "idleTime" -int 0
#+end_src

*Hot Corners…: Top Left:* =⌘ Mission Control=
#+begin_src sh
  defaults write com.apple.dock "wvous-tl-corner" -int 2
  defaults write com.apple.dock "wvous-tl-modifier" -int 1048576
#+end_src

*Hot Corners…: Bottom Left:* =Put Display to Sleep=
#+begin_src sh
  defaults write com.apple.dock "wvous-bl-corner" -int 10
  defaults write com.apple.dock "wvous-bl-modifier" -int 0
#+end_src

#+begin_src sh
  }
#+end_src

**** Dock

#+begin_src sh
  function prefs_dock () {
#+end_src

*Size:* =32=
#+begin_src sh
  defaults write com.apple.dock "tilesize" -int 32
#+end_src

=off= *Magnification*
#+begin_src sh
  defaults write com.apple.dock "magnification" -bool false
  defaults write com.apple.dock "largesize" -int 64
#+end_src

*Position on screen:* =Right=
#+begin_src sh
  defaults write com.apple.dock "orientation" -string "right"
#+end_src

*Minimize windows using:* =Scale effect=
#+begin_src sh
  defaults write com.apple.dock "mineffect" -string "scale"
#+end_src

*Prefer tabs when opening documents:* =Always=
#+begin_src sh
  defaults write -globalDomain "AppleWindowTabbingMode" -string "always"
#+end_src

=off= *Double-click a window’s title bar to* =None=
#+begin_src sh
  defaults write -globalDomain "AppleActionOnDoubleClick" -string "None"
#+end_src

=on= *Minimize windows into application icon*
#+begin_src sh
  defaults write com.apple.dock "minimize-to-application" -bool true
#+end_src

=off= *Animate opening applications*
#+begin_src sh
  defaults write com.apple.dock "launchanim" -bool false
#+end_src

=on= *Automatically hide and show the Dock*
#+begin_src sh
  defaults write com.apple.dock "autohide" -bool true
#+end_src

=on= *Show indicators for open applications*
#+begin_src sh
  defaults write com.apple.dock "show-process-indicators" -bool true
#+end_src

#+begin_src sh
  }
#+end_src

**** Security & Privacy: General

#+begin_src sh
  function prefs_security () {
#+end_src

=on= *Require password* =5 seconds= *after sleep or screen saver begins*
#+begin_src sh
  defaults write com.apple.screensaver "askForPassword" -int 1
  defaults write com.apple.screensaver "askForPasswordDelay" -int 5
#+end_src

#+begin_src sh
  }
#+end_src

**** Energy Saver: Power

#+begin_src sh
  function prefs_power () {
#+end_src

*Turn display off after:* =20 min=
#+begin_src sh
  sudo pmset -c displaysleep 20
#+end_src

=on= *Prevent computer from sleeping automatically when the display is off*
#+begin_src sh
  sudo pmset -c sleep 0
#+end_src

=60 min= *Put hard disks to sleep when possible*
#+begin_src sh
  sudo pmset -c disksleep 60
#+end_src

=on= *Wake for network access*
#+begin_src sh
  sudo pmset -c womp 1
#+end_src

=on= *Start up automatically after a power failure*
#+begin_src sh
  sudo pmset -c autorestart 1
#+end_src

=on= *Enable Power Nap*
#+begin_src sh
  sudo pmset -c powernap 1
#+end_src

#+begin_src sh
  }
#+end_src

**** Energy Saver: UPS

#+begin_src sh
  function prefs_ups () {
#+end_src

*Turn display off after:* =2 min=
#+begin_src sh
  sudo pmset -u displaysleep 2
#+end_src

=on= *Slightly dim the display when using this power source*
#+begin_src sh
  sudo pmset -u lessbright 1
#+end_src

=on= *Shut down the computer after using the UPS battery for:* =5 min=
#+begin_src sh
  sudo pmset -u haltafter 5
#+end_src

=off= *Shut down the computer when the time remaining on the UPS battery is:*
#+begin_src sh
  sudo pmset -u haltremain -1
#+end_src

=off= *Shut down the computer when the UPS battery level is below:*
#+begin_src sh
  sudo pmset -u haltlevel -1
#+end_src

#+begin_src sh
  }
#+end_src

**** Keyboard: Text

#+begin_src sh
  function prefs_text () {
#+end_src

=off= *Capitalize words automatically*
#+begin_src sh
  defaults write -globalDomain NSAutomaticCapitalizationEnabled -bool false
#+end_src

=off= *Add period with double-space*
#+begin_src sh
  defaults write -globalDomain NSAutomaticPeriodSubstitutionEnabled -bool false
#+end_src

=off= *Use smart quotes and dashes*
#+begin_src sh
  defaults write -globalDomain NSAutomaticQuoteSubstitutionEnabled -bool false
#+end_src

#+begin_src sh
  }
#+end_src

**** Mouse

#+begin_src sh
  function prefs_mouse () {
#+end_src

=off= *Scroll direction: Natural*
#+begin_src sh
  defaults write -globalDomain com.apple.swipescrolldirection -bool false
#+end_src

#+begin_src sh
  }
#+end_src

**** Trackpad: Point & Click

#+begin_src sh
  function prefs_trackpad () {
#+end_src

=on= *Tap to click*
#+begin_src sh
  defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
  defaults -currentHost write -globalDomain com.apple.mouse.tapBehavior -int 1
#+end_src

#+begin_src sh
  }
#+end_src

**** Sound: Sound Effects

#+begin_src sh
  function prefs_sound () {
#+end_src

*Select an alert sound:* =Sosumi=
#+begin_src sh
  defaults write -globalDomain "com.apple.sound.beep.sound" -string "/System/Library/Sounds/Sosumi.aiff"
#+end_src

=off= *Play user interface sound effects*
#+begin_src sh
  defaults write -globalDomain "com.apple.sound.uiaudio.enabled" -int 0
#+end_src

=off= *Play feedback when volume is changed*
#+begin_src sh
  defaults write -globalDomain "com.apple.sound.beep.feedback" -int 0
#+end_src

#+begin_src sh
  }
#+end_src

**** Sharing: File Sharing

*Shared Folders:* =None=
#+begin_src sh
  function prefs_sharing () {
    sudo dscl . -delete "/SharePoints"
  }
#+end_src

**** Users & Groups: Guest User

=off= Allow guests to log in to this computer
#+begin_src sh
  function prefs_guest () {
    sudo sysadminctl -guestAccount off
  }
#+end_src

**** Date & Time: Clock

=on= *Show date and time in menu bar*

=on= *Time options: Display the time with seconds*

=on= *Time options: Show AM/PM*

=on= *Date options: Show the day of the week*

=on= *Date options: Show date*
#+begin_src sh
  function prefs_clock () {
    defaults write com.apple.menuextra.clock "DateFormat" -string "EEE MMM d  h:mm:ss a"
  }
#+end_src

**** Accessibility: Display

=on= *Reduce transparency*
#+begin_src sh
  function prefs_accessibility () {
    defaults write com.apple.universalaccess "reduceTransparency" -bool true
  }
#+end_src

#+begin_src sh
  function prefs_restart () {
    killall -u "$(whoami)" cfprefsd
    osascript -e 'tell app "Finder" to quit'
    killall Finder
  }
#+end_src

*** VLC

#+begin_src sh
  function prefs_vlc () {
    p "Set VLC preferences"

    if [ ! -d "${HOME}/Library/Preferences/org.videolan.vlc" ]; then
      mkdir -m o-w -p "${HOME}/Library/Preferences/org.videolan.vlc"
    fi

    cat > "${HOME}/Library/Preferences/org.videolan.vlc/vlcrc" << EOF
  avcodec-hw=vda
  macosx-appleremote=0
  macosx-continue-playback=1
  macosx-nativefullscreenmode=1
  macosx-pause-minimized=1
  macosx-video-autoresize=0
  spdif=1
  sub-language=English
  subsdec-encoding=UTF-8
  volume-save=0
  EOF
  }
#+end_src

*** prefs

#+begin_src sh
  function prefs () {
    prefs_autoping
    prefs_finder
    prefs_moom
    prefs_nvalt
    prefs_safari

    prefs_general
    prefs_screensaver
    prefs_dock
    prefs_security
    prefs_power
    prefs_ups
    prefs_text
    prefs_mouse
    prefs_trackpad
    prefs_sound
    prefs_sharing
    prefs_guest
    prefs_clock
    prefs_accessibility

    prefs_restart

    prefs_vlc

    which config
  }
#+end_src

** Configuration

*** App Store

#+begin_src sh
  function config_mas () {
    p "Save App Store packages"

    cat > "/usr/local/bin/mas_save.sh" << EOF
  #!/bin/sh
  DIR="\${HOME}/Downloads/App Store"
  MAS="\$(getconf DARWIN_USER_CACHE_DIR)com.apple.appstore"

  mkdir -m go= -p "\${DIR}"
  for a in \$(find "\${MAS}" -iname "[0-9]*" -type d); do
    b="\${DIR}/\$(basename \$a)"
    mkdir -m go= -p "\${b}"
    end=\$(( \$(date +%s) + 5 ))
    while [ \$(date +%s) -lt \$end ]; do
      for c in \${a}/*; do
        d="\$(basename \$c)"
        if [ ! -e "\${b}/\${d}" ]; then
          ln "\${a}/\${d}" "\${b}/\${d}"
        fi
      done
    done
  done
  EOF

    chmod a+x "/usr/local/bin/mas_save.sh"
    rehash
#+end_src

#+begin_src sh
  mkdir -m go= -p "${HOME}/Library/LaunchAgents"
  launchctl unload "${HOME}/Library/LaunchAgents/com.github.ptb.mas_save.plist" 2> /dev/null
  printf "%s\n" \
    "add ':KeepAlive' bool false" \
    "add ':Label' string 'com.github.ptb.mas_save'" \
    "add ':Program' string '/usr/local/bin/mas_save.sh'" \
    "add ':RunAtLoad' bool true" \
    "add ':WatchPaths' array" \
    "add ':WatchPaths:0' string '$(getconf DARWIN_USER_CACHE_DIR)com.apple.appstore'" \
  | while IFS=$'\t' read a; do
    /usr/libexec/PlistBuddy "${HOME}/Library/LaunchAgents/com.github.ptb.mas_save.plist" -c "${a}" &> /dev/null
  done
  launchctl load "${HOME}/Library/LaunchAgents/com.github.ptb.mas_save.plist"
#+end_src

#+begin_src sh
  }
#+end_src

*** Atom

Inspiration: [[https://evanhahn.com/atom-apm-install-list/][@EvanHahn]]

#+begin_src sh
  function config_atom () {
    p "Install Atom packages"

    for a in \
      "MagicPython" \
      "atom-beautify" \
      "atom-css-comb" \
      "atom-jade" \
      "atom-wallaby" \
      "autoclose-html" \
      "autocomplete-python" \
      "busy-signal" \
      "double-tag" \
      "editorconfig" \
      "ex-mode" \
      "file-icons" \
      "git-plus" \
      "git-time-machine" \
      "highlight-selected" \
      "intentions" \
      "language-docker" \
      "language-jade" \
      "language-javascript-jsx" \
      "language-lisp" \
      "language-slim" \
      "linter" \
      "linter-eslint" \
      "linter-rubocop" \
      "linter-ui-default" \
      "python-yapf" \
      "react" \
      "riot" \
      "sort-lines" \
      "term3" \
      "tomorrow-night-eighties-syntax" \
      "tree-view-open-files" \
      "vim-mode" \
      "vim-mode-zz" \
      "vim-surround" \
    ; do
      apm install "${a}"
    done

  cat > "${HOME}/.atom/packages/tomorrow-night-eighties-syntax/styles/colors.less" \
    << EOF
  @background: #191919;
  @current-line: #333333;
  @selection: #4c4c4c;
  @foreground: #cccccc;
  @comment: #999999;
  @red: #f27f7f;
  @orange: #ff994c;
  @yellow: #ffcc66;
  @green: #99cc99;
  @aqua: #66cccc;
  @blue: #6699cc;
  @purple: #cc99cc;
  EOF
  }
#+end_src

*** BBEdit

#+begin_src sh
  function config_bbedit () {
    if [ -d "/Applications/BBEdit.app" ]; then
      p "Install BBEdit tools"

      cd /usr/local/bin && \
      ln ../../../Applications/BBEdit.app/Contents/Helpers/bbdiff bbdiff && \
      ln ../../../Applications/BBEdit.app/Contents/Helpers/bbedit_tool bbedit && \
      ln ../../../Applications/BBEdit.app/Contents/Helpers/bbfind bbfind && \
      ln ../../../Applications/BBEdit.app/Contents/Helpers/bbresults bbresults && \
      cd "${HOME}"
    fi
  }
#+end_src

*** Desktop

#+begin_src sh
  function config_desktop () {
    p "Set Desktop preferences"
#+end_src

*Desktop: Solid Colors: Custom Color…* =Solid Black=
#+begin_src sh
  sudo rm "/Library/Caches/com.apple.desktop.admin.png"
  base64 -D > "/Library/Caches/com.apple.desktop.admin.png" <<< "iVBORw0KGgoAAAANSUhEUgAAAIAAAACAAQAAAADrRVxmAAAAGElEQVR4AWOgMxgFo2AUjIJRMApGwSgAAAiAAAH3bJXBAAAAAElFTkSuQmCC"

  osascript << EOF
    tell application "System Events"
      set a to POSIX file "/Library/Caches/com.apple.desktop.admin.png"
      set b to a reference to every desktop
      repeat with c in b
        set picture of c to a
      end repeat
    end tell
  EOF
#+end_src

*Screen Saver:* =BlankScreen=
#+begin_src sh
  if [ -e "/Library/Screen Savers/BlankScreen.saver" ]; then
    p "Set Screen Saver preferences"

    defaults -currentHost write com.apple.screensaver moduleDict \
      '{ moduleName = "BlankScreen"; path = "/Library/Screen Savers/BlankScreen.saver"; type = 0; }'
  fi
#+end_src

#+begin_src sh
  }
#+end_src

*** Dock

#+begin_src sh
  function config_dock () {
    p "Set Dock preferences"

    defaults write com.apple.dock "autohide-delay" -float 0
    defaults write com.apple.dock "autohide-time-modifier" -float 0.5

    defaults delete com.apple.dock "persistent-apps"

    for app in \
      "nvALT" \
      "Mail" \
      "Safari" \
      "Messages" \
      "Emacs" \
      "Atom" \
      "Utilities/Terminal" \
      "System Preferences" \
      "PCalc" \
      "iTunes" \
      "VLC" \
    ; do
      defaults write com.apple.dock "persistent-apps" -array-add \
        "<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/${app}.app/</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>"
    done

    defaults delete com.apple.dock "persistent-others"

    osascript -e 'tell app "Dock" to quit'
  }
#+end_src

*** Emacs

**** Download [[http://spacemacs.org/][Spacemacs]]

#+begin_src sh
function config_emacs () {
  p "Configure Emacs"

  mkdir -m go= -p "${HOME}/.emacs.d" \
    && curl --compressed --location --silent \
      "https://github.com/syl20bnr/spacemacs/archive/master.tar.gz" \
    | tar -C "${HOME}/.emacs.d" --strip-components 1 -xf -
  mkdir -m go= -p "${HOME}/.emacs.d/private/ptb"
#+end_src

**** Create =~/.spacemacs=

#+begin_src sh
  cat > "${HOME}/.spacemacs" << EOF
  (defun dotspacemacs/layers ()
    (setq-default
      dotspacemacs-configuration-layers '(
        auto-completion
        (colors :variables
          colors-colorize-identifiers 'variables)
        dash
        deft
        docker
        emacs-lisp
        evil-cleverparens
        git
        github
        helm
        html
        ibuffer
        imenu-list
        javascript
        markdown
        nginx
        (org :variables
          org-enable-github-support t)
        (osx :variables
          osx-use-option-as-meta nil)
        ptb
        react
        ruby
        ruby-on-rails
        search-engine
        semantic
        shell-scripts
        (spell-checking :variables
          spell-checking-enable-by-default nil)
        syntax-checking
        (version-control :variables
          version-control-diff-side 'left)
        vim-empty-lines
      )
      dotspacemacs-excluded-packages '(org-bullets)
    )
  )

  (defun dotspacemacs/init ()
    (setq-default
      dotspacemacs-startup-banner nil
      dotspacemacs-startup-lists nil
      dotspacemacs-scratch-mode 'org-mode
      dotspacemacs-themes '(sanityinc-tomorrow-eighties)
      dotspacemacs-default-font '(
        "Inconsolata LGC"
        :size 13
        :weight normal
        :width normal
        :powerline-scale 1.1)
      dotspacemacs-loading-progress-bar nil
      dotspacemacs-active-transparency 100
      dotspacemacs-inactive-transparency 100
      dotspacemacs-line-numbers t
      dotspacemacs-whitespace-cleanup 'all
    )
  )

  (defun dotspacemacs/user-init ())
  (defun dotspacemacs/user-config ())
  EOF
#+end_src

**** Create =~/.emacs.d/private/ptb/config.el=

#+begin_src sh
  cat > "${HOME}/.emacs.d/private/ptb/config.el" << EOF
  (setq
    default-frame-alist '(
      (top . 22)
      (left . 1790)
      (height . 40)
      (width . 91)
      (vertical-scroll-bars . right))
    initial-frame-alist (copy-alist default-frame-alist)

    deft-directory "~/Dropbox/Notes"
    focus-follows-mouse t
    mouse-wheel-follow-mouse t
    mouse-wheel-scroll-amount '(1 ((shift) . 1))
    purpose-display-at-right 20
    recentf-max-saved-items 5
    scroll-step 1
    system-uses-terminfo nil

    ibuffer-formats '(
      (mark modified read-only " "
      (name 18 18 :left :elide)))

    ibuffer-shrink-to-minimum-size t
    ibuffer-always-show-last-buffer nil
    ibuffer-sorting-mode 'recency
    ibuffer-use-header-line nil
    x-select-enable-clipboard nil)

  (global-linum-mode t)
  (recentf-mode t)
  (x-focus-frame nil)
  (with-eval-after-load 'org
    (org-babel-do-load-languages
      'org-babel-load-languages '(
        (ruby . t)
        (shell . t)
      )
    )
  )
  EOF
#+end_src

**** Create =~/.emacs.d/private/ptb/funcs.el=

#+begin_src sh
  cat > "${HOME}/.emacs.d/private/ptb/funcs.el" << EOF
  (defun is-useless-buffer (buffer)
    (let ((name (buffer-name buffer)))
      (and (= ?* (aref name 0))
          (string-match "^\\**" name))))

  (defun kill-useless-buffers ()
    (interactive)
    (loop for buffer being the buffers
          do (and (is-useless-buffer buffer) (kill-buffer buffer))))

  (defun org-babel-tangle-hook ()
    (add-hook 'after-save-hook 'org-babel-tangle))

  (add-hook 'org-mode-hook #'org-babel-tangle-hook)

  (defun ptb/new-untitled-buffer ()
    "Create a new untitled buffer in the current frame."
    (interactive)
    (let
      ((buffer "Untitled-") (count 1))
      (while
        (get-buffer (concat buffer (number-to-string count)))
        (setq count (1+ count)))
      (switch-to-buffer
      (concat buffer (number-to-string count))))
    (org-mode))

  (defun ptb/previous-buffer ()
    (interactive)
    (kill-useless-buffers)
    (previous-buffer))

  (defun ptb/next-buffer ()
    (interactive)
    (kill-useless-buffers)
    (next-buffer))

  (defun ptb/kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer))
    (kill-useless-buffers))
  EOF
#+end_src

**** Create =~/.emacs.d/private/ptb/keybindings.el=

#+begin_src sh
  cat > "${HOME}/.emacs.d/private/ptb/keybindings.el" << EOF
  (define-key evil-normal-state-map (kbd "s-c") 'clipboard-kill-ring-save)
  (define-key evil-insert-state-map (kbd "s-c") 'clipboard-kill-ring-save)
  (define-key evil-visual-state-map (kbd "s-c") 'clipboard-kill-ring-save)

  (define-key evil-ex-completion-map (kbd "s-v") 'clipboard-yank)
  (define-key evil-ex-search-keymap (kbd "s-v") 'clipboard-yank)
  (define-key evil-insert-state-map (kbd "s-v") 'clipboard-yank)

  (define-key evil-normal-state-map (kbd "s-x") 'clipboard-kill-region)
  (define-key evil-insert-state-map (kbd "s-x") 'clipboard-kill-region)
  (define-key evil-visual-state-map (kbd "s-x") 'clipboard-kill-region)

  (define-key evil-normal-state-map (kbd "<S-up>") 'evil-previous-visual-line)
  (define-key evil-insert-state-map (kbd "<S-up>") 'evil-previous-visual-line)
  (define-key evil-visual-state-map (kbd "<S-up>") 'evil-previous-visual-line)

  (define-key evil-normal-state-map (kbd "<S-down>") 'evil-next-visual-line)
  (define-key evil-insert-state-map (kbd "<S-down>") 'evil-next-visual-line)
  (define-key evil-visual-state-map (kbd "<S-down>") 'evil-next-visual-line)

  (global-set-key (kbd "C-l") 'evil-search-highlight-persist-remove-all)

  (global-set-key (kbd "s-t") 'make-frame)
  (global-set-key (kbd "s-n") 'ptb/new-untitled-buffer)
  (global-set-key (kbd "s-w") 'ptb/kill-this-buffer)
  (global-set-key (kbd "s-{") 'ptb/previous-buffer)
  (global-set-key (kbd "s-}") 'ptb/next-buffer)
  EOF
#+end_src

**** Create =~/.emacs.d/private/ptb/packages.el=

#+begin_src sh
  cat > "${HOME}/.emacs.d/private/ptb/packages.el" << EOF
  (setq ptb-packages '(auto-indent-mode inline-crypt))

  (defun ptb/init-auto-indent-mode ()
    (use-package auto-indent-mode
      :init
      (setq
        auto-indent-delete-backward-char t
        auto-indent-fix-org-auto-fill t
        auto-indent-fix-org-move-beginning-of-line t
        auto-indent-fix-org-return t
        auto-indent-fix-org-yank t
        auto-indent-start-org-indent t
      )
    )
  )

  (defun ptb/init-inline-crypt ()
    (use-package inline-crypt :init))
  EOF
#+end_src

#+begin_src sh
  }
#+end_src

**** Create =/usr/local/bin/vi=

#+begin_src sh
  function config_vi_script () {
    p "Create vi script"

    cat > /usr/local/bin/vi <<-EOF
  #!/bin/sh

  if [ -e "/Applications/Emacs.app" ]; then
    t=()

    if [ \${#@} -ne 0 ]; then
      while IFS= read -r file; do
        [ ! -f "\$file" ] && t+=("\$file") && /usr/bin/touch "\$file"
        file=\$(echo \$(cd \$(dirname "\$file") && pwd -P)/\$(basename "\$file"))
        \$(/usr/bin/osascript <<-END
          if application "Emacs.app" is running then
            tell application id (id of application "Emacs.app") to open POSIX file "\$file"
          else
            tell application ((path to applications folder as text) & "Emacs.app")
              activate
              open POSIX file "\$file"
            end tell
          end if
  END
          ) &  # Note: END on the previous line may be indented with tabs but not spaces
        done <<<"\$(printf '%s\n' "\$@")"
      fi

      if [ ! -z "\$t" ]; then
        \$(/bin/sleep 10; for file in "\${t[@]}"; do
          [ ! -s "\$file" ] && /bin/rm "\$file";
        done) &
      fi
    else
      vim -No "\$@"
    fi
  EOF

    chmod a+x /usr/local/bin/vi
    rehash
  }
#+end_src

*** iStat Menus
:properties:
:header-args+: :padline no
:end:

#+begin_src sh
  function config_istat () {
    p "Set iStat Menu preferences"

    printf "%s\t%s\t%s\n" \
#+end_src

#+begin_src sh
  "MenubarSkinColor" "-int" "8" \
  "MenubarTheme" "-int" "0" \
  "DropdownTheme" "-int" "1" \
#+end_src

#+begin_src sh
  "CPU_MenubarMode" "-string" "100,2,0" \
  "CPU_MenubarTextSize" "-int" "14" \
  "CPU_MenubarGraphShowBackground" "-int" "0" \
  "CPU_MenubarGraphWidth" "-int" "32" \
  "CPU_MenubarGraphBreakdowns" "-int" "0" \
  "CPU_MenubarGraphCustomColors" "-int" "0" \
  "CPU_MenubarGraphOverall" "-string" "0.40 0.60 0.40 1.00" \
  "CPU_MenubarCombineCores" "-int" "1" \
  "CPU_MenubarGroupItems" "-int" "0" \
  "CPU_MenubarSingleHistoryGraph" "-int" "0" \
  "CPU_CombineLogicalCores" "-int" "1" \
  "CPU_AppFormat" "-int" "0" \
#+end_src

#+begin_src sh
  "Memory_MenubarMode" "-string" "100,2,6" \
  "Memory_MenubarPercentageSize" "-int" "14" \
  "Memory_MenubarGraphBreakdowns" "-int" "1" \
  "Memory_MenubarGraphCustomColors" "-int" "0" \
  "Memory_MenubarGraphOverall" "-string" "0.40 0.60 0.40 1.00" \
  "Memory_MenubarGraphWired" "-string" "0.40 0.60 0.40 1.00" \
  "Memory_MenubarGraphActive" "-string" "0.47 0.67 0.47 1.00" \
  "Memory_MenubarGraphCompressed" "-string" "0.53 0.73 0.53 1.00" \
  "Memory_MenubarGraphInactive" "-string" "0.60 0.80 0.60 1.00" \
  "Memory_IgnoreInactive" "-int" "0" \
  "Memory_AppFormat" "-int" "0" \
  "Memory_DisplayFormat" "-int" "1" \
#+end_src

#+begin_src sh
  "Disks_MenubarMode" "-string" "100,9,8" \
  "Disks_MenubarGroupItems" "-int" "1" \
  "Disks_MenubarRWShowLabel" "-int" "1" \
  "Disks_MenubarRWBold" "-int" "0" \
  "Disks_MenubarGraphActivityWidth" "-int" "32" \
  "Disks_MenubarGraphActivityShowBackground" "-int" "0" \
  "Disks_MenubarGraphActivityCustomColors" "-int" "0" \
  "Disks_MenubarGraphActivityRead" "-string" "0.60 0.80 0.60 1.00" \
  "Disks_MenubarGraphActivityWrite" "-string" "0.40 0.60 0.40 1.00" \
  "Disks_SeperateFusion" "-int" "1" \
#+end_src

#+begin_src sh
  "Network_MenubarMode" "-string" "4,0,1" \
  "Network_TextUploadColor-Dark" "-string" "1.00 1.00 1.00 1.00" \
  "Network_TextDownloadColor-Dark" "-string" "1.00 1.00 1.00 1.00" \
  "Network_GraphWidth" "-int" "32" \
  "Network_GraphShowBackground" "-int" "0" \
  "Network_GraphCustomColors" "-int" "0" \
  "Network_GraphUpload" "-string" "0.60 0.80 0.60 1.00" \
  "Network_GraphDownload" "-string" "0.40 0.60 0.40 1.00" \
  "Network_GraphMode" "-int" "1" \
#+end_src

#+begin_src sh
  "Battery_MenubarMode" "-string" "5,0" \
  "Battery_ColorGraphCustomColors" "-int" "1" \
  "Battery_ColorGraphCharged" "-string" "0.40 0.60 0.40 1.00" \
  "Battery_ColorGraphCharging" "-string" "0.60 0.80 0.60 1.00" \
  "Battery_ColorGraphDraining" "-string" "1.00 0.60 0.60 1.00" \
  "Battery_ColorGraphLow" "-string" "1.00 0.20 0.20 1.00" \
  "Battery_PercentageSize" "-int" "14" \
  "Battery_MenubarCustomizeStates" "-int" "0" \
  "Battery_MenubarHideBluetooth" "-int" "1" \
#+end_src

#+begin_src sh
  "Time_MenubarFormat" "-array-add" "EE" \
  "Time_MenubarFormat" "-array-add" " " \
  "Time_MenubarFormat" "-array-add" "MMM" \
  "Time_MenubarFormat" "-array-add" " " \
  "Time_MenubarFormat" "-array-add" "d" \
  "Time_MenubarFormat" "-array-add" " " \
  "Time_MenubarFormat" "-array-add" "h" \
  "Time_MenubarFormat" "-array-add" ":" \
  "Time_MenubarFormat" "-array-add" "mm" \
  "Time_MenubarFormat" "-array-add" ":" \
  "Time_MenubarFormat" "-array-add" "ss" \
  "Time_MenubarFormat" "-array-add" " " \
  "Time_MenubarFormat" "-array-add" "a" \
#+end_src

#+begin_src sh
  "Time_DropdownFormat" "-array-add" "EE" \
  "Time_DropdownFormat" "-array-add" " " \
  "Time_DropdownFormat" "-array-add" "h" \
  "Time_DropdownFormat" "-array-add" ":" \
  "Time_DropdownFormat" "-array-add" "mm" \
  "Time_DropdownFormat" "-array-add" " " \
  "Time_DropdownFormat" "-array-add" "a" \
  "Time_DropdownFormat" "-array-add" "' ('" \
  "Time_DropdownFormat" "-array-add" "zzz" \
  "Time_DropdownFormat" "-array-add" "')'" \
#+end_src

#+begin_src sh
  "Time_Cities" "-array-add" "4930956" \
  "Time_Cities" "-array-add" "4887398" \
  "Time_Cities" "-array-add" "5419384" \
  "Time_Cities" "-array-add" "5392171" \
  "Time_Cities" "-array-add" "5879400" \
  "Time_Cities" "-array-add" "5856195" \
  "Time_TextSize" "-int" "14" \
#+end_src

#+begin_src sh
  | while IFS=$'\t' read a b c; do
    defaults write com.bjango.istatmenus5.extras "$a" $b "$c"
  done
#+end_src

#+begin_src sh
  }
#+end_src

*** Terminal
:properties:
:header-args+: :padline no
:end:

Inspiration: [[https://github.com/ChrisKempson/Tomorrow-Theme#tomorrow-night-eighties][@chriskempson]], [[https://apple.stackexchange.com/a/98843][@user495470]], & [[https://github.com/reitermarkus/dotfiles/blob/master/include/settings/terminal.sh][@reitermarkus]]

**** General

#+begin_src sh
  function config_terminal () {
    p "Set Terminal preferences"
#+end_src

*On startup, open: New window with profile:* =ptb=
#+begin_src sh
  defaults write -app Terminal "Startup Window Settings" -string "$(whoami)"
#+end_src

**** Profiles

#+begin_src sh
  defaults write -app Terminal "Default Window Settings" -string "$(whoami)"

  /usr/libexec/PlistBuddy -c "delete ':Window Settings:$(whoami)'" \
    "${HOME}/Library/Preferences/com.apple.Terminal.plist" &> /dev/null

  for terminal_prop in \
#+end_src

#+begin_src sh
  " dict" \
  ":name string '$(whoami)'" \
  ":type string 'Window Settings'" \
  ":ProfileCurrentVersion real 2.05" \
#+end_src

**** Text

#+begin_src sh
  ':BackgroundColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC4xIDAuMSAwLjE=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ":BackgroundBlur real 0" \
  ":BackgroundSettingsForInactiveWindows bool false" \
  ":BackgroundAlphaInactive real 1" \
  ":BackgroundBlurInactive real 0" \
  ':Font data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>3</integer></dict><key>NSName</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSSize</key><real>13</real><key>NSfFlags</key><integer>16</integer></dict><string>InconsolataLGC</string><dict><key>$classes</key><array><string>NSFont</string><string>NSObject</string></array><key>$classname</key><string>NSFont</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ":FontWidthSpacing real 1" \
  ":FontHeightSpacing real 1" \
  ":FontAntialias bool true" \
  ":UseBoldFonts bool true" \
  ":BlinkText bool false" \
  ":DisableANSIColor bool false" \
  ":UseBrightBold bool false" \
  ':TextColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDAuOCAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':TextBoldColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDAuOCAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':SelectionColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC4zIDAuMyAwLjM=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBlackColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC4zIDAuMyAwLjM=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIRedColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC45NSAwLjUgMC41</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIGreenColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC42IDAuOCAwLjY=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIYellowColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MSAwLjggMC40</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBlueColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC40IDAuNiAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIMagentaColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDAuNiAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSICyanColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC40IDAuOCAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIWhiteColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDAuOCAwLjg=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightBlackColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC41IDAuNSAwLjU=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightRedColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MSAwLjcgMC43</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightGreenColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC44IDEgMC44</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightYellowColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MSAxIDAuNg==</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightBlueColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC42IDAuOCAx</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightMagentaColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MSAwLjggMQ==</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightCyanColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC42IDEgMQ==</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ':ANSIBrightWhiteColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC45IDAuOSAwLjk=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
  ":CursorType integer 0" \
  ":CursorBlink bool false" \
  ':CursorColor data <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>$archiver</key><string>NSKeyedArchiver</string><key>$objects</key><array><string>$null</string><dict><key>$class</key><dict><key>CF$UID</key><integer>2</integer></dict><key>NSColorSpace</key><integer>1</integer><key>NSRGB</key><data>MC43IDAuNyAwLjc=</data></dict><dict><key>$classes</key><array><string>NSColor</string><string>NSObject</string></array><key>$classname</key><string>NSColor</string></dict></array><key>$top</key><dict><key>root</key><dict><key>CF$UID</key><integer>1</integer></dict></dict><key>$version</key><integer>100000</integer></dict></plist>' \
#+end_src

**** Window

#+begin_src sh
  ":ShowRepresentedURLInTitle bool true" \
  ":ShowRepresentedURLPathInTitle bool true" \
  ":ShowActiveProcessInTitle bool true" \
  ":ShowActiveProcessArgumentsInTitle bool false" \
  ":ShowShellCommandInTitle bool false" \
  ":ShowWindowSettingsNameInTitle bool false" \
  ":ShowTTYNameInTitle bool false" \
  ":ShowDimensionsInTitle bool false" \
  ":ShowCommandKeyInTitle bool false" \
  ":columnCount integer 124" \
  ":rowCount integer 20" \
  ":ShouldLimitScrollback integer 0" \
  ":ScrollbackLines integer 0" \
  ":ShouldRestoreContent bool false" \
#+end_src

**** Tab

#+begin_src sh
  ":ShowRepresentedURLInTabTitle bool false" \
  ":ShowRepresentedURLPathInTabTitle bool false" \
  ":ShowActiveProcessInTabTitle bool true" \
  ":ShowActiveProcessArgumentsInTabTitle bool false" \
  ":ShowTTYNameInTabTitle bool false" \
  ":ShowComponentsWhenTabHasCustomTitle bool true" \
  ":ShowActivityIndicatorInTab bool true" \
#+end_src

**** Shell

#+begin_src sh
  ":shellExitAction integer 1" \
  ":warnOnShellCloseAction integer 1" \
#+end_src

**** Keyboard

#+begin_src sh
  ":useOptionAsMetaKey bool false" \
  ":ScrollAlternateScreen bool true" \
#+end_src

**** Advanced

#+begin_src sh
  ":TerminalType string 'xterm-256color'" \
  ":deleteSendsBackspace bool false" \
  ":EscapeNonASCIICharacters bool true" \
  ":ConvertNewlinesOnPaste bool true" \
  ":StrictVTKeypad bool true" \
  ":scrollOnInput bool true" \
  ":Bell bool false" \
  ":VisualBell bool false" \
  ":VisualBellOnlyWhenMuted bool false" \
  ":BellBadge bool false" \
  ":BellBounce bool false" \
  ":BellBounceCritical bool false" \
  ":CharacterEncoding integer 4" \
  ":SetLanguageEnvironmentVariables bool true" \
  ":EastAsianAmbiguousWide bool false" \
#+end_src

#+begin_src sh
  ; do
    /usr/libexec/PlistBuddy "$HOME/Library/Preferences/com.apple.Terminal.plist" \
      -c "add ':Window Settings:$(whoami)'${terminal_prop}"
  done
#+end_src

#+begin_src sh
  }
#+end_src

*** dovecot

#+begin_example sh :tangle no
  doveadm sync -u $(whoami) maildir:~/.email:INBOX=~/.email/Inbox:LAYOUT=fs
#+end_example

#+begin_src sh
  function config_dovecot () {
    p "Enable email authentication with macOS accounts"

    sudo tee "/etc/pam.d/dovecot" > /dev/null << EOF
  auth		required	pam_opendirectory.so try_first_pass
  account		required	pam_nologin.so
  account		required	pam_opendirectory.so
  password	required	pam_opendirectory.so
  EOF

    p "Configure Dovecot email server"

    cat > "/usr/local/etc/dovecot/dovecot.conf" << EOF
  auth_mechanisms = cram-md5
  default_internal_user = _dovecot
  default_login_user = _dovenull
  log_path = /dev/stderr
  mail_location = maildir:~/.mail:INBOX=~/.mail/Inbox:LAYOUT=fs
  mail_plugins = zlib
  maildir_copy_with_hardlinks = no
  namespace {
    inbox = yes
    mailbox Drafts {
      auto = subscribe
      special_use = \Drafts
    }
    mailbox Junk {
      auto = subscribe
      special_use = \Junk
    }
    mailbox Sent {
      auto = subscribe
      special_use = \Sent
    }
    mailbox "Sent Messages" {
      special_use = \Sent
    }
    mailbox Trash {
      auto = subscribe
      special_use = \Trash
    }
    separator = .
    type = private
  }
  passdb {
    args = scheme=cram-md5 /usr/local/etc/dovecot/cram-md5.pwd
    driver = passwd-file

    # driver = pam

    # args = nopassword=y
    # driver = static
  }
  plugin {
    sieve = file:/Users/%u/.sieve
    zlib_save = bz2
    zlib_save_level = 9
  }
  postmaster_address = ${USER}@${DOMAIN}
  protocols = imap
  service imap-login {
    inet_listener imap {
      port = 0
    }
  }
  ssl = required
  ssl_cert = <${SSL}/certs/${MAIL}/${MAIL}.crt
  ssl_cipher_list = AES128+EECDH:AES128+EDH
  ssl_dh_parameters_length = 4096
  ssl_key = <${SSL}/certs/${MAIL}/${MAIL}.key
  ssl_prefer_server_ciphers = yes
  ssl_protocols = !SSLv2 !SSLv3
  userdb {
    driver = passwd
  }
  protocol lda {
    mail_plugins = sieve
  }

  # auth_debug = yes
  # auth_debug_passwords = yes
  # auth_verbose = yes
  # auth_verbose_passwords = plain
  # mail_debug = yes
  # verbose_ssl = yes
  EOF

    if [ ! -f "/usr/local/etc/dovecot/cram-md5.pwd" ]; then
      p "Create email account for '${USER}' with 'CRAM-MD5' authentication: "
      doveadm pw | sed -e "s/^/${USER}:/" > "/usr/local/etc/dovecot/cram-md5.pwd"
      sudo chown _dovecot "/usr/local/etc/dovecot/cram-md5.pwd"
      sudo chmod go= "/usr/local/etc/dovecot/cram-md5.pwd"
    fi

    if ! /usr/bin/grep -Fq ${MAIL} "/etc/hosts"; then
      printf "127.0.0.1\t${MAIL}\n" | sudo tee -a /etc/hosts > /dev/null
    fi

    sudo brew services start dovecot
  }
#+end_src

*** getmail

#+begin_src sh
  function config_getmail () {
    p "Configure getmail"

    mkdir -m go= -p "${HOME}/.getmail" "${HOME}/Library/LaunchAgents"

    printf "%s\n" \
      "add ':KeepAlive' bool false" \
      "add ':Label' string 'ca.pyropus.getmail'" \
      "add ':ProgramArguments' array" \
      "add ':ProgramArguments:0' string '/usr/local/bin/getmail'" \
      "add ':RunAtLoad' bool true" \
      "add ':StandardOutPath' string '${HOME}/.getmail/getmail.log'" \
      "add ':StandardErrorPath' string '${HOME}/.getmail/getmail.err'" \
      "add ':StartInterval' integer 300" \
    | while read a; do
      /usr/libexec/PlistBuddy "${HOME}/Library/LaunchAgents/ca.pyropus.getmail.plist" -c "${a}" &> /dev/null
    done

    for email in \
      "pbosse@gmail.com" \
      "ptb@ioutime.com" \
    ; do
      p "Add password for '${email}' to Keychain"

      security add-internet-password -a "${email}" -s "imap.gmail.com" -r "imap" \
        -l "${email}" -D "getmail password" -P 993 -w

      cat > "${HOME}/.getmail/${email}" << EOF
  [retriever]
  type = SimpleIMAPSSLRetriever
  server = imap.gmail.com
  port = 993
  username = ${email}
  mailboxes = ("[Gmail]/All Mail",)

  [destination]
  type = MDA_external
  path = /usr/local/Cellar/dovecot/2.2.31/libexec/dovecot/dovecot-lda
  arguments = ("-c","/usr/local/etc/dovecot/dovecot.conf","-d","$(whoami)",)
  ignore_stderr = true

  [options]
  # delete = true
  delete_after = 30
  delivered_to = false
  read_all = false
  received = false
  verbose = 1
  EOF

    defaults write "${HOME}/Library/LaunchAgents/ca.pyropus.getmail" \
      ProgramArguments -array-add "--rcfile"
    defaults write "${HOME}/Library/LaunchAgents/ca.pyropus.getmail" \
      ProgramArguments -array-add "${email}"
    done

    plutil -convert xml1 "${HOME}/Library/LaunchAgents/ca.pyropus.getmail.plist"
    launchctl load "${HOME}/Library/LaunchAgents/ca.pyropus.getmail.plist"

    # http://shadow-file.blogspot.com/2012/06/parsing-email-and-fixing-timestamps-in.html
    curl -L https://pastebin.com/raw/ZBq7euid | tr -d '\015' > /usr/local/bin/timestamp.py
    chmod +x /usr/local/bin/timestamp.py
  }
#+end_src

for file in $(ls -1); do ~/bin/timestamp.py $file; done

find "${HOME}/.mail" -type f -name "[0123456789]*" -exec /usr/local/bin/timestamp.py '{}' ';'

*** git

#+begin_src sh
  function config_git () {
    p "Configure git"

    KEY="$(gpg -K --with-colons | awk -F: '/^sec/ { a=$5 } END { print a }')"

    git config --global user.name "Peter T Bosse II"
    git config --global user.email "ptb@ioutime.com"

    git config --global alias.cm "commit --allow-empty-message --message="
    git config --global alias.co "checkout"
    git config --global alias.st "status"

    git config --global push.default "simple"

    if [ ! -z ${KEY} ]; then
      git config --global user.signingkey "${KEY}"
      git config --global gpg.program "$(which gpg)"
      git config --global commit.gpgsign "true"
      git config --global tag.gpgsign "true"
      git config --global log.showSignature "true"
    fi
  }
#+end_src

*** gnupg

#+begin_src sh
  function config_gpg () {
    p "Create GPG keys"

    mkdir -m go= -p "${HOME}/.gnupg"

    echo "keyid-format long" \
      > "${HOME}/.gnupg/gpg.conf"
    echo "pinentry-program $(which pinentry-mac)" \
      > "${HOME}/.gnupg/gpg-agent.conf"

    gpg --faked-system-time '20170701T120000!' \
      --quick-generate-key "Peter T Bosse II <ptb@ioutime.com>" \
      future-default default never
  }
#+end_src

#+begin_src sh
  function config_gpg_help () {
    KEY="$(gpg -K --with-colons | awk -F: '/^sec/ { a=$5 } END { print a }')"
    gpg --armor --export "${KEY}" | pbcopy
    open "https://github.com/settings/keys"
  }
#+end_src

*** openssl

#+begin_src sh
  function config_openssl () {
    p "Create OpenSSL certificates"

    SSL="/usr/local/etc/openssl"
    DOMAIN="ptb2.me"
    MAIL="mail.${DOMAIN}"
    FAKE="0701080017"
    DAYS=3652
#+end_src

#+begin_src sh
  mkdir -p "${SSL}/certs/${DOMAIN}"
  cat > "${SSL}/certs/${DOMAIN}/${DOMAIN}.cnf" << EOF
  [ req ]
  default_bits = 4096
  default_keyfile = ${SSL}/certs/${DOMAIN}/${DOMAIN}.key
  default_md = sha256
  distinguished_name = dn
  encrypt_key = no
  prompt = no
  utf8 = yes
  x509_extensions = v3_ca

  [ dn ]
  CN = ${DOMAIN}

  [ v3_ca ]
  subjectKeyIdentifier = hash
  authorityKeyIdentifier = keyid:always,issuer
  basicConstraints = CA:true
  EOF
#+end_src

#+begin_src sh
  openssl genrsa -out "${SSL}/certs/${DOMAIN}/${DOMAIN}.key" 4096

  p "Set fake '${DOMAIN}' certificate creation date"
  sudo date "${FAKE}" && \
  openssl req -days ${DAYS} -new -x509 \
    -config "${SSL}/certs/${DOMAIN}/${DOMAIN}.cnf" \
    -key "${SSL}/certs/${DOMAIN}/${DOMAIN}.key" \
    -out "${SSL}/certs/${DOMAIN}/${DOMAIN}.crt" && \
  sudo ntpdate -u time.apple.com

  p "Password for adding certificate to Keychain Access"
  openssl pkcs12 -aes256 -clcerts -export \
    -in "${SSL}/certs/${DOMAIN}/${DOMAIN}.crt" \
    -inkey "${SSL}/certs/${DOMAIN}/${DOMAIN}.key" \
    -out "${SSL}/certs/${DOMAIN}/${DOMAIN}.p12"

  open -g "${SSL}/certs/${DOMAIN}/${DOMAIN}.p12"
#+end_src

#+begin_src sh
  mkdir -p "${SSL}/certs/${MAIL}"
  cat > "${SSL}/certs/${MAIL}/${MAIL}.cnf" << EOF
  [ req ]
  default_bits = 4096
  default_keyfile = ${SSL}/certs/${DOMAIN}/${DOMAIN}.key
  default_md = sha256
  distinguished_name = dn
  encrypt_key = no
  prompt = no
  utf8 = yes
  x509_extensions = v3_ca

  [ dn ]
  CN = ${MAIL}

  [ v3_ca ]
  subjectKeyIdentifier = hash
  authorityKeyIdentifier = keyid:always,issuer
  basicConstraints = CA:true
  EOF
#+end_src

#+begin_src sh
  openssl genrsa -out "${SSL}/certs/${MAIL}/${MAIL}.key" 4096

  openssl req -new \
    -config "${SSL}/certs/${MAIL}/${MAIL}.cnf" \
    -key "${SSL}/certs/${MAIL}/${MAIL}.key" \
    -out "${SSL}/certs/${MAIL}/${MAIL}.csr"

  p "Set fake '${MAIL}' certificate creation date"
  sudo date "${FAKE}" && \
  openssl x509 -days ${DAYS} -req -set_serial 01 -sha256 \
    -CA "${SSL}/certs/${DOMAIN}/${DOMAIN}.crt" \
    -CAkey "${SSL}/certs/${DOMAIN}/${DOMAIN}.key" \
    -in "${SSL}/certs/${MAIL}/${MAIL}.csr" \
    -out "${SSL}/certs/${MAIL}/${MAIL}.crt" && \
  sudo ntpdate -u time.apple.com
}
#+end_src

*** shell

#+begin_src sh
function config_shell () {
  if [ -x "/usr/local/bin/zsh" ]; then
    # Current User > Advanced Options… > Login shell: /usr/local/bin/zsh
    p "Set '/usr/local/bin/zsh' as the default shell"

    sudo sh -c "printf '%s\n' '/usr/local/bin/zsh' >> /etc/shells" && \
    sudo chsh -s /usr/local/bin/zsh && \
    sudo mkdir -m go= -p /private/var/root/Library/Caches/ && \
    sudo touch "/private/var/root/.zshrc"
    chsh -s /usr/local/bin/zsh
    touch "${HOME}/.zshrc"
  fi
}
#+end_src

*** sieve

#+begin_src sh
  function config_sieve () {
    p "Configure sieve"

    cat > "${HOME}/.sieve" << EOF
  require ["date", "fileinto", "imap4flags", "mailbox", "relational", "variables"];

  setflag "\\Seen";

  if date :is "date" "year" "1995" { fileinto :create "Archives.1995"; }
  if date :is "date" "year" "1996" { fileinto :create "Archives.1996"; }
  if date :is "date" "year" "1997" { fileinto :create "Archives.1997"; }
  if date :is "date" "year" "1998" { fileinto :create "Archives.1998"; }
  if date :is "date" "year" "1999" { fileinto :create "Archives.1999"; }
  if date :is "date" "year" "2000" { fileinto :create "Archives.2000"; }
  if date :is "date" "year" "2001" { fileinto :create "Archives.2001"; }
  if date :is "date" "year" "2002" { fileinto :create "Archives.2002"; }
  if date :is "date" "year" "2003" { fileinto :create "Archives.2003"; }
  if date :is "date" "year" "2004" { fileinto :create "Archives.2004"; }
  if date :is "date" "year" "2005" { fileinto :create "Archives.2005"; }
  if date :is "date" "year" "2006" { fileinto :create "Archives.2006"; }
  if date :is "date" "year" "2007" { fileinto :create "Archives.2007"; }
  if date :is "date" "year" "2008" { fileinto :create "Archives.2008"; }
  if date :is "date" "year" "2009" { fileinto :create "Archives.2009"; }
  if date :is "date" "year" "2010" { fileinto :create "Archives.2010"; }
  if date :is "date" "year" "2011" { fileinto :create "Archives.2011"; }
  if date :is "date" "year" "2012" { fileinto :create "Archives.2012"; }
  if date :is "date" "year" "2013" { fileinto :create "Archives.2013"; }
  if date :is "date" "year" "2014" { fileinto :create "Archives.2014"; }
  if date :is "date" "year" "2015" { fileinto :create "Archives.2015"; }
  if date :is "date" "year" "2016" { fileinto :create "Archives.2016"; }
  if date :is "date" "year" "2017" { fileinto :create "Archives.2017"; }
  if date :is "date" "year" "2018" { fileinto :create "Archives.2018"; }
  if date :is "date" "year" "2019" { fileinto :create "Archives.2019"; }
  if date :is "date" "year" "2020" { fileinto :create "Archives.2020"; }
  EOF
  }
#+end_src

*** ssh

#+begin_src sh
  function config_ssh () {
    p "Create ssh keys"

    mkdir -m go= -p "${HOME}/.ssh"

    ssh-keygen -t ed25519 -a 100 -C "ptb@ioutime.com"

    cat > "${HOME}/.ssh/config" <<-EOF
  Host *
    AddKeysToAgent yes
    IdentityFile ~/.ssh/id_ed25519
  EOF

    p "Adding ssh key to macOS keychain"

    ssh-add -K
    echo "ssh-add -A &> /dev/null" >> "${HOME}/.zshrc"
  }
#+end_src

#+begin_src sh
  function config_ssh_help () {
    pbcopy < "${HOME}/.ssh/id_ed25519.pub"
    open "https://github.com/settings/keys"
  }
#+end_src

#+begin_example sh :tangle no
  ssh-copy-id username@example.com
#+end_example

*** TODO: vim

#+begin_src sh :tangle no
  function config_vim () {
    p "Configure vim"
  }
#+end_src

*** zsh

#+begin_src sh
function config_zsh () {
  p "Create system default '/etc/zshrc'"

  sudo tee /etc/zshrc > /dev/null <<-EOF
alias -g ...="../.."
alias -g ....="../../.."
alias -g .....="../../../.."
alias l="/bin/ls -lG"
alias ll="/bin/ls -alG"
alias lr="/bin/ls -alRG"
alias screen="/usr/bin/screen -U"
autoload -U compaudit
compaudit | xargs -L 1 sudo chown -HR root:wheel {} 2> /dev/null
compaudit | xargs -L 1 sudo chmod -HR go-w {} 2> /dev/null
autoload -U compinit
compinit -d "\${HOME}/Library/Caches/zcompdump"
bindkey "\e[3~" delete-char
bindkey "\e[A" up-line-or-search
bindkey "\e[B" down-line-or-search
export HISTFILE="\${HOME}/Library/Caches/zsh_history"
export HISTSIZE=50000
export SAVEHIST=50000
setopt APPEND_HISTORY
setopt AUTO_CD
setopt EXTENDED_HISTORY
setopt HIST_FIND_NO_DUPS
setopt INC_APPEND_HISTORY
setopt PROMPT_SUBST
setopt SHARE_HISTORY
stty erase 
# Correctly display UTF-8 with combining characters.
if [ "\$TERM_PROGRAM" = "Apple_Terminal" ]; then
  setopt combiningchars
fi
function precmd () {
  print -Pn "\\e]7;file://%M\${PWD// /%%20}\a";
  print -Pn "\\e]2;%n@%m\a";
  print -Pn "\\e]1;%~\a";
}
function gb () {
  git branch --no-color 2> /dev/null | \
    sed -e "/^[^*]/d" -e "s/* \(.*\)/ (\1)/"
}
function xd () {
  xattr -d com.apple.diskimages.fsck \$* 2> /dev/null;
  xattr -d com.apple.diskimages.recentcksum \$* 2> /dev/null;
  xattr -d com.apple.metadata:kMDItemFinderComment \$* 2> /dev/null;
  xattr -d com.apple.metadata:kMDItemDownloadedDate \$* 2> /dev/null;
  xattr -d com.apple.metadata:kMDItemWhereFroms \$* 2> /dev/null;
  xattr -d com.apple.quarantine \$* 2> /dev/null;
  find . -name .DS_Store -delete;
  find . -name 'Icon' -delete
}
function sf () {
  SetFile -P -d "\$1 12:00:00" -m "\$1 12:00:00" \$argv[2,\$]
}
function sd () {
  xd **/*;
  sf \$1 .;
  for i in **/*; do sf \$1 \$i; done;
  chown -R root:wheel .;
  chmod -R a+r,u+w,go-w .;
  find . -type d -exec chmod a+x '{}' ';';
  chgrp -R admin ./Applications;
  chmod -R g+w ./Applications;
  chgrp -R admin ./Library;
  chmod -R g+w ./Library;
  chgrp -R staff "./Library/Application Support/Adobe";
  chmod -R g-w ./Library/Keychains;
  chmod -R g-w ./Library/ScriptingAdditions;
  chgrp -R wheel ./Library/Filesystems;
  chmod -R g-w ./Library/Filesystems;
  chgrp -R wheel ./Library/LaunchAgents;
  chmod -R g-w ./Library/LaunchAgents;
  chgrp -R wheel ./Library/LaunchDaemons;
  chmod -R g-w ./Library/LaunchDaemons;
  chgrp -R wheel ./Library/PreferencePanes;
  chmod -R g-w ./Library/PreferencePanes;
  chgrp -R wheel ./Library/StartupItems;
  chmod -R g-w ./Library/StartupItems;
  chgrp -R wheel ./Library/Widgets;
  chmod -R g-w ./Library/Widgets;
  find . -name "kexts" -type d -exec chmod -R g-w '{}' ';';
  find . -name "*.kext" -exec chown -R root:wheel '{}' ';';
  find . -name "*.kext" -exec chmod -R g-w '{}' ';'
}
MAS="\$(getconf DARWIN_USER_CACHE_DIR)com.apple.appstore"
PROMPT="%B%n@%m%b:%2~%B\$(gb) %#%b "
EOF
}
#+end_src

*** Login Items

#+begin_src sh
  function config_loginitems () {
    p "Create login items"

    osascript > /dev/null << EOF
      tell app "System Events"
        make new login item with properties ¬
          { path: "/Applications/Alfred 3.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/autoping.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Caffeine.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Coffitivity.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Dropbox.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/HardwareGrowler.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/I Love Stars.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/IPMenulet.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/iTunes.app/Contents/MacOS/iTunesHelper.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Menubar Countdown.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Meteorologist.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Moom.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/NZBGet.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Plex Media Server.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Sonarr-Menu.app", hidden: true }
        make new login item with properties ¬
          { path: "/Library/PreferencePanes/SteerMouse.prefPane/Contents/MacOS/SteerMouse Manager.app", hidden: true }
        make new login item with properties ¬
          { path: "/Applications/Synergy Preferences.app/Contents/PreferencePanes/Synergy.prefPane/Contents/Helpers/Synergy.app", hidden: true }
      end tell
  EOF

    mkdir -m go= -p "${HOME}/Library/LaunchAgents"
    printf "%s\t%s\n" \
      "net.elasticthreads.nv" "add ':KeepAlive' bool true" \
      "net.elasticthreads.nv" "add ':Label' string 'net.elasticthreads.nv'" \
      "net.elasticthreads.nv" "add ':Program' string '/Applications/nvALT.app/Contents/MacOS/nvALT'" \
    | while IFS=$'\t' read a b; do
      /usr/libexec/PlistBuddy "${HOME}/Library/LaunchAgents/${a}.plist" -c "${b}" &> /dev/null
    done
  }
#+end_src

*** handlers

#+begin_src sh
  function config_handlers () {
    if [ -f "${HOME}/Library/Preferences/org.duti.plist" ]; then
      rm "${HOME}/Library/Preferences/org.duti.plist"
    fi

    printf "%s\t%s\t%s\n" \
      "com.apple.DiskImageMounter" "com.apple.disk-image" "all" \
      "com.apple.DiskImageMounter" "public.disk-image" "all" \
      "com.apple.DiskImageMounter" "public.iso-image" "all" \
      "com.apple.QuickTimePlayerX" "com.apple.coreaudio-format" "all" \
      "com.apple.QuickTimePlayerX" "com.apple.quicktime-movie" "all" \
      "com.apple.QuickTimePlayerX" "com.microsoft.waveform-audio" "all" \
      "com.apple.QuickTimePlayerX" "public.aifc-audio" "all" \
      "com.apple.QuickTimePlayerX" "public.aiff-audio" "all" \
      "com.apple.QuickTimePlayerX" "public.audio" "all" \
      "com.apple.QuickTimePlayerX" "public.mp3" "all" \
      "com.apple.Safari" "com.compuserve.gif" "all" \
      "com.apple.Terminal" "com.apple.terminal.shell-script" "all" \
      "com.apple.iTunes" "com.apple.iTunes.audible" "all" \
      "com.apple.iTunes" "com.apple.iTunes.ipg" "all" \
      "com.apple.iTunes" "com.apple.iTunes.ipsw" "all" \
      "com.apple.iTunes" "com.apple.iTunes.ite" "all" \
      "com.apple.iTunes" "com.apple.iTunes.itlp" "all" \
      "com.apple.iTunes" "com.apple.iTunes.itms" "all" \
      "com.apple.iTunes" "com.apple.iTunes.podcast" "all" \
      "com.apple.iTunes" "com.apple.m4a-audio" "all" \
      "com.apple.iTunes" "com.apple.mpeg-4-ringtone" "all" \
      "com.apple.iTunes" "com.apple.protected-mpeg-4-audio" "all" \
      "com.apple.iTunes" "com.apple.protected-mpeg-4-video" "all" \
      "com.apple.iTunes" "com.audible.aa-audio" "all" \
      "com.apple.iTunes" "public.mpeg-4-audio" "all" \
      "com.apple.installer" "com.apple.installer-package-archive" "all" \
      "com.github.atom" "com.apple.binary-property-list" "editor" \
      "com.github.atom" "com.apple.crashreport" "editor" \
      "com.github.atom" "com.apple.dt.document.ascii-property-list" "editor" \
      "com.github.atom" "com.apple.dt.document.script-suite-property-list" "editor" \
      "com.github.atom" "com.apple.dt.document.script-terminology-property-list" "editor" \
      "com.github.atom" "com.apple.log" "editor" \
      "com.github.atom" "com.apple.property-list" "editor" \
      "com.github.atom" "com.apple.rez-source" "editor" \
      "com.github.atom" "com.apple.symbol-export" "editor" \
      "com.github.atom" "com.apple.xcode.ada-source" "editor" \
      "com.github.atom" "com.apple.xcode.bash-script" "editor" \
      "com.github.atom" "com.apple.xcode.configsettings" "editor" \
      "com.github.atom" "com.apple.xcode.csh-script" "editor" \
      "com.github.atom" "com.apple.xcode.fortran-source" "editor" \
      "com.github.atom" "com.apple.xcode.ksh-script" "editor" \
      "com.github.atom" "com.apple.xcode.lex-source" "editor" \
      "com.github.atom" "com.apple.xcode.make-script" "editor" \
      "com.github.atom" "com.apple.xcode.mig-source" "editor" \
      "com.github.atom" "com.apple.xcode.pascal-source" "editor" \
      "com.github.atom" "com.apple.xcode.strings-text" "editor" \
      "com.github.atom" "com.apple.xcode.tcsh-script" "editor" \
      "com.github.atom" "com.apple.xcode.yacc-source" "editor" \
      "com.github.atom" "com.apple.xcode.zsh-script" "editor" \
      "com.github.atom" "com.apple.xml-property-list" "editor" \
      "com.github.atom" "com.barebones.bbedit.actionscript-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.erb-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.ini-configuration" "editor" \
      "com.github.atom" "com.barebones.bbedit.javascript-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.json-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.jsp-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.lasso-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.lua-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.setext-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.sql-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.tcl-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.tex-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.textile-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.vbscript-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.vectorscript-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.verilog-hdl-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.vhdl-source" "editor" \
      "com.github.atom" "com.barebones.bbedit.yaml-source" "editor" \
      "com.github.atom" "com.netscape.javascript-source" "editor" \
      "com.github.atom" "com.sun.java-source" "editor" \
      "com.github.atom" "dyn.ah62d4rv4ge80255drq" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge80g55gq3w0n" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge80g55sq2" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge80y2xzrf0gk3pw" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge81e3dtqq" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge81e7k" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge81g25xsq" "all" \
      "com.github.atom" "dyn.ah62d4rv4ge81g2pxsq" "all" \
      "com.github.atom" "net.daringfireball.markdown" "editor" \
      "com.github.atom" "public.assembly-source" "editor" \
      "com.github.atom" "public.c-header" "editor" \
      "com.github.atom" "public.c-plus-plus-source" "editor" \
      "com.github.atom" "public.c-source" "editor" \
      "com.github.atom" "public.csh-script" "editor" \
      "com.github.atom" "public.json" "editor" \
      "com.github.atom" "public.lex-source" "editor" \
      "com.github.atom" "public.log" "editor" \
      "com.github.atom" "public.mig-source" "editor" \
      "com.github.atom" "public.nasm-assembly-source" "editor" \
      "com.github.atom" "public.objective-c-plus-plus-source" "editor" \
      "com.github.atom" "public.objective-c-source" "editor" \
      "com.github.atom" "public.patch-file" "editor" \
      "com.github.atom" "public.perl-script" "editor" \
      "com.github.atom" "public.php-script" "editor" \
      "com.github.atom" "public.plain-text" "editor" \
      "com.github.atom" "public.precompiled-c-header" "editor" \
      "com.github.atom" "public.precompiled-c-plus-plus-header" "editor" \
      "com.github.atom" "public.python-script" "editor" \
      "com.github.atom" "public.ruby-script" "editor" \
      "com.github.atom" "public.script" "editor" \
      "com.github.atom" "public.shell-script" "editor" \
      "com.github.atom" "public.source-code" "editor" \
      "com.github.atom" "public.text" "editor" \
      "com.github.atom" "public.utf16-external-plain-text" "editor" \
      "com.github.atom" "public.utf16-plain-text" "editor" \
      "com.github.atom" "public.utf8-plain-text" "editor" \
      "com.github.atom" "public.xml" "editor" \
      "com.kodlian.Icon-Slate" "com.apple.icns" "all" \
      "com.kodlian.Icon-Slate" "com.microsoft.ico" "all" \
      "com.microsoft.Word" "public.rtf" "all" \
      "com.panayotis.jubler" "dyn.ah62d4rv4ge81g6xy" "all" \
      "com.sketchup.SketchUp.2017" "com.sketchup.skp" "all" \
      "com.VortexApps.NZBVortex3" "dyn.ah62d4rv4ge8068xc" "all" \
      "com.vmware.fusion" "com.microsoft.windows-executable" "all" \
      "cx.c3.theunarchiver" "com.alcohol-soft.mdf-image" "all" \
      "cx.c3.theunarchiver" "com.allume.stuffit-archive" "all" \
      "cx.c3.theunarchiver" "com.altools.alz-archive" "all" \
      "cx.c3.theunarchiver" "com.amiga.adf-archive" "all" \
      "cx.c3.theunarchiver" "com.amiga.adz-archive" "all" \
      "cx.c3.theunarchiver" "com.apple.applesingle-archive" "all" \
      "cx.c3.theunarchiver" "com.apple.binhex-archive" "all" \
      "cx.c3.theunarchiver" "com.apple.bom-compressed-cpio" "all" \
      "cx.c3.theunarchiver" "com.apple.itunes.ipa" "all" \
      "cx.c3.theunarchiver" "com.apple.macbinary-archive" "all" \
      "cx.c3.theunarchiver" "com.apple.self-extracting-archive" "all" \
      "cx.c3.theunarchiver" "com.apple.xar-archive" "all" \
      "cx.c3.theunarchiver" "com.apple.xip-archive" "all" \
      "cx.c3.theunarchiver" "com.cyclos.cpt-archive" "all" \
      "cx.c3.theunarchiver" "com.microsoft.cab-archive" "all" \
      "cx.c3.theunarchiver" "com.microsoft.msi-installer" "all" \
      "cx.c3.theunarchiver" "com.nero.nrg-image" "all" \
      "cx.c3.theunarchiver" "com.network172.pit-archive" "all" \
      "cx.c3.theunarchiver" "com.nowsoftware.now-archive" "all" \
      "cx.c3.theunarchiver" "com.nscripter.nsa-archive" "all" \
      "cx.c3.theunarchiver" "com.padus.cdi-image" "all" \
      "cx.c3.theunarchiver" "com.pkware.zip-archive" "all" \
      "cx.c3.theunarchiver" "com.rarlab.rar-archive" "all" \
      "cx.c3.theunarchiver" "com.redhat.rpm-archive" "all" \
      "cx.c3.theunarchiver" "com.stuffit.archive.sit" "all" \
      "cx.c3.theunarchiver" "com.stuffit.archive.sitx" "all" \
      "cx.c3.theunarchiver" "com.sun.java-archive" "all" \
      "cx.c3.theunarchiver" "com.symantec.dd-archive" "all" \
      "cx.c3.theunarchiver" "com.winace.ace-archive" "all" \
      "cx.c3.theunarchiver" "com.winzip.zipx-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.arc-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.arj-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.dcs-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.dms-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.ha-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.lbr-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.lha-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.lhf-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.lzx-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.packdev-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.pax-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.pma-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.pp-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.xmash-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.zoo-archive" "all" \
      "cx.c3.theunarchiver" "cx.c3.zoom-archive" "all" \
      "cx.c3.theunarchiver" "org.7-zip.7-zip-archive" "all" \
      "cx.c3.theunarchiver" "org.archive.warc-archive" "all" \
      "cx.c3.theunarchiver" "org.debian.deb-archive" "all" \
      "cx.c3.theunarchiver" "org.gnu.gnu-tar-archive" "all" \
      "cx.c3.theunarchiver" "org.gnu.gnu-zip-archive" "all" \
      "cx.c3.theunarchiver" "org.gnu.gnu-zip-tar-archive" "all" \
      "cx.c3.theunarchiver" "org.tukaani.lzma-archive" "all" \
      "cx.c3.theunarchiver" "org.tukaani.xz-archive" "all" \
      "cx.c3.theunarchiver" "public.bzip2-archive" "all" \
      "cx.c3.theunarchiver" "public.cpio-archive" "all" \
      "cx.c3.theunarchiver" "public.tar-archive" "all" \
      "cx.c3.theunarchiver" "public.tar-bzip2-archive" "all" \
      "cx.c3.theunarchiver" "public.z-archive" "all" \
      "cx.c3.theunarchiver" "public.zip-archive" "all" \
      "cx.c3.theunarchiver" "public.zip-archive.first-part" "all" \
      "org.gnu.Emacs" "dyn.ah62d4rv4ge8086xh" "all" \
      "org.inkscape.Inkscape" "public.svg-image" "editor" \
      "org.videolan.vlc" "com.apple.m4v-video" "all" \
      "org.videolan.vlc" "com.microsoft.windows-media-wmv" "all" \
      "org.videolan.vlc" "org.videolan.3gp" "all" \
      "org.videolan.vlc" "org.videolan.aac" "all" \
      "org.videolan.vlc" "org.videolan.ac3" "all" \
      "org.videolan.vlc" "org.videolan.aiff" "all" \
      "org.videolan.vlc" "org.videolan.amr" "all" \
      "org.videolan.vlc" "org.videolan.aob" "all" \
      "org.videolan.vlc" "org.videolan.ape" "all" \
      "org.videolan.vlc" "org.videolan.asf" "all" \
      "org.videolan.vlc" "org.videolan.avi" "all" \
      "org.videolan.vlc" "org.videolan.axa" "all" \
      "org.videolan.vlc" "org.videolan.axv" "all" \
      "org.videolan.vlc" "org.videolan.divx" "all" \
      "org.videolan.vlc" "org.videolan.dts" "all" \
      "org.videolan.vlc" "org.videolan.dv" "all" \
      "org.videolan.vlc" "org.videolan.flac" "all" \
      "org.videolan.vlc" "org.videolan.flash" "all" \
      "org.videolan.vlc" "org.videolan.gxf" "all" \
      "org.videolan.vlc" "org.videolan.it" "all" \
      "org.videolan.vlc" "org.videolan.mid" "all" \
      "org.videolan.vlc" "org.videolan.mka" "all" \
      "org.videolan.vlc" "org.videolan.mkv" "all" \
      "org.videolan.vlc" "org.videolan.mlp" "all" \
      "org.videolan.vlc" "org.videolan.mod" "all" \
      "org.videolan.vlc" "org.videolan.mpc" "all" \
      "org.videolan.vlc" "org.videolan.mpeg-audio" "all" \
      "org.videolan.vlc" "org.videolan.mpeg-stream" "all" \
      "org.videolan.vlc" "org.videolan.mpeg-video" "all" \
      "org.videolan.vlc" "org.videolan.mxf" "all" \
      "org.videolan.vlc" "org.videolan.nsv" "all" \
      "org.videolan.vlc" "org.videolan.nuv" "all" \
      "org.videolan.vlc" "org.videolan.ogg-audio" "all" \
      "org.videolan.vlc" "org.videolan.ogg-video" "all" \
      "org.videolan.vlc" "org.videolan.oma" "all" \
      "org.videolan.vlc" "org.videolan.opus" "all" \
      "org.videolan.vlc" "org.videolan.quicktime" "all" \
      "org.videolan.vlc" "org.videolan.realmedia" "all" \
      "org.videolan.vlc" "org.videolan.rec" "all" \
      "org.videolan.vlc" "org.videolan.rmi" "all" \
      "org.videolan.vlc" "org.videolan.s3m" "all" \
      "org.videolan.vlc" "org.videolan.spx" "all" \
      "org.videolan.vlc" "org.videolan.tod" "all" \
      "org.videolan.vlc" "org.videolan.tta" "all" \
      "org.videolan.vlc" "org.videolan.vob" "all" \
      "org.videolan.vlc" "org.videolan.voc" "all" \
      "org.videolan.vlc" "org.videolan.vqf" "all" \
      "org.videolan.vlc" "org.videolan.vro" "all" \
      "org.videolan.vlc" "org.videolan.wav" "all" \
      "org.videolan.vlc" "org.videolan.webm" "all" \
      "org.videolan.vlc" "org.videolan.wma" "all" \
      "org.videolan.vlc" "org.videolan.wmv" "all" \
      "org.videolan.vlc" "org.videolan.wtv" "all" \
      "org.videolan.vlc" "org.videolan.wv" "all" \
      "org.videolan.vlc" "org.videolan.xa" "all" \
      "org.videolan.vlc" "org.videolan.xesc" "all" \
      "org.videolan.vlc" "org.videolan.xm" "all" \
      "org.videolan.vlc" "public.ac3-audio" "all" \
      "org.videolan.vlc" "public.audiovisual-content" "all" \
      "org.videolan.vlc" "public.avi" "all" \
      "org.videolan.vlc" "public.movie" "all" \
      "org.videolan.vlc" "public.mpeg" "all" \
      "org.videolan.vlc" "public.mpeg-2-video" "all" \
      "org.videolan.vlc" "public.mpeg-4" "all" \
    | while IFS=$'\t' read a b c; do
        defaults write org.duti DUTISettings -array-add \
          "{
            DUTIBundleIdentifier = '$a';
            DUTIUniformTypeIdentifier = '$b';
            DUTIRole = '$c';
          }"
    done

    if [ -x "/usr/local/bin/duti" ]; then
      p "Set document file handlers"

      duti "${HOME}/Library/Preferences/org.duti.plist" 2> /dev/null
    fi

    /System/Library/Frameworks/CoreServices.framework/Versions/Current/Frameworks/LaunchServices.framework/Versions/Current/Support/lsregister -kill -r -domain local -domain system -domain user

    sudo rm -rf /Library/Caches/com.apple.iconservices.store
    sudo find /private/var/folders -depth \( -name com.apple.dock.iconcache -or -name com.apple.iconservices \) -exec rm -rf {} \;
    sudo touch /Applications/* /Applications/Utilities/* 2> /dev/null

    sleep 5
    osascript -e 'tell app "Dock" to quit'
    killall Finder
  }
#+end_src

*** Configure Home

#+begin_src sh
  function config_home () {
    STORAGE="/Volumes/Storage"

    printf "%s\t%s\n" \
      "Incoming/Downloads" "Downloads" \
      "Media" "Music" \
      "Incoming/Movies" "Movies" \
      "Incoming/TV-Shows" "TV Shows" \
    | while IFS=$'\t' read a b; do
      SetFile -P -a l "${HOME}/${b}" 1> /dev/null
      chmod -h -N "${HOME}/${b}" 2> /dev/null
      rm -rf "${HOME}/${b}"
      ln -s "${STORAGE}/${a}" "${HOME}/${b}"
      chmod -h go= "${HOME}/${b}"
      chmod -h +a "group:everyone deny delete" "${HOME}/${b}"
      SetFile -P -a L "${HOME}/${b}"
    done
  }
#+end_src

#+begin_src sh
  function config_done () {
    p "To copy gpg public key, enter 'config_gpg_help'"
    p "To copy ssh public key, enter 'config_ssh_help'"
    p "Otherwise, enter 'private' (if configured) or 'reboot' now"
  }
#+end_src

*** config

#+begin_src sh
  function config () {
    config_mas
    config_atom
    config_bbedit
    config_desktop
    config_dock
    config_emacs
    config_istat
    config_vi_script
    config_terminal
    config_openssl
    config_dovecot
    config_sieve
    config_getmail
    config_gpg
    config_git
    config_shell
    config_ssh
    #config_vim
    config_zsh
    config_loginitems
    config_handlers
    config_home
    config_done
  }
#+end_src

** Private

This section includes license keys, registration codes, and serial numbers.

#+begin_src sh
  function private () {
    printf "%s\n"
#+end_src

-----BEGIN PGP MESSAGE-----

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
a5WF1Em0Gvw12UnLvPxV7evZTsxtvHro2vTKTCtP5M2L3MfbxvTmnAqeVELqA2Bx
b75aasBmka1+TFoBNyvSWWIBK1bvd8X5dL8wt55yqdZu7dabdwmwixYBEczTl8Be
ehA/+BEmbGcu7uveN8xMMISI1S72dwcTqYDMIXZnKOHCF1DCYwK3HdEceV87evSr
ehy0pK9+J52+xdDi+vBU1CX5sTYqIMTbZGiG2lU3XSYbvSH4YZkUIkDbCBN0AOCP
LNXwG/6LkZEg+5ceJaLQrPrIvSkkFNWyZujqJD7EaFktmP7y+byWe2LE6GCbTHl8
rBYlIC2uXypAYacb6k+QImFn7mUaz8aU4/D5buyObhtReX/08APzUV9SzGOx2p3S
0RLuVJ+wJXqmn7J9nCKgSkY9j5Ibnctg/jjqn5iTZ+7Gzo7eWIqDR/cLtwccctwu
+qS76poDnWjL7Y//Gp8jqOw6+lNMlW/Qax2waAyFo2jpCOGnUTdjTg6HXmjX/tRD
FCiQTox68LdzTjz2Y1ytdE/pgBCM/cjlWr8SKgiuFJH9CHdfL6N8p/ec0+MLArVr
0f4TQaokdiZlhKedw9VVXvNrm/a4i1dgAVYVA3NiwVShjB6wfd+t2iBlbW9cQABd
IGEFg4qqBnaBMCVp0DaxCsYKFiIJyES53tcVVuUg7Inx/hbHEKuU+Bw9w6NsQQ2c
aVtTixNw46UDEJJHyyycWZzBI6WIaFU9S0wgyuf/66I+eshSIYipEpKdcOA3eZIk
NJ1n1XCMfJIZjVg0lldSTtj/b7O/ocxcEfJIXvwXyjLS8K8KJ5PIukkeNRmcq1xz
Z77yv44Cs3V3XwgXjDJIMeXFGOxPqVVOv6r3Ag3sOy8h9YZDBgN1MRJNiUxT9G5y
2wWboAvYk0IPP9UdM1z06p6zkZgBj931HvwdvUu/lZQd99bowZsZiajXIFLsTjqu
PGQos7i7ryJvQsw4mi64tA8zts1rXs+qGSQzEJ5j+J8GFrUMm8cJ9ZVdSRc8vVn3
2wt+zsAFLa0+3I9bPkqPuYczezIdsmfz5vDfdllETpJ0FBnSAbCEyXh8ZgrtF+Cn
R4SM5kbBeCED2StTU+VKtc76ia3BvoR4pluEjD9nc1HnfOhPyVqkj2B4WXmsbJfS
5Rl+JLntTNB+zoxF7TTkSGIUNsS3ONqaONWqjiN+4lXk/bI+J4x9fFIG2HFc5QpE
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
=k3CA
-----END PGP MESSAGE-----

#+begin_src sh
    # sudo fdesetup enable
  }
#+end_src


** Commands

#+begin_src sh
  function display_help () {
    cat << EOF

    Initialize:
      $(which init)

    Install:
      $(which install)

  EOF
  }

  display_help
  fi
#+end_src
